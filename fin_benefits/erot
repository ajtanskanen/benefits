1a2
> Pohja perustulo-mallille. 
3,6c4
<     benefits
<     
<     implements social security and social insurance benefits in the Finnish social security schemes
< 
---
> Päivitä vastaamaan uusinta benefits-tiedostoa.
13c11
< import seaborn as sns
---
> from .benefits import Benefits
15c13
< class Benefits():
---
> class BasicIncomeBenefits(Benefits):
18c16
<         The Finnish Earnings-related Social Security
---
>         The Finnish Earnings-related Social Security modified to include basic income
26,34c24,30
<         self.year=2018
<         self.irr_vain_tyoelake=True
<         self.additional_income_tax=0.0
<         self.additional_tyel_premium=0.0
<         self.additional_kunnallisvero=0.0
<         self.additional_income_tax_high=0.0
<         self.extra_ppr_factor=1.0 # kerroin peruspäivärahalle
<         self.language='Finnish' # 'English'
<         
---
>     
>         self.perustulomalli='BI'
>         self.osittainen_perustulo=True
>         self.perustulo_korvaa_toimeentulotuen=False
>         self.koko_tyel_maksu=0.244
>         self.kk_jakaja=12
>                 
38,39c34
<             kwarg=kwargs
<             
---
>             kwarg={}
41,44c36
<             if key=='year':
<                 if value is not None:
<                     self.year=value
<             elif key=='language': # language for plotting
---
>             if key=='perustulomalli':
46,47c38,39
<                     self.language=value
<             elif key=='irr_vain_tyoelake': # lasketaanko irr
---
>                     self.perustulomalli=value
>             elif key=='osittainen_perustulo':
49,50c41,42
<                     self.irr_vain_tyoelake=value
<             elif key=='additional_income_tax':
---
>                     self.osittainen_perustulo=value
>             elif key=='valtionverotaso':
52,53c44,45
<                     self.additional_income_tax=value
<             elif key=='additional_income_tax_high':
---
>                     self.valtionverotaso=value
>             elif key=='perustulo_asetettava':
55,56c47,48
<                     self.additional_income_tax_high=value
<             elif key=='additional_tyel_premium':
---
>                     self.perustulo_asetettava=value
>             elif key=='perustulo_korvaa_toimeentulotuen':
58,258c50,55
<                     self.additional_tyel_premium=value
<             elif key=='additional_kunnallisvero':
<                 if value is not None:
<                     self.additional_kunnallisvero=value
<             elif key=='extra_ppr':
<                 if value is not None:
<                     self.extra_ppr_factor+=value
<     
<         # choose the correct set of benefit functions for computations
<         self.set_year(self.year)
<         self.setup_labels()
<         
<     def explain(self,p=None):
<         #self.tee_selite()
<         if p is None:
<             print('Ei parametrejä')
<         else:
<             selite=tee_selite(p)
<             print(p)
<             
<     def setup_labels(self):
<         self.labels={}
<         if self.language=='English':
<             self.labels['wage']='Wage (e/m)'
<             self.labels['pure wage']='Wage'
<             self.labels['effective']='Eff.marg.tax (%)'
<             self.labels['valtionvero']='State tax'
<             self.labels['kunnallisvero']='Municipal tax'
<             self.labels['telp']='Employee pension premium'
<             self.labels['sairausvakuutus']='Health insurance'
<             self.labels['työttömyysvakuutusmaksu']='työttömyysvakuutusmaksu'
<             self.labels['puolison verot']='puolison verot'
<             self.labels['taxes']='Taxes'
<             self.labels['asumistuki']='Housing benefit'
<             self.labels['toimeentulotuki']='Supplementary benefit'
<             self.labels['tyottomyysturva']='Unemployment benefit'
<             self.labels['paivahoito']='Daycare'
<             self.labels['elake']='Pension'
<             self.labels['perustulo']='Universal basic income'
<             self.labels['opintotuki']='Opintotuki'
<             self.labels['lapsilisa']='Lapsilisa'
<             self.labels['net income']='Net income (e/m)'
<         else:
<             self.labels['wage']='Palkka (e/kk)'
<             self.labels['pure wage']='Palkka'
<             self.labels['effective']='Eff.marg.veroaste (%)'
<             self.labels['valtionvero']='Valtionvero'
<             self.labels['kunnallisvero']='Kunnallisvero'
<             self.labels['telp']='TEL-P'
<             self.labels['sairausvakuutus']='Sairausvakuutus'
<             self.labels['työttömyysvakuutusmaksu']='Työttömyysvakuutusmaksu'
<             self.labels['puolison verot']='puolison verot'
<             self.labels['taxes']='Verot'
<             self.labels['asumistuki']='Asumistuki'
<             self.labels['toimeentulotuki']='Toimeentulotuki'
<             self.labels['tyottomyysturva']='Työttömyysturva'
<             self.labels['paivahoito']='Päivähoito'
<             self.labels['elake']='Elake'
<             self.labels['perustulo']='Perustulo'
<             self.labels['opintotuki']='Opintotuki'
<             self.labels['lapsilisa']='Lapsilisa'
<             self.labels['net income']='Käteen (e/kk)'
<     
<     def toimeentulotuki_param2018(self):
<         min_etuoikeutettuosa=150
<         lapsi1=305.87     # e/kk     alle 10v lapsi
<         lapsi2=281.59     # e/kk
<         lapsi3=257.32     # e/kk
<         yksinhuoltaja=534.05     # e/kk
<         # muu 18v täyttänyt ja avio- ja avopuolisot 412,68
<         muu=412.68    
<         yksinasuva=485.50
<         
<         return min_etuoikeutettuosa,lapsi1,lapsi2,lapsi3,yksinhuoltaja,muu,yksinasuva
<     
<     def toimeentulotuki_param2019(self):
<         min_etuoikeutettuosa=150
<         lapsi1=313.29     # e/kk     alle 10v lapsi
<         lapsi2=288.43     # e/kk
<         lapsi3=263.56     # e/kk
<         yksinhuoltaja=547.02     # e/kk
<         # muu 18v täyttänyt ja avio- ja avopuolisot 412,68
<         muu=422.70    
<         yksinasuva=497.29
<         return min_etuoikeutettuosa,lapsi1,lapsi2,lapsi3,yksinhuoltaja,muu,yksinasuva
< 
<     def toimeentulotuki_param2020(self):
<         min_etuoikeutettuosa=150
<         lapsi1=317.56     # e/kk     alle 10v lapsi
<         lapsi2=292.35     # e/kk
<         lapsi3=267.15     # e/kk
<         yksinhuoltaja=572.52     # e/kk
<         # muu 18v täyttänyt ja avio- ja avopuolisot 412,68
<         muu=412.68    
<         yksinasuva=502.21
<         return min_etuoikeutettuosa,lapsi1,lapsi2,lapsi3,yksinhuoltaja,muu,yksinasuva
<         
<     def toimeentulotuki_param2021(self):
<         min_etuoikeutettuosa=150
<         lapsi1=317.56     # e/kk     alle 10v lapsi
<         lapsi2=292.35     # e/kk
<         lapsi3=267.15     # e/kk
<         yksinhuoltaja=574.63     # e/kk
<         # muu 18v täyttänyt ja avio- ja avopuolisot 412,68
<         muu=428.45
<         yksinasuva=504.16
<         return min_etuoikeutettuosa,lapsi1,lapsi2,lapsi3,yksinhuoltaja,muu,yksinasuva
<         
<     def toimeentulotuki(self,omabruttopalkka,omapalkkavero,puolison_bruttopalkka,puolison_palkkavero,
<                              muuttulot,verot,asumismenot,muutmenot,p,omavastuuprosentti=0.0,alennus=0):
< 
<         omavastuu=omavastuuprosentti*asumismenot
<         menot=max(0,asumismenot-omavastuu)+muutmenot
<         
<         min_etuoikeutettuosa,lapsi1,lapsi2,lapsi3,yksinhuoltaja,muu,yksinasuva=self.toimeentulotuki_param()
< 
<         #menot=asumismenot+muutmenot    
<         bruttopalkka=omabruttopalkka+puolison_bruttopalkka    
<         palkkavero=omapalkkavero+puolison_palkkavero    
<         palkkatulot=bruttopalkka-palkkavero    
<         
<         if False: # lain mukainen tiukka tulkinta
<             omaetuoikeutettuosa=min(min_etuoikeutettuosa,0.2*omabruttopalkka)     # etuoikeutettu osa edunsaajakohtainen 1.1.2015 alkaen
<             puolison_etuoikeutettuosa=min(min_etuoikeutettuosa,0.2*puolison_bruttopalkka)    
<         else: # Kelan tulkinta: aina 150e
<             omaetuoikeutettuosa=min_etuoikeutettuosa
<             puolison_etuoikeutettuosa=min_etuoikeutettuosa
<             
<         etuoikeutettuosa=omaetuoikeutettuosa+puolison_etuoikeutettuosa    
< 
<         if p['aikuisia']<2:
<             if p['lapsia']<1: 
<                 tuki1=yksinasuva     # yksinasuva 485,50
<             elif p['lapsia']==1:
<                 tuki1=yksinhuoltaja+lapsi1     # yksinhuoltaja 534,05
<             elif p['lapsia']==2:
<                 tuki1=yksinhuoltaja+lapsi1+lapsi2     # yksinhuoltaja 534,05
<             else:
<                 tuki1=yksinhuoltaja+lapsi1+lapsi2+lapsi3*(p['lapsia']-2)     # yksinhuoltaja 534,05
<         else:
<             if p['lapsia']<1:
<                 tuki1=muu*p['aikuisia']   
<             elif p['lapsia']==1:
<                 tuki1=muu*p['aikuisia']+lapsi1     # yksinhuoltaja 534,05
<             elif p['lapsia']==2:
<                 tuki1=muu*p['aikuisia']+lapsi1+lapsi2     # yksinhuoltaja 534,05
<             else:
<                 tuki1=muu*p['aikuisia']+lapsi1+lapsi2+lapsi3*(p['lapsia']-2)     # yksinhuoltaja 534,05
< 
<         # if (bruttopalkka-etuoikeutettuosa>palkkavero)
<         #     tuki=max(0,tuki1+menot-max(0,bruttopalkka-etuoikeutettuosa-palkkavero)-verot-muuttulot)    
<         # else 
<         #     verot2=palkkavero+verot-max(0,(bruttopalkka-etuoikeutettuosa))    
<         #     tuki=max(0,tuki1+menot-muuttulot+verot2)    
<         # end
<         if alennus>0:
<             tuki1=tuki1*(1-alennus)
<         
<         tuki=max(0,tuki1+menot-max(0,omabruttopalkka-omaetuoikeutettuosa-omapalkkavero)\
<                 -max(0,puolison_bruttopalkka-puolison_etuoikeutettuosa-puolison_palkkavero)-verot-muuttulot)
<                 
<         if p['toimeentulotuki_vahennys']>0: # vähennetään 20%
<             tuki=tuki*0.8
<                 
<         if tuki<10:
<             tuki=0    
<             
<         return tuki
<         
<     def perheparametrit(self,perhetyyppi=10,tulosta=False):
<         return perheparametrit(perhetyyppi=perhetyyppi,tulosta=tulosta)
<         
<     def get_default_parameter(self):
<         return perheparametrit(perhetyyppi=1)
<     
<     # tmtuki samankokoinen
<     def peruspaivaraha2018(self,lapsia):
<         if lapsia==0:
<             lisa=0    
<         elif lapsia==1:
<             lisa=5.23     # e/pv
<         elif lapsia==2:
<             lisa=7.68     # e/pv
<         else:
<             lisa=9.90     # e/pv
<         
<         pvraha=21.5*(32.40+lisa) #*self.extra_ppr_factor
<         tuki=max(0,pvraha)    
<     
<         return tuki
<         
<     # tmtuki samankokoinen
<     def peruspaivaraha2019(self,lapsia):
<         if lapsia==0:
<             lisa=0    
<         elif lapsia==1:
<             lisa=5.23     # e/pv
<         elif lapsia==2:
<             lisa=7.68     # e/pv
<         else:
<             lisa=9.90     # e/pv
---
>                     self.perustulo_korvaa_toimeentulotuen=value
>                     
>         print(f'UBI-model {self.perustulomalli}\nPartial UBI {self.osittainen_perustulo}\nperustulo_korvaa_toimeentulotuen {self.perustulo_korvaa_toimeentulotuen}')
>                     
>         super().__init__(**kwargs)
>         self.setup_basic_income()
260,274c57,59
<         pvraha=21.5*(32.40+lisa) #*self.extra_ppr_factor
<         tuki=max(0,pvraha)    
<     
<         return tuki
< 
<     # tmtuki samankokoinen
<     def peruspaivaraha2020(self,lapsia):
<         if lapsia==0:
<             lisa=0    
<         elif lapsia==1:
<             lisa=5.28     # e/pv
<         elif lapsia==2:
<             lisa=7.76     # e/pv
<         else:
<             lisa=10.00     # e/pv
---
>     def set_year(self,vuosi):
>         super().set_year(vuosi)
>         self.setup_basic_income()
276,288c61,138
<         pvraha=21.5*(33.66+lisa) #*self.extra_ppr_factor
<         tuki=max(0,pvraha)    
<     
<         return tuki
< 
<     # tmtuki samankokoinen
<     def peruspaivaraha2021(self,lapsia):
<         if lapsia==0:
<             lisa=0    
<         elif lapsia==1:
<             lisa=5.28     # e/pv
<         elif lapsia==2:
<             lisa=7.76     # e/pv
---
>     def setup_basic_income(self):
>         if self.perustulomalli=='perustulokokeilu':
>             # Kela-malli
>             self.perustulo=self.laske_perustulo_Kelamalli
>             self.asumistuen_suojaosa=600
>             self.max_tyotulovahennys=1540
>             self.max_perusvahennys=3020
>             self.max_ansiotulovahennys=3570
>             self.valtionvero_asteikko_perustulo=self.valtionvero_asteikko_2018
>             self.verotus=super().verotus
>             self.veroparam2018=self.veroparam2018_perustulokokeilu
>             # ei muutosta verotukseen, ei aktiivimallia toteutettuna
>         elif self.perustulomalli=='Kela':
>             # Kela-malli
>             self.perustulo=self.laske_perustulo_Kelamalli
>             self.asumistuen_suojaosa=600
>             self.max_tyotulovahennys=0
>             self.max_perusvahennys=0
>             self.max_ansiotulovahennys=0
>             self.veroparam2018=self.veroparam2018_perustulo
>             self.valtionvero_asteikko_perustulo=self.valtionvero_asteikko_perustulo_Kela
>         elif self.perustulomalli=='BI':
>             # Artikkelin BI-malli
>             self.perustulo=self.laske_perustulo_BI
>             self.asumistuen_suojaosa=600
>             self.max_tyotulovahennys=0
>             self.max_perusvahennys=0
>             self.max_ansiotulovahennys=0
>             self.veroparam2018=self.veroparam2018_perustulo
>             self.valtionvero_asteikko_perustulo=self.valtionvero_asteikko_perustulo_BI
>         elif self.perustulomalli in set(['vasemmistoliitto','Vasemmistoliitto']):        
>             # Vasemmistoliitto
>             self.perustulo=self.laske_perustulo_vasemmistoliitto
>             self.asumistuen_suojaosa=600
>             self.max_tyotulovahennys=0
>             self.max_perusvahennys=0
>             self.veroparam2018=self.veroparam2018_perustulo
>             self.max_ansiotulovahennys=0
>             self.valtionvero_asteikko_perustulo=self.valtionvero_asteikko_perustulo_vasemmistoliitto
>         elif self.perustulomalli in set (['asetettava']):
>             # asetettava
>             self.perustulo=self.laske_perustulo_asetettava
>             self.asumistuen_suojaosa=600
>             #self.perustulo_asetettava=
>             self.max_tyotulovahennys=0
>             self.max_perusvahennys=0
>             self.max_ansiotulovahennys=0
>             self.veroparam2018=self.veroparam2018_perustulo
>             self.valtionvero_asteikko_perustulo=self.valtionvero_asteikko_perustulo_asetettava
>             self.peruspaivaraha=self.peruspaivaraha_bi
>         elif self.perustulomalli in set (['vihreat','Vihreät','vihreät','Vihreat']):
>             # Vihreiden malli
>             self.perustulo=self.laske_perustulo_vihreat
>             self.asumistuen_suojaosa=600
>             self.max_tyotulovahennys=0
>             self.max_perusvahennys=0
>             self.max_ansiotulovahennys=0
>             self.veroparam2018=self.veroparam2018_perustulo
>             self.valtionvero_asteikko_perustulo=self.valtionvero_asteikko_perustulo_vihreat
>             self.peruspaivaraha=self.peruspaivaraha_bi
>         elif self.perustulomalli=='tonni':        
>             # Tonnin täysi perustulo
>             self.perustulo=self.laske_perustulo_tonni
>             self.asumistuen_suojaosa=600
>             self.max_tyotulovahennys=0
>             self.max_perusvahennys=0
>             self.max_ansiotulovahennys=0
>             self.veroparam2018=self.veroparam2018_perustulo
>             self.valtionvero_asteikko_perustulo=self.valtionvero_asteikko_perustulo_tonni
>         elif self.perustulomalli=='puolitoista':        
>             # Tonnin täysi perustulo
>             self.perustulo=self.laske_perustulo_puolitoista
>             self.asumistuen_suojaosa=600
>             self.max_tyotulovahennys=0
>             self.max_perusvahennys=0
>             self.max_ansiotulovahennys=0
>             self.veroparam2018=self.veroparam2018_perustulo
>             self.valtionvero_asteikko_perustulo=self.valtionvero_asteikko_perustulo_1500
290c140
<             lisa=10.00     # e/pv
---
>             print('basic_income: unknown basic income model')
292,346c142,143
<         pvraha=21.5*(33.66+lisa) #*self.extra_ppr_factor
<         tuki=max(0,pvraha)    
<     
<         return tuki
<                 
<     def ansiopaivaraha_ylaraja(self,ansiopaivarahamaara,tyotaikaisettulot,vakpalkka,vakiintunutpalkka):
<         if vakpalkka<ansiopaivarahamaara+tyotaikaisettulot:
<             return max(0,vakpalkka-tyotaikaisettulot) 
<             
<         return ansiopaivarahamaara   
< 
<     def ansiopaivaraha(self,tyoton,vakiintunutpalkka,lapsia,tyotaikaisettulot,saa_ansiopaivarahaa,kesto,p,ansiokerroin=1.0,omavastuukerroin=1.0):
<         ansiopvrahan_suojaosa=p['ansiopvrahan_suojaosa']
<         lapsikorotus=p['ansiopvraha_lapsikorotus']
<     
<         if tyoton>0:
<             if lapsikorotus<1:
<                 lapsia=0    
< 
<             if self.year==2018:
<                 lapsikorotus=np.array([0,5.23,7.68,9.90])*21.5    
<                 sotumaksu=0.0448+0.6*self.additional_tyel_premium
<                 taite=3078.60    
<             elif self.year==2019:
<                 lapsikorotus=np.array([0,5.23,7.68,9.90])*21.5    
<                 sotumaksu=0.0448+0.6*self.additional_tyel_premium
<                 taite=3078.60    
<             elif self.year==2020:
<                 lapsikorotus=np.array([0,5.28,7.76,10.00])*21.5    
<                 sotumaksu=0.0414+0.6*self.additional_tyel_premium
<                 taite=3197.70    
<             elif self.year==2021:
<                 lapsikorotus=np.array([0,5.30,7.80,10.03])*21.5    
<                 sotumaksu=0.0434+0.6*self.additional_tyel_premium
<                 taite=3209.10    
<             else:
<                 lapsikorotus=np.array([0,5.23,7.68,9.90])*21.5    
<                 sotumaksu=0.0448+0.6*self.additional_tyel_premium
<                 taite=3078.60    
<                             
<             if saa_ansiopaivarahaa>0: # & (kesto<400.0): # ei keston tarkastusta!
<                 #print(f'tyoton {tyoton} vakiintunutpalkka {vakiintunutpalkka} lapsia {lapsia} tyotaikaisettulot {tyotaikaisettulot} saa_ansiopaivarahaa {saa_ansiopaivarahaa} kesto {kesto} ansiokerroin {ansiokerroin} omavastuukerroin {omavastuukerroin}')
<             
<                 perus=self.peruspaivaraha(0)     # peruspäiväraha lasketaan tässä kohdassa ilman lapsikorotusta
<                 vakpalkka=vakiintunutpalkka*(1-sotumaksu)     
<                 #print(f'vakpalkka {vakpalkka}')
<                 if vakpalkka>taite:
<                     tuki2=0.2*max(0,vakpalkka-taite)+0.45*max(0,taite-perus)+perus    
<                 else:
<                     tuki2=0.45*max(0,vakpalkka-perus)+perus
<                 #print(f'tuki2 {tuki2} taite {taite} perus {perus} vakpalkka {vakpalkka}')
< 
<                 tuki2=tuki2+lapsikorotus[min(lapsia,3)]    
<                 tuki2=tuki2*ansiokerroin # mahdollinen porrastus tehdään tämän avulla
<                 suojaosa=self.tyottomyysturva_suojaosa(ansiopvrahan_suojaosa,p)    
---
>     def laske_perustulo_Kelamalli(self):
>         return 560.0
348,351c145,149
<                 perus=self.peruspaivaraha(lapsia)     # peruspäiväraha lasketaan tässä kohdassa lapsikorotukset mukana
<                 if tuki2>.9*vakpalkka:
<                     tuki2=max(.9*vakpalkka,perus)    
<                 #print(f'tuki2 {tuki2}')
---
>     def laske_perustulo_BI(self):
>         '''
>         Artikkelia varten
>         '''
>         return 600.0
353,379c151,152
<                 vahentavattulo=max(0,tyotaikaisettulot-suojaosa)    
<                 ansiopaivarahamaara=max(0,tuki2-0.5*vahentavattulo)  
<                 ansiopaivarahamaara=self.ansiopaivaraha_ylaraja(ansiopaivarahamaara,tyotaikaisettulot,vakpalkka,vakiintunutpalkka)  
<                 #print(f'ansiopaivarahamaara {ansiopaivarahamaara}')
< 
<                 tuki=ansiopaivarahamaara    
<                 perus=self.soviteltu_peruspaivaraha(lapsia,tyotaikaisettulot,ansiopvrahan_suojaosa,p)    
<                 tuki=omavastuukerroin*max(perus,tuki)     # voi tulla vastaan pienillä tasoilla4
<             else:
<                 ansiopaivarahamaara=0    
<                 perus=self.soviteltu_peruspaivaraha(lapsia,tyotaikaisettulot,ansiopvrahan_suojaosa,p)    
<                 tuki=omavastuukerroin*perus    
<         else:
<             perus=0    
<             tuki=0    
<             ansiopaivarahamaara=0   
< 
<         return tuki,ansiopaivarahamaara,perus
< 
<     def soviteltu_peruspaivaraha(self,lapsia,tyotaikaisettulot,ansiopvrahan_suojaosa,p):
<         suojaosa=self.tyottomyysturva_suojaosa(ansiopvrahan_suojaosa,p)
< 
<         pvraha=self.peruspaivaraha(lapsia)
<         vahentavattulo=max(0,tyotaikaisettulot-suojaosa)
<         tuki=max(0,pvraha-0.5*vahentavattulo)
<     
<         return tuki
---
>     def laske_perustulo_tm(self):
>         return 660
381,431c154,155
<     def elaketulovahennys2018(self,elaketulot,tulot):
<         max_elaketulovahennys_valtio=11560/self.kk_jakaja
<         elaketulovahennys_valtio=max(0,min(elaketulot,max_elaketulovahennys_valtio-0.38*max(0,tulot-max_elaketulovahennys_valtio)))
<         max_elaketulovahennys_kunnallis=9040/self.kk_jakaja
<         elaketulovahennys_kunnallis=max(0,min(elaketulot,max(0,max_elaketulovahennys_kunnallis-0.51*max(0,tulot-max_elaketulovahennys_kunnallis))))
<         return elaketulovahennys_valtio,elaketulovahennys_kunnallis
< 
<     def elaketulovahennys2019(self,elaketulot,tulot):
<         max_elaketulovahennys_valtio=11590/self.kk_jakaja
<         elaketulovahennys_valtio=max(0,min(elaketulot,max_elaketulovahennys_valtio-0.38*max(0,tulot-max_elaketulovahennys_valtio)))
<         max_elaketulovahennys_kunnallis=9050/self.kk_jakaja
<         elaketulovahennys_kunnallis=max(0,min(elaketulot,max(0,max_elaketulovahennys_kunnallis-0.51*max(0,tulot-max_elaketulovahennys_kunnallis))))
<         return elaketulovahennys_valtio,elaketulovahennys_kunnallis
< 
<     def elaketulovahennys2020(self,elaketulot,tulot):
<         max_elaketulovahennys_valtio=11540/self.kk_jakaja
<         elaketulovahennys_valtio=max(0,min(elaketulot,max_elaketulovahennys_valtio-0.38*max(0,tulot-max_elaketulovahennys_valtio)))
<         max_elaketulovahennys_kunnallis=9230/self.kk_jakaja
<         elaketulovahennys_kunnallis=max(0,min(elaketulot,max(0,max_elaketulovahennys_kunnallis-0.51*max(0,tulot-max_elaketulovahennys_kunnallis))))
<         return elaketulovahennys_valtio,elaketulovahennys_kunnallis
< 
<     def elaketulovahennys2021(self,elaketulot,tulot):
<         max_elaketulovahennys_valtio=11150/self.kk_jakaja
<         elaketulovahennys_valtio=max(0,min(elaketulot,max_elaketulovahennys_valtio-0.38*max(0,tulot-max_elaketulovahennys_valtio)))
<         max_elaketulovahennys_kunnallis=9270/self.kk_jakaja
<         elaketulovahennys_kunnallis=max(0,min(elaketulot,max(0,max_elaketulovahennys_kunnallis-0.51*max(0,tulot-max_elaketulovahennys_kunnallis))))
<         return elaketulovahennys_valtio,elaketulovahennys_kunnallis
< 
<     def tyotulovahennys2018(self):
<         max_tyotulovahennys=1540/self.kk_jakaja
<         ttulorajat=np.array([2500,33000,127000])/self.kk_jakaja
<         ttulopros=np.array([0.120,0.0165,0])
<         return max_tyotulovahennys,ttulorajat,ttulopros
< 
<     def tyotulovahennys2019(self):
<         max_tyotulovahennys=1630/self.kk_jakaja
<         ttulorajat=np.array([2500,33000,127000])/self.kk_jakaja
<         ttulopros=np.array([0.120,0.0172,0])
<         return max_tyotulovahennys,ttulorajat,ttulopros
< 
<     def tyotulovahennys2020(self):
<         max_tyotulovahennys=1770/self.kk_jakaja
<         ttulorajat=np.array([2500,33000,127000])/self.kk_jakaja # 127000??
<         ttulopros=np.array([0.125,0.0184,0])
<         return max_tyotulovahennys,ttulorajat,ttulopros
< 
<     def tyotulovahennys2021(self):
<         max_tyotulovahennys=1840/self.kk_jakaja
<         ttulorajat=np.array([2500,33000,127000])/self.kk_jakaja # 127000??
<         ttulopros=np.array([0.127,0.0189,0])
<         return max_tyotulovahennys,ttulorajat,ttulopros
---
>     def laske_perustulo_vihreat(self):
>         return 600
433,498c157,158
<     def ansiotulovahennys2018(self):
<         rajat=np.array([2500,7230,14000])/self.kk_jakaja
<         maxvahennys=3570/self.kk_jakaja
<         ansvah=np.array([0.51,0.28,0.045])
<         return rajat,maxvahennys,ansvah
<         
<     def ansiotulovahennys2019(self):
<         rajat=np.array([2500,7230,14000])/self.kk_jakaja
<         maxvahennys=3570/self.kk_jakaja
<         ansvah=np.array([0.51,0.28,0.045])
<         return rajat,maxvahennys,ansvah
<         
<     def ansiotulovahennys2020(self):
<         rajat=np.array([2500,7230,14000])/self.kk_jakaja
<         maxvahennys=3570/self.kk_jakaja
<         ansvah=np.array([0.51,0.28,0.045])
<         return rajat,maxvahennys,ansvah
<         
<     def ansiotulovahennys2021(self):
<         rajat=np.array([2500,7230,14000])/self.kk_jakaja
<         maxvahennys=3570/self.kk_jakaja
<         ansvah=np.array([0.51,0.28,0.045])
<         return rajat,maxvahennys,ansvah
<         
<     def veroparam2018(self):
<         self.kunnallisvero_pros=max(0,max(0,0.1984+self.additional_kunnallisvero)) # Viitamäen raportista 19,84; verotuloilla painotettu k.a. 19,86
<         self.tyottomyysvakuutusmaksu=0.0190 #
<         self.tyontekijan_maksu=max(0,max(0,0.0635+self.additional_tyel_premium)) # PTEL
<         self.tyontekijan_maksu_52=max(0,max(0,0.0785+self.additional_tyel_premium)) # PTEL
<         self.koko_tyel_maksu=max(0,max(0,0.2440+self.additional_tyel_premium)) # PTEL 
<         self.tyonantajan_sivukulut=max(0,0.6*0.0065+0.4*0.205+0.0007+0.1695+0.0134+0.01) # työttömyysvakuutusmaksu, ryhmähv, tyel, sv, työtapaturma
<     
<         self.sairaanhoitomaksu=0.0
<         self.sairaanhoitomaksu_etuus=0.0147 # muut
<         
<         self.paivarahamaksu_pros=0.0153 # palkka
<         self.paivarahamaksu_raja=14020/self.kk_jakaja    
<         
<         self.elakemaksu_alaraja=58.27
<         self.tulonhankkimisvahennys=750/self.kk_jakaja
<         
<     def veroparam2019(self):
<         self.kunnallisvero_pros=max(0,0.1988+self.additional_kunnallisvero) # Viitamäen raportista
<         self.tyottomyysvakuutusmaksu=0.0125 #
<         self.tyontekijan_maksu=max(0,0.0715+self.additional_tyel_premium) # PTEL
<         self.tyontekijan_maksu_52=max(0,0.0865+self.additional_tyel_premium) # PTEL
<         self.koko_tyel_maksu=max(0,0.2440+self.additional_tyel_premium) # PTEL
<     
<         self.sairaanhoitomaksu=0.0
<         self.sairaanhoitomaksu_etuus=0.0161 # muut
<         
<         self.paivarahamaksu_pros=0.0118 # palkka
<         self.paivarahamaksu_raja=14282/self.kk_jakaja    
<         
<         self.elakemaksu_alaraja=60.57
<         self.tulonhankkimisvahennys=750/self.kk_jakaja
<         
<     def veroparam2020(self):
<         self.kunnallisvero_pros=max(0,0.1997+self.additional_kunnallisvero) # Viitamäen raportista
<         self.tyottomyysvakuutusmaksu=0.0125 #
<         self.tyontekijan_maksu=max(0,0.0715+self.additional_tyel_premium) # PTEL
<         self.tyontekijan_maksu_52=max(0,0.0865+self.additional_tyel_premium) # PTEL
<         self.koko_tyel_maksu=max(0,0.2440+self.additional_tyel_premium) # PTEL
<     
<         self.sairaanhoitomaksu=0.0068
<         self.sairaanhoitomaksu_etuus=0.0161 # muut
---
>     def laske_perustulo_asetettava(self):
>         return self.perustulo_asetettava
500,504c160,161
<         self.paivarahamaksu_pros=0.0118 # palkka
<         self.paivarahamaksu_raja=14574/self.kk_jakaja    
<         
<         self.elakemaksu_alaraja=60.57
<         self.tulonhankkimisvahennys=750/self.kk_jakaja
---
>     def laske_perustulo_696(self):
>         return 696.6
506,511c163,164
<     def veroparam2021(self):
<         self.kunnallisvero_pros=max(0,0.2002+self.additional_kunnallisvero) # Viitamäen raportista
<         self.tyottomyysvakuutusmaksu=0.0140 #
<         self.tyontekijan_maksu=max(0,0.0715+self.additional_tyel_premium) # PTEL
<         self.tyontekijan_maksu_52=max(0,0.0865+self.additional_tyel_premium) # PTEL
<         self.koko_tyel_maksu=max(0,0.2440+self.additional_tyel_premium) # PTEL
---
>     def laske_perustulo_vasemmistoliitto(self):
>         return 800.0
513,514c166,167
<         self.sairaanhoitomaksu=0.0068
<         self.sairaanhoitomaksu_etuus=0.0165 # muut
---
>     def laske_perustulo_tonni(self):
>         return 1000.0
516,520c169,170
<         self.paivarahamaksu_pros=0.0136 # palkka
<         self.paivarahamaksu_raja=14766/self.kk_jakaja    
<         
<         self.elakemaksu_alaraja=61.37
<         self.tulonhankkimisvahennys=750/self.kk_jakaja
---
>     def laske_perustulo_puolitoista(self):
>         return 1500.0
522,593d171
<     def laske_ylevero2018(self,palkkatulot,elaketulot):
<         yleveropros=0.025
<         min_ylevero=0/self.kk_jakaja
<         max_ylevero=163/self.kk_jakaja
<         ylevero_alaraja=14750/self.kk_jakaja
<     
<         ylevero=min(max_ylevero,yleveropros*max(0,elaketulot+palkkatulot-ylevero_alaraja))
<     
<         if ylevero<min_ylevero:
<             ylevero=0
<             
<         return ylevero    
< 
<     def laske_ylevero2019(self,palkkatulot,elaketulot):
<         yleveropros=0.025
<         min_ylevero=0/self.kk_jakaja
<         max_ylevero=163/self.kk_jakaja
<         ylevero_alaraja=14750/self.kk_jakaja
<     
<         ylevero=min(max_ylevero,yleveropros*max(0,elaketulot+palkkatulot-ylevero_alaraja))
<     
<         if ylevero<min_ylevero:
<             ylevero=0
<             
<         return ylevero    
< 
<     def laske_ylevero2020(self,palkkatulot,elaketulot):
<         yleveropros=0.025
<         min_ylevero=0/self.kk_jakaja
<         max_ylevero=163/self.kk_jakaja
<         ylevero_alaraja=14000/self.kk_jakaja
<     
<         ylevero=min(max_ylevero,yleveropros*max(0,elaketulot+palkkatulot-ylevero_alaraja))
<     
<         if ylevero<min_ylevero:
<             ylevero=0
<             
<         return ylevero    
< 
<     def laske_ylevero2021(self,palkkatulot,elaketulot):
<         yleveropros=0.025
<         min_ylevero=0/self.kk_jakaja
<         max_ylevero=163/self.kk_jakaja
<         ylevero_alaraja=14000/self.kk_jakaja
<     
<         ylevero=min(max_ylevero,yleveropros*max(0,elaketulot+palkkatulot-ylevero_alaraja))
<     
<         if ylevero<min_ylevero:
<             ylevero=0
<             
<         return ylevero    
< 
<     def perusvahennys2018(self):
<         perusvahennys_pros=0.18
<         max_perusvahennys=3020/self.kk_jakaja
<         return perusvahennys_pros,max_perusvahennys
<     
<     def perusvahennys2019(self):
<         perusvahennys_pros=0.18
<         max_perusvahennys=3305/self.kk_jakaja
<         return perusvahennys_pros,max_perusvahennys
<     
<     def perusvahennys2020(self):
<         perusvahennys_pros=0.18
<         max_perusvahennys=3540/self.kk_jakaja
<         return perusvahennys_pros,max_perusvahennys
<     
<     def perusvahennys2021(self):
<         perusvahennys_pros=0.18
<         max_perusvahennys=3630/self.kk_jakaja
<         return perusvahennys_pros,max_perusvahennys
<     
598d175
<         self.kk_jakaja=12
635,640c212,213
<         if p['ika']<65:
<             tyotvakmaksu=palkkatulot*self.tyottomyysvakuutusmaksu
<         else:
<             tyotvakmaksu=0
<         
<         if palkkatulot>self.paivarahamaksu_raja and p['ika']<68:
---
>         tyotvakmaksu=palkkatulot*self.tyottomyysvakuutusmaksu
>         if palkkatulot>self.paivarahamaksu_raja:
695c268
<         
---
>     
706,707d278
<         #print('palkka {} valtionveroperuste {} valtionvero {} ptel {} tyotulovahennys {} sairausvakuutus {}'.format(palkkatulot,valtionveroperuste,valtionvero,ptel,tyotulovahennys,sairausvakuutus))
< 
736,737d306
<         
<         # korotettu maksuperuste puuttuu? =max(0,palkkatulot-peritty_sairaanhoitomaksu)*korotus
740d308
<         # etuuksista peritty sairaanhoitomaksu puuttuu
763,764d330
<         
<         #print(peritytverot,valtionvero,kunnallisvero)
770,810c336,375
<     def kotihoidontuki2018(self,lapsia,allekolmev,alle_kouluikaisia):
<         if lapsia<1:
<             arvo=0
<         else:
<             tuki_alle_3v=341.27 # e/kk
<             seuraavat_alle_3v=102.17 # e/kk
<             yli_3v=65.65 #e_kk
<             if allekolmev>0:
<                 kerroin1=1
<                 if allekolmev>1:
<                     kerroin2=allekolmev-1
<                 else:
<                     kerroin2=0
<             else:
<                 kerroin1=0
<                 kerroin2=0
<             
<             arvo=alle_kouluikaisia*yli_3v+tuki_alle_3v*kerroin1+kerroin2*seuraavat_alle_3v        
<         
<         return arvo
<     
<     def kotihoidontuki2019(self,lapsia,allekolmev,alle_kouluikaisia):
<         if lapsia<1:
<             arvo=0
<         else:
<             tuki_alle_3v=338.34 # e/kk
<             seuraavat_alle_3v=101.29 # e/kk
<             yli_3v=65.09 #e_kk
<             if allekolmev>0:
<                 kerroin1=1
<                 if allekolmev>1:
<                     kerroin2=allekolmev-1
<                 else:
<                     kerroin2=0
<             else:
<                 kerroin1=0
<                 kerroin2=0
<             
<             arvo=alle_kouluikaisia*yli_3v+tuki_alle_3v*kerroin1+kerroin2*seuraavat_alle_3v        
<         
<         return arvo
---
>     def tyotulovahennys2018(self):
>         max_tyotulovahennys=self.max_tyotulovahennys/self.kk_jakaja
>         ttulorajat=np.array([2500,33000,127000])/self.kk_jakaja
>         ttulopros=np.array([0.120,0.0165,0])
>         return max_tyotulovahennys,ttulorajat,ttulopros
> 
>     def tyotulovahennys2019(self):
>         max_tyotulovahennys=self.max_tyotulovahennys/self.kk_jakaja
>         ttulorajat=np.array([2500,33000,127000])/self.kk_jakaja
>         ttulopros=np.array([0.120,0.0172,0])
>         return max_tyotulovahennys,ttulorajat,ttulopros
> 
>     def tyotulovahennys2020(self):
>         max_tyotulovahennys=self.max_tyotulovahennys/self.kk_jakaja
>         ttulorajat=np.array([2500,33000,127000])/self.kk_jakaja # 127000??
>         ttulopros=np.array([0.122,0.0184,0])
>         return max_tyotulovahennys,ttulorajat,ttulopros
> 
>     def ansiotulovahennys2018(self):
>         rajat=np.array([2500,7230,14000])/self.kk_jakaja
>         maxvahennys=self.max_ansiotulovahennys/self.kk_jakaja
>         ansvah=np.array([0.51,0.28,0.045])
>         return rajat,maxvahennys,ansvah
>         
>     def ansiotulovahennys2019(self):
>         rajat=np.array([2500,7230,14000])/self.kk_jakaja
>         maxvahennys=self.max_ansiotulovahennys/self.kk_jakaja
>         ansvah=np.array([0.51,0.28,0.045])
>         return rajat,maxvahennys,ansvah
>         
>     def ansiotulovahennys2020(self):
>         rajat=np.array([2500,7230,14000])/self.kk_jakaja
>         maxvahennys=self.max_ansiotulovahennys/self.kk_jakaja
>         ansvah=np.array([0.51,0.28,0.045])
>         return rajat,maxvahennys,ansvah
> 
>     def perusvahennys2018(self):
>         perusvahennys_pros=0.18
>         max_perusvahennys=self.max_perusvahennys/self.kk_jakaja
>         return perusvahennys_pros,max_perusvahennys
812,829c377,430
<     def kotihoidontuki2020(self,lapsia,allekolmev,alle_kouluikaisia):
<         if lapsia<1:
<             arvo=0
<         else:
<             tuki_alle_3v=341.69 # e/kk
<             seuraavat_alle_3v=102.30 # e/kk
<             yli_3v=65.73 #e_kk
<             if allekolmev>0:
<                 kerroin1=1
<                 if allekolmev>1:
<                     kerroin2=allekolmev-1
<                 else:
<                     kerroin2=0
<             else:
<                 kerroin1=0
<                 kerroin2=0
<             
<             arvo=alle_kouluikaisia*yli_3v+tuki_alle_3v*kerroin1+kerroin2*seuraavat_alle_3v        
---
>     def perusvahennys2019(self):
>         perusvahennys_pros=0.18
>         max_perusvahennys=self.max_perusvahennys/self.kk_jakaja
>         return perusvahennys_pros,max_perusvahennys
>     
>     def perusvahennys2020(self):
>         perusvahennys_pros=0.18
>         max_perusvahennys=self.max_perusvahennys/self.kk_jakaja
>         return perusvahennys_pros,max_perusvahennys
> 
>     def veroparam2018_perustulokokeilu(self):
>         self.kunnallisvero_pros=0.1984 # Viitamäen raportista            
>         self.tyottomyysvakuutusmaksu=0.0190 #
>         self.tyontekijan_maksu=0.0635 # PTEL
>         self.tyontekijan_maksu_52=0.0785+self.additional_tyel_premium # PTEL
>         self.koko_tyel_maksu=0.2440+self.additional_tyel_premium # PTEL 
>     
>         # sairausvakuutus ??
>         self.sairaanhoitomaksu=0.0
>         self.sairaanhoitomaksu_etuus=0.0147 # muut
>         
>         self.paivarahamaksu_pros=0.0153 # palkka
>         self.paivarahamaksu_raja=14020/self.kk_jakaja    
>         
>         self.elakemaksu_alaraja=58.27
>         self.tulonhankkimisvahennys=750/self.kk_jakaja
> 
>     def veroparam2018_perustulo(self):
>         self.kunnallisvero_pros=0.0 # Viitamäen raportista
>         self.tyottomyysvakuutusmaksu=0.0190 #
>         self.tyontekijan_maksu=0.0635 # PTEL
>         self.tyontekijan_maksu_52=0.0785
>         self.koko_tyel_maksu=0.2440
>     
>         # sairausvakuutus ??
>         self.sairaanhoitomaksu=0.0
>         self.sairaanhoitomaksu_etuus=0.0147 # muut
>         
>         self.paivarahamaksu_pros=0.0153 # palkka
>         self.paivarahamaksu_raja=14020/self.kk_jakaja    
>         
>         self.elakemaksu_alaraja=58.27
>         self.tulonhankkimisvahennys=750/self.kk_jakaja
>         
>     def veroparam2019(self):
>         self.kunnallisvero_pros=0.0 # Viitamäen raportista
>         self.tyottomyysvakuutusmaksu=0.0125 #
>         self.tyontekijan_maksu=0.0715 # PTEL
>         self.tyontekijan_maksu_52=0.0865 # PTEL
>         self.koko_tyel_maksu=0.2440
>     
>         # sairausvakuutus ??
>         self.sairaanhoitomaksu=0.0
>         self.sairaanhoitomaksu_etuus=0.0161 # muut
831c432,443
<         return arvo
---
>         self.paivarahamaksu_pros=0.0118 # palkka
>         self.paivarahamaksu_raja=14282/self.kk_jakaja    
>         
>         self.elakemaksu_alaraja=60.57
>         self.tulonhankkimisvahennys=750/self.kk_jakaja
>         
>     def veroparam2020(self):
>         self.kunnallisvero_pros=0.0 # Viitamäen raportista
>         self.tyottomyysvakuutusmaksu=0.0125 #
>         self.tyontekijan_maksu=0.0715 # PTEL
>         self.tyontekijan_maksu_52=0.0865 # PTEL
>         self.koko_tyel_maksu=0.2440
833,836c445,461
<     def valtionvero_asteikko_2018(self):
<         rajat=np.array([17200,25700,42400,74200])/self.kk_jakaja
<         pros=np.maximum(0,np.array([0.06,0.1725,0.2125,0.3125+self.additional_income_tax_high])+self.additional_income_tax)
<         pros=np.maximum(0,np.minimum(pros,0.3125+self.additional_income_tax_high+self.additional_income_tax))
---
>         # sairausvakuutus ??
>         self.sairaanhoitomaksu=0.0068
>         self.sairaanhoitomaksu_etuus=0.0161 # muut
>         
>         self.paivarahamaksu_pros=0.0118 # palkka
>         self.paivarahamaksu_raja=14574/self.kk_jakaja    
>         
>         self.elakemaksu_alaraja=60.57
>         self.tulonhankkimisvahennys=750/self.kk_jakaja
>         
>     def kotihoidontuki(self,lapsia,allekolmev,alle_kouluikaisia):
>         # korvataan perustulolla
>         return self.perustulo()
>     
>     def valtionvero_asteikko_perustulo_Kela(self):
>         rajat=np.array([6720,50000,9999999,9999999])/self.kk_jakaja
>         pros=np.array([0.43,0.43,0.43,0.43]) # 560 e/kk
839,842c464,466
<     def valtionvero_asteikko_2019(self):
<         rajat=np.array([17600,26400,43500,76100])/self.kk_jakaja
<         pros=np.maximum(0,np.array([0.06,0.1725,0.2125,0.3125+self.additional_income_tax_high])+self.additional_income_tax)
<         pros=np.maximum(0,np.minimum(pros,0.3125+self.additional_income_tax_high+self.additional_income_tax))
---
>     def valtionvero_asteikko_perustulo_BI(self):
>         rajat=np.array([12*600,50000,9999999,9999999])/self.kk_jakaja
>         pros=np.array([0.40,0.40,0.40,0.40]) # 500 e/kk
843a468,472
>     
>     def valtionvero_asteikko_perustulo_vihreat(self):
>         rajat=np.array([12*600,50000,9999999,9999999])/self.kk_jakaja
>         #pros=np.array([0.4575,0.4575,0.4575,0.4575]) # 600 e/kk Vai 44,75 %??
>         pros=np.array([0.4825,0.4825,0.4825,0.4825]) # 600 e/kk Vai 44,75 %??
845,848d473
<     def valtionvero_asteikko_2020(self):
<         rajat=np.array([18100,27200,44800,78500])/self.kk_jakaja
<         pros=np.maximum(0,np.array([0.06,0.1725,0.2125,0.3125+self.additional_income_tax_high])+self.additional_income_tax)
<         pros=np.maximum(0,np.minimum(pros,0.3125+self.additional_income_tax_high+self.additional_income_tax))
850,854c475,478
< 
<     def valtionvero_asteikko_2021(self):
<         rajat=np.array([18600,27900,45900,80500])/self.kk_jakaja
<         pros=np.maximum(0,np.array([0.06,0.1725,0.2125,0.3125+self.additional_income_tax_high])+self.additional_income_tax)
<         pros=np.maximum(0,np.minimum(pros,0.3125+self.additional_income_tax_high+self.additional_income_tax))
---
>     
>     def valtionvero_asteikko_perustulo_asetettava(self):
>         rajat=np.array([12*600,50000,9999999,9999999])/self.kk_jakaja
>         pros=np.array([self.valtionverotaso,self.valtionverotaso,self.valtionverotaso,self.valtionverotaso]) # 600 e/kk Vai 44,75 %??
856c480,495
< 
---
>     
>     def valtionvero_asteikko_perustulo_vasemmistoliitto(self):
>         rajat=np.array([12*800,50000,9999999,9999999])/self.kk_jakaja
>         pros=np.array([0.5475,0.5475,0.5475,0.5475]) # 800 e/kk # tasavero 52,5 % vastaa 750e ja 48% 650e
>         return rajat,pros
>     
>     def valtionvero_asteikko_perustulo_tonni(self):
>         rajat=np.array([12*1000,50000,9999999,9999999])/self.kk_jakaja
>         pros=np.array([0.64,0.64,0.64,0.64]) # 800 e/kk # tasavero 52,5 %
>         return rajat,pros
>     
>     def valtionvero_asteikko_perustulo_1500(self):
>         rajat=np.array([12*1500,50000,9999999,9999999])/self.kk_jakaja
>         pros=np.array([0.79,0.79,0.79,0.79]) # 800 e/kk # tasavero 52,5 %
>         return rajat,pros
>     
858c497
<         rajat,pros=self.valtionvero_asteikko()
---
>         rajat,pros=self.valtionvero_asteikko_perustulo()
873c512
<     def tyottomyysturva_suojaosa(self,suojaosamalli,p=None):
---
>     def tyottomyysturva_suojaosa(self,suojaosamalli,p):
882,884c521
<         elif suojaosamalli==0:
<             suojaosa=p['tyottomyysturva_suojaosa_taso']
<         else: # perusmallis
---
>         else:
888,968c525
<         
<     def lapsilisa2018(self,yksinhuoltajakorotus=False):
<         lapsilisat=np.array([95.75,105.80,135.01,154.64,174.27])
<         if yksinhuoltajakorotus:
<             # yksinhuoltajakorotus 53,30 e/lapsi
<             lapsilisat += 53.3
< 
<         return lapsilisat
<     
<     def lapsilisa2019(self,yksinhuoltajakorotus=False):
<         lapsilisat=np.array([94.88,104.84,133.79,153.24,172.69])
<         if yksinhuoltajakorotus:
<             # yksinhuoltajakorotus 53,30 e/lapsi
<             lapsilisat += 53.3
<             
<         return lapsilisat
<     
<     def lapsilisa2020(self,yksinhuoltajakorotus=False):
<         lapsilisat=np.array([94.88,104.84,133.79,163.24,182.69])
<         if yksinhuoltajakorotus:
<             # yksinhuoltajakorotus 53,30 e/lapsi
<             lapsilisat += 63.3
<             
<         return lapsilisat
<     
<     def lapsilisa2021(self,yksinhuoltajakorotus=False):
<         lapsilisat=np.array([94.88,104.84,133.79,163.24,182.69])
<         if yksinhuoltajakorotus:
<             # yksinhuoltajakorotus 53,30 e/lapsi
<             lapsilisat += 63.3
<             
<         return lapsilisat
<     
<     def laske_lapsilisa(self,lapsia):
<         lapsilisat=self.lapsilisa()
<     
<         if lapsia==0:
<             tuki=0
<         elif lapsia==1:
<             tuki=lapsilisat[0]
<         elif lapsia==2:
<             tuki=sum(lapsilisat[0:1])
<         elif lapsia==3:
<             tuki=sum(lapsilisat[0:2])
<         elif lapsia==4:
<             tuki=sum(lapsilisat[0:3])
<         elif lapsia==5:
<             tuki=sum(lapsilisat[0:4])
<         elif lapsia>5:
<             tuki=sum(lapsilisat[0:4])+(lapsia-5)*lapsilisat[4]
<         else:
<             print('error(1))')
<         
<         return tuki
<         
<     def opintoraha(self,palkka,p):
<         if p['lapsia']>0:
<             tuki=350.28 # +650*0.4 = opintolainahyvitys mukana?
<         else:
<             tuki=250.28 #+650*0.4 # opintolainahyvitys mukana
<             
<         if palkka>667: #+222/12: # oletetaan että täysiaikainen opiskelija
<             tuki=0
<             
<         return tuki
<         
<     def check_p(self,p):
<         if 'toimeentulotuki_vahennys' not in p:
<             p['toimeentulotuki_vahennys']=0
<         if 'opiskelija' not in p:
<             p['opiskelija']=0
<         if 'elakkeella' not in p:
<             p['elakkeella']=0
<         if 'tyoelake' not in p:
<             p['tyoelake']=0
<         if 'sairauspaivarahalla' not in p:
<             p['sairauspaivarahalla']=0
<         if 'disabled' not in p:
<             p['disabled']=0
<         return p
< 
---
>                 
971,972c528,529
<         q['perustulo']=0
<         q['puoliso_perustulo']=0
---
>         p=self.check_p(p)
>         q['sairauspaivaraha']=0
975d531
<         p=self.check_p(p)
978c534,536
<             q['isyyspaivaraha'],q['aitiyspaivaraha'],q['kotihoidontuki'],q['sairauspaivaraha']=(0,0,0,0)
---
>             q['perustulo']=0
>             q['opintotuki']=0
>             q['isyyspaivaraha'],q['aitiyspaivaraha'],q['kotihoidontuki']=(0,0,0)
981a540
>             q['puoliso_perustulo']=0 
991d549
<             q['opintotuki']=0
993a552
>             q['kokoelake']=0
995d553
<             q['kokoelake']=p['tyoelake']
999c557
<             q['isyyspaivaraha'],q['aitiyspaivaraha'],q['kotihoidontuki'],q['sairauspaivaraha']=(0,0,0,0)
---
>             q['isyyspaivaraha'],q['aitiyspaivaraha'],q['kotihoidontuki']=(0,0,0)
1001,1006c559,571
<             if p['aitiysvapaalla']>0:
<                 q['aitiyspaivaraha']=self.aitiysraha(p['vakiintunutpalkka'],p['aitiysvapaa_kesto'])
<             elif p['isyysvapaalla']>0:
<                 q['isyyspaivaraha']=self.isyysraha(p['vakiintunutpalkka'])
<             elif p['kotihoidontuella']>0:
<                 q['kotihoidontuki']=self.kotihoidontuki(p['lapsia_kotihoidontuella'],p['lapsia_alle_3v'],p['lapsia_alle_kouluikaisia'])
---
>             q['perustulo']=0 # huomioitu etuuksien koossa
>             q['puoliso_perustulo']=0 
>             if self.osittainen_perustulo:
>                 if p['aitiysvapaalla']>0:
>                     q['aitiyspaivaraha']=self.aitiysraha(p['vakiintunutpalkka'],p['aitiysvapaa_kesto'])
>                 elif p['isyysvapaalla']>0:
>                     q['isyyspaivaraha']=self.isyysraha(p['vakiintunutpalkka'])
>                 elif p['kotihoidontuella']>0:
>                     q['kotihoidontuki']=0 #self.kotihoidontuki(p['lapsia_kotihoidontuella'],p['lapsia_alle_3v'],p['alle_kouluikaisia'])
>                     q['perustulo']=self.perustulo()
>                 else:
>                     q['perustulo']=self.perustulo() # ei opiskelijoille?
>                     q['opintotuki']=0 #self.opintoraha(0,p)
1008c573,574
<                 q['opintotuki']=self.opintoraha(0,p)
---
>                 q['perustulo']=self.perustulo() # ei opiskelijoille?
>                 q['opintotuki']=0 #self.opintoraha(0,p)
1009a576
>             q['kokoelake']=0
1012d578
<             q['kokoelake']=p['tyoelake']
1014a581,582
>             q['perustulo']=0 # huomioitu etuuksien koossa
>             q['puoliso_perustulo']=0 
1016,1027c584,603
<             q['isyyspaivaraha'],q['aitiyspaivaraha'],q['kotihoidontuki'],q['sairauspaivaraha']=(0,0,0,0)
<             if p['aitiysvapaalla']>0:
<                 q['aitiyspaivaraha']=self.aitiysraha(p['vakiintunutpalkka'],p['aitiysvapaa_kesto'])
<             elif p['isyysvapaalla']>0:
<                 q['isyyspaivaraha']=self.isyysraha(p['vakiintunutpalkka'])
<             elif p['sairauspaivarahalla']>0:
<                 q['sairauspaivaraha']=self.sairauspaivaraha(p['vakiintunutpalkka'])
<             elif p['kotihoidontuella']>0:
<                 q['kotihoidontuki']=self.kotihoidontuki(p['lapsia_kotihoidontuella'],p['lapsia_alle_3v'],p['lapsia_alle_kouluikaisia'])
<             elif p['tyoton']>0:
<                 if 'omavastuukerroin' in p:
<                     omavastuukerroin=p['omavastuukerroin']
---
>             q['isyyspaivaraha'],q['aitiyspaivaraha'],q['kotihoidontuki']=(0,0,0)
>             if self.osittainen_perustulo:
>                 if p['aitiysvapaalla']>0:
>                     q['aitiyspaivaraha']=self.aitiysraha(p['vakiintunutpalkka'],p['aitiysvapaa_kesto'])
>                 elif p['isyysvapaalla']>0:
>                     q['isyyspaivaraha']=self.isyysraha(p['vakiintunutpalkka'])
>                 elif p['kotihoidontuella']>0:
>                     q['kotihoidontuki']=0 #self.kotihoidontuki(p['lapsia_kotihoidontuella'],p['lapsia_alle_3v'],p['alle_kouluikaisia'])
>                     q['perustulo']=self.perustulo()
>                 elif p['tyoton']>0:
>                     if 'omavastuukerroin' in p:
>                         omavastuukerroin=p['omavastuukerroin']
>                     else:
>                         omavastuukerroin=1.0
>                     q['ansiopvraha'],q['puhdasansiopvraha'],q['peruspvraha']=\
>                         self.ansiopaivaraha(p['tyoton'],p['vakiintunutpalkka'],p['lapsia'],p['t'],p['saa_ansiopaivarahaa'],
>                                             p['tyottomyyden_kesto'],p,omavastuukerroin=omavastuukerroin)
>                     q['peruspvraha']=0
>                     q['ansiopvraha']=max(0,q['ansiopvraha']-self.perustulo())
>                     q['perustulo']=self.perustulo()
1029,1031c605,607
<                     omavastuukerroin=1.0
<                 q['ansiopvraha'],q['puhdasansiopvraha'],q['peruspvraha']=self.ansiopaivaraha(p['tyoton'],p['vakiintunutpalkka'],p['lapsia'],p['t'],p['saa_ansiopaivarahaa'],p['tyottomyyden_kesto'],p,omavastuukerroin=omavastuukerroin)
<                 
---
>                     q['perustulo']=self.perustulo()
>             else:
>                 q['perustulo']=self.perustulo() # ei opiskelijoille?
1050,1055c626,636
<                 if p['puoliso_aitiysvapaalla']>0:
<                     q['puoliso_aitiyspaivaraha']=self.aitiysraha(p['puoliso_vakiintunutpalkka'],p['puoliso_aitiysvapaa_kesto'])
<                 elif p['puoliso_isyysvapaalla']>0:
<                     q['puoliso_isyyspaivaraha']=self.isyysraha(p['puoliso_vakiintunutpalkka'])
<                 elif p['puoliso_kotihoidontuella']>0:
<                     q['puoliso_kotihoidontuki']=self.kotihoidontuki(p['lapsia_kotihoidontuella'],p['lapsia_alle_3v'],p['lapsia_alle_kouluikaisia'])
---
>                 if self.osittainen_perustulo:
>                     if p['puoliso_aitiysvapaalla']>0:
>                         q['puoliso_aitiyspaivaraha']=self.aitiysraha(p['puoliso_vakiintunutpalkka'],p['puoliso_aitiysvapaa_kesto'])
>                     elif p['puoliso_isyysvapaalla']>0:
>                         q['puoliso_isyyspaivaraha']=self.isyysraha(p['puoliso_vakiintunutpalkka'])
>                     elif p['puoliso_kotihoidontuella']>0:
>                         q['puoliso_kotihoidontuki']=0
>                         q['puoliso_perustulo']=self.perustulo()
>                     else:
>                         q['puoliso_opintotuki']=0
>                         q['puoliso_perustulo']=self.perustulo()
1057c638,639
<                     q['puoliso_opintotuki']=self.opintoraha(0,p)
---
>                     q['puoliso_opintotuki']=0
>                     q['puoliso_perustulo']=self.perustulo()
1066,1076c648,664
<                 if p['puoliso_aitiysvapaalla']>0:
<                     q['puoliso_aitiyspaivaraha']=self.aitiysraha(p['puoliso_vakiintunutpalkka'],p['puoliso_aitiysvapaa_kesto'])
<                 elif p['puoliso_isyysvapaalla']>0:
<                     q['puoliso_isyyspaivaraha']=self.isyysraha(p['puoliso_vakiintunutpalkka'])
<                 elif p['puoliso_sairauspaivarahalla']>0:
<                     q['puoliso_sairauspaivaraha']=self.sairauspaivaraha(p['puoliso_vakiintunutpalkka'])
<                 elif p['puoliso_kotihoidontuella']>0:
<                     q['puoliso_kotihoidontuki']=self.kotihoidontuki(p['puoliso_lapsia_kotihoidontuella'],p['puoliso_alle_3v'],p['puoliso_alle_kouluikaisia'])
<                 elif p['puoliso_tyoton']>0:
<                     q['puoliso_ansiopvraha'],q['puoliso_puhdasansiopvraha'],q['puoliso_peruspvraha']=self.ansiopaivaraha(p['puoliso_tyoton'],p['puoliso_vakiintunutpalkka'],p['lapsia'],p['puoliso_tulot'],p['puoliso_saa_ansiopaivarahaa'],p['puoliso_tyottomyyden_kesto'],p)
<             
---
>                 if self.osittainen_perustulo:
>                     if p['puoliso_aitiysvapaalla']>0:
>                         q['puoliso_aitiyspaivaraha']=self.aitiysraha(p['puoliso_vakiintunutpalkka'],p['puoliso_aitiysvapaa_kesto'])
>                     elif p['puoliso_isyysvapaalla']>0:
>                         q['puoliso_isyyspaivaraha']=self.isyysraha(p['puoliso_vakiintunutpalkka'])
>                     elif p['puoliso_sairauspaivarahalla']>0:
>                         q['puoliso_sairauspaivaraha']=self.sairauspaivaraha(p['puoliso_vakiintunutpalkka'])
>                     elif p['puoliso_kotihoidontuella']>0:
>                         q['puoliso_kotihoidontuki']=0
>                         q['puoliso_perustulo']=self.perustulo()
>                     elif p['puoliso_tyoton']>0:
>                         q['puoliso_ansiopvraha'],_,_=self.ansiopaivaraha(p['puoliso_tyoton'],p['puoliso_vakiintunutpalkka'],p['lapsia'],p['puoliso_tulot'],p['puoliso_saa_ansiopaivarahaa'],p['puoliso_tyottomyyden_kesto'],p)
>                         q['puoliso_ansiopvraha']=max(0,q['puoliso_ansiopvraha']-self.perustulo())
>                         q['puoliso_perustulo']=self.perustulo()
>                 else:
>                     q['puoliso_perustulo']=self.perustulo()
>                 
1080,1081c668,669
<             q['ptel'],q['sairausvakuutus'],q['tyotvakmaksu'],q['tyel_kokomaksu'],q['ylevero']=self.verotus(p['t'],
<                 q['ansiopvraha']+q['aitiyspaivaraha']+q['isyyspaivaraha']+q['kotihoidontuki']+q['sairauspaivaraha']+q['opintotuki'],
---
>             q['ptel'],q['sairausvakuutus'],q['tyotvakmaksu'],q['tyel_kokomaksu'],q['ylevero']=self.verotus(p['t'],\
>                 q['perustulo']+q['ansiopvraha']+q['aitiyspaivaraha']+q['isyyspaivaraha']+q['kotihoidontuki'],\
1082a671
>         #_,q['verot_ilman_etuuksia_pl_pt'],_,_,_,_,_,_,_,_,_,_,_=self.verotus(p['t'],q['perustulo'],0,p['lapsia'],p)
1083a673,680
>         _,q['verot_ilman_etuuksia_pl_pt'],valtionvero,kunnallisvero,kunnallisveronperuste,\
>                valtionveroperuste,ansiotulovahennys,perusvahennys,tyotulovahennys,\
>                tyotulovahennys_kunnallisveroon,ptel,sairausvakuutus,tyotvakmaksu,\
>                koko_tyelmaksu,ylevero=self.verotus(p['t'],q['perustulo'],0,p['lapsia'],p)
>         
>         #print('split',valtionvero,kunnallisvero,kunnallisveronperuste,\
>         #       valtionveroperuste,ansiotulovahennys,perusvahennys,tyotulovahennys,\
>         #       tyotulovahennys_kunnallisveroon,ptel,sairausvakuutus,tyotvakmaksu)
1087c684,685
<                 q['puoliso_tyotvakmaksu'],q['puoliso_tyel_kokomaksu'],q['puolison_ylevero']=self.verotus(p['puoliso_tulot'],q['puoliso_ansiopvraha'],0,0,p) # onko oikein että lapsia 0 tässä????
---
>                 q['puoliso_tyotvakmaksu'],_,_=self.verotus(p['puoliso_tulot'],q['puoliso_perustulo']+q['puoliso_ansiopvraha'],0,0,p) # onko oikein että lapsia 0 tässä????
>             _,q['puoliso_verot_ilman_etuuksia_pl_pt'],_,_,_,_,_,_,_,_,_,_,_,_,_=self.verotus(p['puoliso_tulot'],q['puoliso_perustulo'],0,0,p)
1090a689
>             q['puoliso_verot_ilman_etuuksia_pl_pt']=0
1098,1100c697,699
<         
<         if p['elakkeella']>0:
<             q['asumistuki']=self.elakkeensaajan_asumistuki(p['puoliso_tulot']+p['t'],q['kokoelake'],p['asumismenot_asumistuki'],p)
---
> 
>         if p['elakkeella']>0: # ei perustuloa
>             q['asumistuki']=self.elakkeensaajan_asumistuki(p['puoliso_tulot']+p['t'],q['kokoelake']+q['puoliso_ansiopvraha'],p['asumismenot_asumistuki'],p)
1102c701,702
<             q['asumistuki']=self.asumistuki(p['puoliso_tulot']+p['t'],q['ansiopvraha']+q['puoliso_ansiopvraha']+q['aitiyspaivaraha']+q['isyyspaivaraha']+q['kotihoidontuki']+q['sairauspaivaraha']+q['opintotuki'],p['asumismenot_asumistuki'],p)
---
>             q['asumistuki']=self.asumistuki(p['puoliso_tulot']+p['t'],q['ansiopvraha']+q['puoliso_ansiopvraha']+q['perustulo']+q['puoliso_perustulo'],p['asumismenot_asumistuki'],p)
>             #q['asumistuki']=self.asumistuki(p['puoliso_tulot']+p['t']+q['perustulo']+q['puoliso_perustulo'],q['ansiopvraha']+q['puoliso_ansiopvraha'],p['asumismenot_asumistuki'],p)
1105c705,706
<             q['pvhoito']=self.paivahoitomenot(p['lapsia_paivahoidossa'],p['puoliso_tulot']+p['t']+q['kokoelake']+q['elatustuki']+q['ansiopvraha']+q['puoliso_ansiopvraha']+q['sairauspaivaraha'],p)
---
>             q['pvhoito']=self.paivahoitomenot(p['lapsia_paivahoidossa'],p['puoliso_tulot']+p['t']+q['kokoelake']+q['elatustuki']
>                 +q['ansiopvraha']+q['puoliso_ansiopvraha']+q['perustulo']+q['puoliso_perustulo'],p)
1108a710
>             q['pvhoito_ilman_etuuksia_pl_pt']=self.paivahoitomenot(p['lapsia_paivahoidossa'],p['puoliso_tulot']+p['t']+q['elatustuki']+q['perustulo']+q['puoliso_perustulo'],p)
1113a716
>             q['pvhoito_ilman_etuuksia_pl_pt']=0
1115a719,721
>         q['perustulo_netto']=q['perustulo']-(q['verot_ilman_etuuksia_pl_pt']-q['verot_ilman_etuuksia'])
>         q['puoliso_perustulo_netto']=q['puoliso_perustulo']-(q['puoliso_verot_ilman_etuuksia_pl_pt']-q['puoliso_verot_ilman_etuuksia'])
>     
1117,1118d722
<         q['kokoelake_netto'],q['isyyspaivaraha_netto'],q['ansiopvraha_netto'],q['aitiyspaivaraha_netto'],q['sairauspaivaraha_netto'],\
<             q['puoliso_ansiopvraha_netto'],q['opintotuki_netto']=(0,0,0,0,0,0,0)
1121,1122c725,727
<         if p['opiskelija']>0:
<             q['opintotuki_netto']=q['opintotuki']-(q['verot']-q['verot_ilman_etuuksia'])
---
>             q['ansiopvraha_netto']=0
>             q['aitiyspaivaraha_netto'],q['kotihoidontuki_netto'],q['aitiyspaivaraha_netto']=(0,0,0)
>             q['puoliso_ansiopvraha_netto']=0
1124a730,731
>             q['kokoelake_netto'],q['ansiopvraha_netto'],q['kotihoidontuki_netto'],q['aitiyspaivaraha_netto']=(0,0,0,0)
>             q['puoliso_ansiopvraha_netto']=0
1126a734,735
>             q['kokoelake_netto'],q['aitiyspaivaraha_netto'],q['kotihoidontuki_netto'],q['ansiopvraha_netto']=(0,0,0,0)
>             q['puoliso_ansiopvraha_netto']=0
1129,1130c738,739
<         elif p['sairauspaivarahalla']>0:
<             q['sairauspaivaraha_netto']=q['sairauspaivaraha']-(q['verot']-q['verot_ilman_etuuksia']) 
---
>             q['kokoelake_netto'],q['isyyspaivaraha_netto'],q['ansiopvraha_netto'],q['aitiyspaivaraha_netto']=(0,0,0,0)
>             q['puoliso_ansiopvraha_netto']=0
1132,1134c741,748
<             q['puoliso_ansiopvraha_netto']=q['puoliso_ansiopvraha']-(q['puoliso_verot']-q['puoliso_verot_ilman_etuuksia'])
<             q['ansiopvraha_netto']=q['ansiopvraha']-(q['verot']-q['verot_ilman_etuuksia'])
<     
---
>             if (p['aikuisia']>1):
>                 q['puoliso_ansiopvraha_netto']=q['puoliso_ansiopvraha']-(q['puoliso_verot']-q['puoliso_verot_ilman_etuuksia_pl_pt'])
>             else:
>                 q['puoliso_ansiopvraha_netto']=0
>             
>             q['ansiopvraha_netto']=q['ansiopvraha']-(q['verot']-q['verot_ilman_etuuksia_pl_pt'])
>             q['kokoelake_netto'],q['aitiyspaivaraha_netto'],q['kotihoidontuki_netto'],q['aitiyspaivaraha_netto']=(0,0,0,0)
> 
1141,1142c755,756
<             q['ansiopvraha_nettonetto']=q['ansiopvraha_netto']-suhde*(q['pvhoito']-q['pvhoito_ilman_etuuksia'])
<             q['puoliso_ansiopvraha_nettonetto']=q['puoliso_ansiopvraha_netto']-(1-suhde)*(q['pvhoito']-q['pvhoito_ilman_etuuksia'])
---
>             q['ansiopvraha_nettonetto']=q['ansiopvraha_netto']-suhde*(q['pvhoito']-q['pvhoito_ilman_etuuksia_pl_pt'])
>             q['puoliso_ansiopvraha_nettonetto']=q['puoliso_ansiopvraha_netto']-(1-suhde)*(q['pvhoito']-q['pvhoito_ilman_etuuksia_pl_pt'])
1145a760,767
>         
>         if q['perustulo_netto']+q['puoliso_perustulo_netto']>0:
>             suhde=max(0,q['puoliso_perustulo_netto']/(q['puoliso_perustulo_netto']+q['perustulo_netto']))
>             q['puoliso_perustulo_nettonetto']=q['puoliso_perustulo_netto']-suhde*(q['pvhoito_ilman_etuuksia_pl_pt']-q['pvhoito_ilman_etuuksia'])
>             q['perustulo_nettonetto']=q['perustulo_netto']-(1-suhde)*(q['pvhoito_ilman_etuuksia_pl_pt']-q['pvhoito_ilman_etuuksia'])
>         else:
>             q['perustulo_nettonetto']=0
>             q['puoliso_perustulo_nettonetto']=0
1147c769
<         if p['opiskelija']>0:
---
>         if (not self.osittainen_perustulo) or self.perustulo_korvaa_toimeentulotuen: # toimeentulotuki korvattu perustulolla
1149,1153c771,778
<         else:
<             q['toimtuki']=self.toimeentulotuki(p['t'],q['verot_ilman_etuuksia'],p['puoliso_tulot'],q['puoliso_verot_ilman_etuuksia'],\
<                 q['elatustuki']+q['opintotuki']+q['ansiopvraha_netto']+q['puoliso_ansiopvraha_netto']+q['asumistuki']+q['sairauspaivaraha']+q['lapsilisa']\
<                 +q['kokoelake_netto']+q['aitiyspaivaraha']+q['isyyspaivaraha']+q['kotihoidontuki'],\
<                 0,p['asumismenot_toimeentulo'],q['pvhoito'],p)
---
>         else: # ei korvattu
>             if p['opiskelija']>0:
>                 q['toimtuki']=0
>             else:
>                 q['toimtuki']=self.toimeentulotuki(p['t'],q['verot_ilman_etuuksia'],p['puoliso_tulot'],q['puoliso_verot_ilman_etuuksia'],\
>                     q['elatustuki']+q['opintotuki']+q['ansiopvraha_netto']+q['puoliso_ansiopvraha_netto']+q['asumistuki']+q['lapsilisa']\
>                     +q['kokoelake_netto']+q['aitiyspaivaraha']+q['isyyspaivaraha']+q['kotihoidontuki']+q['perustulo_netto']+q['puoliso_perustulo_netto'],\
>                     0,p['asumismenot_toimeentulo'],q['pvhoito'],p)
1155,1158c780,785
<         #print(q['ansiopvraha']+q['perustulo'],q['ansiopvraha_netto'],-(q['pvhoito']-q['pvhoito_ilman_etuuksia']),-(q['verot']-q['verot_ilman_etuuksia']))
<                 
<         kateen=q['opintotuki']+q['kokoelake']+p['puoliso_tulot']+p['t']+q['aitiyspaivaraha']+q['isyyspaivaraha']+q['kotihoidontuki']+q['asumistuki']+q['toimtuki']\
<             +q['ansiopvraha']+q['puoliso_ansiopvraha']+q['elatustuki']-q['puoliso_verot']-q['verot']-q['pvhoito']+q['lapsilisa']+q['sairauspaivaraha']
---
>         #print(q['ansiopvraha']+q['perustulo'],q['ansiopvraha_netto']+q['perustulo_netto'],-(q['pvhoito_ilman_etuuksia_pl_pt']-q['pvhoito_ilman_etuuksia']),-(q['verot_ilman_etuuksia_pl_pt']-q['verot_ilman_etuuksia']),-(q['verot']-q['verot_ilman_etuuksia_pl_pt']))
> 
> 
>         kateen=q['perustulo']+q['puoliso_perustulo']+q['opintotuki']+q['kokoelake']+p['puoliso_tulot']+p['t']\
>             +q['aitiyspaivaraha']+q['isyyspaivaraha']+q['kotihoidontuki']+q['asumistuki']+q['toimtuki']+q['ansiopvraha']\
>             +q['puoliso_ansiopvraha']+q['elatustuki']-q['puoliso_verot']-q['verot']-q['pvhoito']+q['lapsilisa']
1160c787,794
<         q['perhetulot_netto']=p['puoliso_tulot']+p['t']-q['verot_ilman_etuuksia']-q['puoliso_verot_ilman_etuuksia']-q['pvhoito_ilman_etuuksia'] # ilman etuuksia
---
>         q['perhetulot_netto']=p['puoliso_tulot']+p['t']-q['verot_ilman_etuuksia']-q['puoliso_verot_ilman_etuuksia']\
>             -q['pvhoito_ilman_etuuksia'] # ilman etuuksia
>         q['etuustulo_netto']=q['puoliso_perustulo_netto']+q['perustulo_netto']+q['ansiopvraha_netto']+q['puoliso_ansiopvraha_netto']\
>             +q['aitiyspaivaraha']+q['isyyspaivaraha']+q['kotihoidontuki']+q['asumistuki']+q['toimtuki']\
>             -(q['pvhoito']-q['pvhoito_ilman_etuuksia'])+q['lapsilisa']
>         q['etuustulo_brutto']=q['puoliso_perustulo']+q['perustulo']+q['ansiopvraha']+q['puoliso_ansiopvraha']\
>             +q['aitiyspaivaraha']+q['isyyspaivaraha']+q['kotihoidontuki']+q['asumistuki']+q['toimtuki']\
>             +q['lapsilisa']+q['kokoelake']
1162,1168d795
<         q['etuustulo_netto']=q['ansiopvraha_netto']+q['puoliso_ansiopvraha_netto']+q['opintotuki']\
<             +q['aitiyspaivaraha']+q['isyyspaivaraha']+q['kotihoidontuki']+q['asumistuki']\
<             +q['toimtuki']-(q['pvhoito_ilman_etuuksia']-q['pvhoito_ilman_etuuksia'])
<         q['etuustulo_brutto']=q['ansiopvraha']+q['puoliso_ansiopvraha']+q['opintotuki']\
<             +q['aitiyspaivaraha']+q['isyyspaivaraha']+q['kotihoidontuki']+q['asumistuki']\
<             +q['toimtuki']+q['kokoelake']
<         
1170,1174d796
<         if p['elakkeella']<1:
<             q['palkkatulot_eielakkeella']=p['t']
<         else:
<             q['palkkatulot_eielakkeella']=0
<             
1177,1183c799,806
<         q['perustulo']=0
<         q['puoliso_perustulo']=0
<         q['perustulo_netto']=0
<         q['puoliso_perustulo_netto']=0
<         q['perustulo_nettonetto']=0
<         q['puoliso_perustulo_nettonetto']=0
< 
---
>         
>         #print(p['t'],kateen,q['perhetulot_netto'],q['etuustulo_netto'],q['perhetulot_netto']+q['etuustulo_netto'],q['toimtuki'])
>         #print(q['puoliso_perustulo_netto'],q['perustulo_netto'],q['ansiopvraha_netto'],q['puoliso_ansiopvraha_netto'],
>         #    q['aitiyspaivaraha'],q['isyyspaivaraha'],q['kotihoidontuki'],
>         #    q['asumistuki'],q['toimtuki'],
>         #    (q['pvhoito']-q['pvhoito_ilman_etuuksia']),q['lapsilisa'])
>         #print(q['pvhoito'],q['pvhoito_ilman_etuuksia'])
>         
1186,1203c809,833
<     def asumistuki2018(self,palkkatulot,muuttulot,vuokra,p):
<         # Ruokakunnan koko
<         # henkilöä    I kuntaryhmä,
<         # e/kk    II kuntaryhmä,
<         # e/kk    III kuntaryhmä,
<         # e/kk    IIII kuntaryhmä,
<         # e/kk
<         # 1    508    492    411    362
<         # 2    735    706    600    527
<         # 3    937    890    761    675
<         # 4    1095    1038    901    804
<         # + lisähenkilöä kohden, e/kk
<         # 
<         # 137    130    123    118
<         # enimmaismenot kuntaryhmittain kun hloita 1-4
<         max_menot=np.array([[508, 492, 411, 362],[735, 706, 600, 527],[937, 890, 761, 675],[1095, 1038, 901, 804]])
<         max_lisa=np.array([137, 130, 123, 118])
<         # kuntaryhma=3
---
>     def opintoraha(self,palkka,p):
>         if p['lapsia']>0:
>             tuki=self.perustulo()+650*0.4 # opintolainahyvitys mukana
>         else:
>             tuki=self.perustulo()+650*0.4 # opintolainahyvitys mukana
>             
>         if palkka>667+222/12: # oletetaan että täysiaikainen opiskelija
>             tuki=self.perustulo() # ei opintolainaa
>             
>         return tuki
>                 
>     def ansiopaivaraha(self,tyoton,vakiintunutpalkka,lapsia,tyotaikaisettulot,saa_ansiopaivarahaa,kesto,p,ansiokerroin=1.0,omavastuukerroin=None):
>         if not self.osittainen_perustulo:
>             perus=self.perustulo()
>             tuki=self.perustulo()
>             ansiopaivarahamaara=0   
>             
>             return tuki,ansiopaivarahamaara,perus
>     
>         ansiopvrahan_suojaosa=p['ansiopvrahan_suojaosa']
>         lapsikorotus=p['ansiopvraha_lapsikorotus']
>     
>         if tyoton>0:
>             if lapsikorotus<1:
>                 lapsia=0    
1205c835,863
<         max_meno=max_menot[min(3,p['aikuisia']+p['lapsia']-1),p['kuntaryhma']]+max(0,p['aikuisia']+p['lapsia']-4)*max_lisa[p['kuntaryhma']]
---
>             if self.year==2018:
>                 lapsikorotus=np.array([0,5.23,7.68,9.90])*21.5    
>                 sotumaksu=0.0448     # 2015 0.0428 2016 0.0460
>                 taite=3078.60    
>             elif self.year==2019:
>                 lapsikorotus=np.array([0,5.23,7.68,9.90])*21.5    
>                 sotumaksu=0.0448     # 2015 0.0428 2016 0.0460
>                 taite=3078.60    
>             elif self.year==2020:
>                 lapsikorotus=np.array([0,5.28,7.76,10.00])*21.5    
>                 sotumaksu=0.0414     # 2015 0.0428 2016 0.0460
>                 taite=3197.70    
>             elif self.year==2021:
>                 lapsikorotus=np.array([0,5.28,7.76,10.00])*21.5    
>                 sotumaksu=0.0414     # 2015 0.0428 2016 0.0460
>                 taite=3197.70    
>             else:
>                 lapsikorotus=np.array([0,5.23,7.68,9.90])*21.5    
>                 sotumaksu=0.0448     # 2015 0.0428 2016 0.0460
>                 taite=3078.60    
>                             
>             if saa_ansiopaivarahaa>0: 
>                 perus=self.peruspaivaraha(0)     # peruspäiväraha lasketaan tässä kohdassa ilman lapsikorotusta
>                 vakpalkka=vakiintunutpalkka*(1-sotumaksu)     
>         
>                 if vakpalkka>taite:
>                     tuki2=0.2*max(0,vakpalkka-taite)+0.45*max(0,taite-perus)+perus    
>                 else:
>                     tuki2=0.45*max(0,vakpalkka-perus)+perus    
1207,1213c865,867
<         prosentti=0.8 # vastaa 80 %
<         suojaosa=300*p['aikuisia']
<         perusomavastuu=max(0,0.42*(max(0,palkkatulot-suojaosa)+muuttulot-(603+100*p['aikuisia']+223*p['lapsia'])))
<         if perusomavastuu<10:
<             perusomavastuu=0
<             
<         tuki=max(0,(min(max_meno,vuokra)-perusomavastuu)*prosentti)
---
>                 tuki2=tuki2+lapsikorotus[min(lapsia,3)]    
>                 tuki2=tuki2*ansiokerroin # mahdollinen porrastus tehdään tämän avulla
>                 suojaosa=self.tyottomyysturva_suojaosa(ansiopvrahan_suojaosa,p)    
1215c869,896
<         #print('palkka {:.1f} muuttulot {:.1f} perusomavastuu {:.1f} vuokra {:.1f} max_meno {:.1f} tuki {:.1f}'.format(palkkatulot,muuttulot,perusomavastuu,vuokra,max_meno,tuki))
---
>                 perus=self.perustulo()     # peruspäiväraha lasketaan tässä kohdassa lapsikorotukset mukana
>                 if tuki2>.9*vakpalkka:
>                     tuki2=max(.9*vakpalkka,perus)    
>         
>                 vahentavattulo=max(0,tyotaikaisettulot-suojaosa)    
>                 ansiopaivarahamaara=max(0,tuki2-0.5*vahentavattulo)  
>                 ansiopaivarahamaara=self.ansiopaivaraha_ylaraja(ansiopaivarahamaara,tyotaikaisettulot,vakpalkka,vakiintunutpalkka)  
> 
>                 tuki=ansiopaivarahamaara
>                 perus=self.soviteltu_peruspaivaraha(lapsia,tyotaikaisettulot,ansiopvrahan_suojaosa,p)
>                 tuki=max(perus,tuki)     # voi tulla vastaan pienillä tasoilla4
>             else:
>                 ansiopaivarahamaara=0    
>                 perus=self.soviteltu_peruspaivaraha(lapsia,tyotaikaisettulot,ansiopvrahan_suojaosa,p)
>                 tuki=perus    
>         else:
>             perus=self.perustulo()
>             tuki=self.perustulo()
>             ansiopaivarahamaara=0   
>             
>         return tuki,ansiopaivarahamaara,perus
> 
>     def soviteltu_peruspaivaraha(self,lapsia,tyotaikaisettulot,ansiopvrahan_suojaosa,p):
>         suojaosa=self.tyottomyysturva_suojaosa(ansiopvrahan_suojaosa,p)
> 
>         pvraha=self.peruspaivaraha(lapsia)
>         vahentavattulo=max(0,tyotaikaisettulot-suojaosa)
>         tuki=max(self.perustulo(),max(0,pvraha-0.5*vahentavattulo))
1217a899,901
> 
>     def peruspaivaraha_bi(self,lapsia):
>         return self.perustulo()
1219c903,947
<     def asumistuki2019(self,palkkatulot,muuttulot,vuokra,p):
---
>     # tmtuki samankokoinen
>     def peruspaivaraha2018(self,lapsia):
>         if lapsia==0:
>             lisa=0    
>         elif lapsia==1:
>             lisa=5.23     # e/pv
>         elif lapsia==2:
>             lisa=7.68     # e/pv
>         else:
>             lisa=9.90     # e/pv
>         
>         pvraha=21.5*lisa+self.perustulo()
>         return pvraha
>         
>     # tmtuki samankokoinen
>     def peruspaivaraha2019(self,lapsia):
>         if lapsia==0:
>             lisa=0    
>         elif lapsia==1:
>             lisa=5.23     # e/pv
>         elif lapsia==2:
>             lisa=7.68     # e/pv
>         else:
>             lisa=9.90     # e/pv
>         
>         pvraha=21.5*lisa+self.perustulo()
>     
>         return pvraha
> 
>     # tmtuki samankokoinen
>     def peruspaivaraha2020(self,lapsia):
>         if lapsia==0:
>             lisa=0    
>         elif lapsia==1:
>             lisa=5.28     # e/pv
>         elif lapsia==2:
>             lisa=7.76     # e/pv
>         else:
>             lisa=10.00     # e/pv
>         
>         pvraha=21.5*lisa+self.perustulo()
>     
>         return pvraha
> 
>     def asumistuki2018(self,palkkatulot,muuttulot,vuokra,p):
1237a966,968
>         if not self.osittainen_perustulo:
>             return 0
>     
1241c972
<         suojaosa=300*p['aikuisia']
---
>         suojaosa=self.asumistuen_suojaosa*p['aikuisia']
1249d979
< 
1251c981
<     def asumistuki2020(self,palkkatulot,muuttulot,vuokra,p):
---
>     def asumistuki2019(self,palkkatulot,muuttulot,vuokra,p):
1268a999,1001
>         
>         if not self.osittainen_perustulo:
>             return 0
1273c1006
<         suojaosa=300*p['aikuisia']
---
>         suojaosa=600*p['aikuisia']
1281d1013
<         
1283c1015,1016
<     def asumistuki2021(self,palkkatulot,muuttulot,vuokra,p):
---
>         
>     def asumistuki2020(self,palkkatulot,muuttulot,vuokra,p):
1303a1037,1039
>         if not self.osittainen_perustulo:
>             return 0
> 
1305c1041
<         suojaosa=300*p['aikuisia']
---
>         suojaosa=600*p['aikuisia']
1314,1706d1049
< 
<     def elakkeensaajan_asumistuki(self,palkkatulot,muuttulot,vuokra,p):
<         # Ruokakunnan koko
<         # henkilöä    I kuntaryhmä,
<         # e/kk    II kuntaryhmä,
<         # e/kk    III kuntaryhmä,
<         # e/kk    IIII kuntaryhmä,
<         # e/kk
<         # 1    508    492    411    362
<         # 2    735    706    600    527
<         # 3    937    890    761    675
<         # 4    1095    1038    901    804
<         # + lisähenkilöä kohden, e/kk
<         # 
<         # 137    130    123    118
<         # enimmaismenot kuntaryhmittain kun hloita 1-4
<         # tarkasta
<         max_menot=np.array([[508, 492, 411, 362],[735, 706, 600, 527],[937, 890, 761, 675],[1095, 1038, 901, 804]])
<         max_lisa=np.array([137, 130, 123, 118])
<         # kuntaryhma=3
< 
<         max_meno=max_menot[min(3,p['aikuisia']+p['lapsia']-1),p['kuntaryhma']]+max(0,p['aikuisia']+p['lapsia']-4)*max_lisa[p['kuntaryhma']]
< 
<         prosentti=0.85 # vastaa 85 %
<         perusomavastuu=50.87 # e/kk, 2019
<         if p['aikuisia']<2:
<             tuloraja=8_676/12
<         else:
<             tuloraja=12_717/12 # oletetaan että puolisolla ei oikeutta asumistukeen
<             
<         lisaomavastuu=0.4*max(0,palkkatulot+muuttulot-tuloraja)
<             
<         tuki=max(0,(min(max_meno,vuokra)-perusomavastuu-lisaomavastuu)*prosentti)
<     
<         return tuki
< 
<     # hallituksen päätöksenmukaiset päivähoitomenot 2018
<     def paivahoitomenot2018(self,hoidossa,tulot,p,prosentti1=None,prosentti2=None,prosentti3=None,maksimimaksu=None):
<         minimimaksu=10
< 
<         if prosentti1==None:
<             prosentti1=0.107
<         if prosentti2==None:
<             prosentti2=0.5
<         if prosentti3==None:
<             prosentti3=0.2
<             
<         if maksimimaksu==None:
<             maksimimaksu=290
< 
<         if p['lapsia']>0:
<             vakea=p['lapsia']+p['aikuisia']
<             if vakea==1:
<                 alaraja=2050
<                 prosentti=prosentti1
<             elif vakea==2:
<                 alaraja=2050
<                 prosentti=prosentti1
<             elif vakea==3:
<                 alaraja=2646
<                 prosentti=prosentti1
<             elif vakea==4:
<                 alaraja=3003
<                 prosentti=prosentti1
<             elif vakea==5:
<                 alaraja=3361
<                 prosentti=prosentti1
<             elif vakea==6:
<                 alaraja=3718
<                 prosentti=prosentti1
<             else:
<                 alaraja=3718+138*(vakea-6)
<                 prosentti=prosentti1
< 
<             pmaksu=min(maksimimaksu,max(0,tulot-alaraja)*prosentti)
<             if hoidossa==0:
<                 kerroin=0
<             elif hoidossa==1:
<                 if pmaksu<minimimaksu:
<                     kerroin=0
<                 else:
<                     kerroin=1
<             elif hoidossa==2:
<                 if pmaksu<minimimaksu:
<                     kerroin=0
<                 else:
<                     if (prosentti2*pmaksu<minimimaksu):
<                         kerroin=1
<                     else:
<                         kerroin=1+prosentti2
<             else:
<                 if pmaksu<minimimaksu:
<                     kerroin=0
<                 else:
<                     if prosentti2*pmaksu<minimimaksu:
<                         kerroin=1
<                     else:
<                         if (prosentti3*pmaksu<minimimaksu):
<                             kerroin=1+prosentti2
<                         else:
<                             kerroin=1+prosentti2+prosentti3*(p['lapsia']-2)
<             maksu=kerroin*pmaksu
<         else:
<             maksu=0
<         
<         return maksu
<         
<     # hallituksen päätöksenmukaiset päivähoitomenot 2018
<     def paivahoitomenot2019(self,hoidossa,tulot,p,prosentti1=None,prosentti2=None,prosentti3=None,maksimimaksu=None):
<         minimimaksu=10
< 
<         if prosentti1==None:
<             prosentti1=0.107
<         if prosentti2==None:
<             prosentti2=0.5
<         if prosentti3==None:
<             prosentti3=0.2
<             
<         if maksimimaksu==None:
<             maksimimaksu=290
< 
<         if p['lapsia']>0:
<             vakea=p['lapsia']+p['aikuisia']
<             if vakea==1:
<                 alaraja=2050
<                 prosentti=prosentti1
<             elif vakea==2:
<                 alaraja=2050
<                 prosentti=prosentti1
<             elif vakea==3:
<                 alaraja=2646
<                 prosentti=prosentti1
<             elif vakea==4:
<                 alaraja=3003
<                 prosentti=prosentti1
<             elif vakea==5:
<                 alaraja=3361
<                 prosentti=prosentti1
<             elif vakea==6:
<                 alaraja=3718
<                 prosentti=prosentti1
<             else:
<                 alaraja=3718+138*(vakea-6)
<                 prosentti=prosentti1
< 
<             pmaksu=min(maksimimaksu,max(0,tulot-alaraja)*prosentti)
<             if hoidossa==0:
<                 kerroin=0
<             elif hoidossa==1:
<                 if pmaksu<minimimaksu:
<                     kerroin=0
<                 else:
<                     kerroin=1
<             elif hoidossa==2:
<                 if pmaksu<minimimaksu:
<                     kerroin=0
<                 else:
<                     if (prosentti2*pmaksu<minimimaksu):
<                         kerroin=1
<                     else:
<                         kerroin=1+prosentti2
<             else:
<                 if pmaksu<minimimaksu:
<                     kerroin=0
<                 else:
<                     if prosentti2*pmaksu<minimimaksu:
<                         kerroin=1
<                     else:
<                         if (prosentti3*pmaksu<minimimaksu):
<                             kerroin=1+prosentti2
<                         else:
<                             kerroin=1+prosentti2+prosentti3*(p['lapsia']-2)
<             maksu=kerroin*pmaksu
<         else:
<             maksu=0
<         
<         return maksu
<         
<     # hallituksen päätöksenmukaiset päivähoitomenot 2018
<     def paivahoitomenot2020(self,hoidossa,tulot,p,prosentti1=None,prosentti2=None,prosentti3=None,maksimimaksu=None):
<         minimimaksu=10
< 
<         if prosentti1==None:
<             prosentti1=0.107
<         if prosentti2==None:
<             prosentti2=0.5
<         if prosentti3==None:
<             prosentti3=0.2
<             
<         if maksimimaksu==None:
<             maksimimaksu=290
< 
<         if p['lapsia']>0:
<             vakea=p['lapsia']+p['aikuisia']
<             if vakea==1:
<                 alaraja=2050
<                 prosentti=prosentti1
<             elif vakea==2:
<                 alaraja=2050
<                 prosentti=prosentti1
<             elif vakea==3:
<                 alaraja=2646
<                 prosentti=prosentti1
<             elif vakea==4:
<                 alaraja=3003
<                 prosentti=prosentti1
<             elif vakea==5:
<                 alaraja=3361
<                 prosentti=prosentti1
<             elif vakea==6:
<                 alaraja=3718
<                 prosentti=prosentti1
<             else:
<                 alaraja=3718+138*(vakea-6)
<                 prosentti=prosentti1
< 
<             pmaksu=min(maksimimaksu,max(0,tulot-alaraja)*prosentti)
<             if hoidossa==0:
<                 kerroin=0
<             elif hoidossa==1:
<                 if pmaksu<minimimaksu:
<                     kerroin=0
<                 else:
<                     kerroin=1
<             elif hoidossa==2:
<                 if pmaksu<minimimaksu:
<                     kerroin=0
<                 else:
<                     if (prosentti2*pmaksu<minimimaksu):
<                         kerroin=1
<                     else:
<                         kerroin=1+prosentti2
<             else:
<                 if pmaksu<minimimaksu:
<                     kerroin=0
<                 else:
<                     if prosentti2*pmaksu<minimimaksu:
<                         kerroin=1
<                     else:
<                         if (prosentti3*pmaksu<minimimaksu):
<                             kerroin=1+prosentti2
<                         else:
<                             kerroin=1+prosentti2+prosentti3*(p['lapsia']-2)
<             maksu=kerroin*pmaksu
<         else:
<             maksu=0
<         
<         return maksu
<     
<     def laske_kansanelake2018(self,ika,tyoelake,yksin,disability=False):
<         if yksin>0:
<             maara=628.85
<         else:
<             maara=557.79
<         if disability:
<             maara = max(0,maara-np.maximum(0,(tyoelake-55.54))/2)
<         else:
<             if ika>=65:
<                 maara = max(0,maara-np.maximum(0,(tyoelake-55.54))/2)
<             elif ika>=62: # varhennus
<                 maara = max(0,maara*(1.0-0.048*(65-ika))-np.maximum(0,(tyoelake-55.54))/2)
<             else:
<                 maara=0
<             
<         return maara
<             
<     def laske_kansanelake2019(self,ika,tyoelake,yksin,disability=False):
<         if yksin>0:
<             maara=628.85
<         else:
<             maara=557.79
<         if disability:
<             maara = max(0,maara-np.maximum(0,(tyoelake-55.54))/2)
<         else:
<             if ika>=65:
<                 maara = max(0,maara-np.maximum(0,(tyoelake-55.54))/2)
<             elif ika>=62: # varhennus
<                 maara = max(0,maara*(1.0-0.048*(65-ika))-np.maximum(0,(tyoelake-55.54))/2)
<             else:
<                 maara=0
<             
<         return maara
<         
<     def laske_kansanelake2020(self,ika,tyoelake,yksin,disability=False):
<         if yksin>0:
<             maara=662.86
<         else:
<             maara=591.79
<         if disability:
<             maara = max(0,maara-np.maximum(0,(tyoelake-55.54))/2)
<         else:
<             if ika>=65:
<                 maara = max(0,maara-np.maximum(0,(tyoelake-55.54))/2)
<             elif ika>=62: # varhennus
<                 maara = max(0,maara*(1.0-0.048*(65-ika))-np.maximum(0,(tyoelake-55.54))/2)
<             else:
<                 maara=0
<             
<         return maara
<         
<     def laske_takuuelake2018(self,ika,muuelake,disability=False):
<         if ika<63 and not disability:
<             return 0
<         
<         if muuelake<777.84:
<             elake=784.52-muuelake
<         else:
<             elake=0
<         
<         return elake
<     
<     def laske_takuuelake2019(self,ika,muuelake,disability=False):
<         if ika<63 and not disability:
<             return 0
<         
<         if muuelake<777.84:
<             elake=784.52-muuelake
<         else:
<             elake=0
<         
<         return elake
<     
<     def laske_takuuelake2020(self,ika,muuelake,disability=False):
<         if ika<63 and not disability:
<             return 0
<         
<         if muuelake<834.52:
<             elake=834.52-muuelake
<         else:
<             elake=0
<         
<         return elake
<         
<     def laske_takuuelake2021(self,ika,muuelake,disability=False):
<         if ika<63 and not disability:
<             return 0
<         
<         if muuelake<837.59:
<             elake=837.59-muuelake
<         else:
<             elake=0
<         
<         return elake
<         
<     def laske_puhdas_tyoelake(self,ika,elake,disability=False):
<         if self.irr_vain_tyoelake:
<             return elake 
<         else:
<             kansanelake=self.laske_kansanelake(ika,elake,1,disability=disability)
<             self.elakeindeksi=(0*1+1.0*1.0/1.016)**0.25
<             indeksi=self.elakeindeksi**max(0,ika-40) # 2020-1980=40
<             if ika>=63 or disability:
<                 return max(0,elake-(self.laske_takuuelake(ika,0,disability=disability)-kansanelake)*indeksi)
<             else:
<                 return max(0,elake-self.laske_kansanelake(ika,0,1)*indeksi)
<     
<     def laske_kokonaiselake(self,ika,muuelake,yksin=1,include_takuuelake=True,include_kansanelake=False,disability=False):
<         '''
<         by default, kansaneläke is not included, since this function is called annually
<         '''
<         if include_kansanelake:
<             kansanelake=self.laske_kansanelake(ika,muuelake,yksin,disability=disability)
<             muuelake=muuelake+kansanelake
<             
<         if include_takuuelake:
<             takuuelake=self.laske_takuuelake(ika,muuelake,disability=disability)
<             kokoelake=takuuelake+muuelake
<         else:
<             kokoelake=muuelake
<     
<         return kokoelake
<         
<     def isyysraha_perus(self,vakiintunutpalkka):
<         if self.year==2018:
<             minimi=27.86*25
<             sotumaksu=0.0448
<             taite1=37_861/12  
<             taite2=58_252/12  
<         elif self.year==2019:
<             minimi=27.86*25
<             sotumaksu=0.0448
<             taite1=37_861/12  
<             taite2=58_252/12  
<         else:
<             minimi=27.86*25
<             sotumaksu=0.0448
<             taite1=37_861/12  
<             taite2=58_252/12  
<                         
<         raha=max(minimi,0.7*min(taite1,vakiintunutpalkka)+0.4*max(min(taite2,vakiintunutpalkka)-taite1,0)+0.4*max(vakiintunutpalkka-taite2,0))
< 
<         return raha
<         
1709c1052
<             minimi=0
---
>             minimi=self.perustulo()
1716c1059
<             minimi=27.86*25
---
>             minimi=self.perustulo()
1723c1066
<         return raha
---
>         return raha        
1725,1727c1068,1070
<     def aitiysraha2020(self,vakiintunutpalkka,kesto):
<         if kesto<56/260:
<             minimi=0
---
>     def isyysraha_perus(self,vakiintunutpalkka):
>         if self.year==2018:
>             minimi=self.perustulo() #27.86*25
1730,1734c1073,1075
<             taite2=58_252/12 
<                 
<             raha=max(minimi,0.9*min(taite1,vakiintunutpalkka)+0.325*max(vakiintunutpalkka-taite1,0))
<         else: 
<             minimi=28.94*25
---
>             taite2=58_252/12  
>         elif self.year==2019:
>             minimi=self.perustulo() #27.86*25
1737,2025c1078
<             taite2=58_252/12 
<                         
<             raha=max(minimi,0.7*min(taite1,vakiintunutpalkka)+0.4*max(min(taite2,vakiintunutpalkka)-taite1,0)+0.4*max(vakiintunutpalkka-taite2,0))
< 
<         return raha
<         
<     def sairauspaivaraha2018(self,vakiintunutpalkka):
<         minimi=24.64*25
<         sotumaksu=0.0448
<         taite1=30_394/12
<         taite2=58_252/12
<         vakiintunut=(1-sotumaksu)*vakiintunutpalkka                    
< 
<         raha=max(minimi,0.7*min(taite1,vakiintunut)+0.4*max(min(taite2,vakiintunut)-taite1,0)+0.2*max(vakiintunut-taite2,0))
< 
<         return raha
<         
<     def sairauspaivaraha2019(self,vakiintunutpalkka):
<         minimi=27.86*25
<         sotumaksu=0.05
<         taite1=30_394/12
<         taite2=57_183/12
<         vakiintunut=(1-sotumaksu)*vakiintunutpalkka                    
< 
<         raha=max(minimi,0.7*min(taite1,vakiintunut)+0.4*max(min(taite2,vakiintunut)-taite1,0)+0.2*max(vakiintunut-taite2,0))
< 
<         return raha
< 
<     def sairauspaivaraha2020(self,vakiintunutpalkka):
<         minimi=28.94*25
<         sotumaksu=0.0958
<         taite1=31_595/12  
<         vakiintunut=(1-sotumaksu)*vakiintunutpalkka                    
<                     
<         raha=max(minimi,0.7*min(taite1,vakiintunut)+0.2*max(vakiintunut-taite1,0))
< 
<         return raha
<         
<     def laske_marginaalit(self,q1,q2,dt,laske_tyollistymisveroaste=0):
<     
<         if dt<1:
<             dt=1
< 
<         # lasketaan marginaalit
<         marg={}        
<         marg['asumistuki']=(-q2['asumistuki']+q1['asumistuki'])*100/dt
<         marg['ansiopvraha']=(+q1['ansiopvraha_netto']-q2['ansiopvraha_netto']+q1['puoliso_ansiopvraha_netto']-q2['puoliso_ansiopvraha_netto'])*100/dt 
<         marg['pvhoito']=(-q1['pvhoito']+q2['pvhoito'])*100/dt
<         marg['toimtuki']=(+q1['toimtuki']-q2['toimtuki'])*100/dt
<         marg['palkkaverot']=(-q1['verot_ilman_etuuksia']+q2['verot_ilman_etuuksia']-q1['puoliso_verot_ilman_etuuksia']+q2['puoliso_verot_ilman_etuuksia'])*100/dt
<         marg['valtionvero']=(-q1['valtionvero']+q2['valtionvero'])*100/dt
<         marg['elake']=(q1['kokoelake_netto']-q2['kokoelake_netto'])*100/dt
<         marg['opintotuki']=(q1['opintotuki_netto']-q2['opintotuki_netto'])*100/dt
<         marg['kunnallisvero']=(-q1['kunnallisvero']+q2['kunnallisvero'])*100/dt
<         marg['ansiotulovah']=(+q1['ansiotulovahennys']-q2['ansiotulovahennys'])*100/dt
<         marg['tyotulovahennys']=(+q1['tyotulovahennys']-q2['tyotulovahennys'])*100/dt
<         marg['perusvahennys']=(+q1['perusvahennys']-q2['perusvahennys'])*100/dt
<         marg['tyotulovahennys_kunnallisveroon']=(+q1['tyotulovahennys_kunnallisveroon']-q2['tyotulovahennys_kunnallisveroon'])*100/dt
<         marg['ptel']=(-q1['ptel']+q2['ptel']-q1['puoliso_ptel']+q2['puoliso_ptel'])*100/dt
<         marg['sairausvakuutus']=(-q1['sairausvakuutus']+q2['sairausvakuutus']-q1['puoliso_sairausvakuutus']+q2['puoliso_sairausvakuutus'])*100/dt
<         marg['tyotvakmaksu']=(-q1['tyotvakmaksu']+q2['tyotvakmaksu']-q1['puoliso_tyotvakmaksu']+q2['puoliso_tyotvakmaksu'])*100/dt
<         marg['puoliso_verot']=(-q1['puoliso_verot']+q2['puoliso_verot'])*100/dt
<         marg['perustulo']=(-q2['perustulo_netto']+q1['perustulo_netto']-q2['puoliso_perustulo_netto']+q1['puoliso_perustulo_netto'])*100/dt
<     
<         marg['sivukulut']=marg['tyotvakmaksu']+marg['sairausvakuutus']+marg['ptel'] # sisältyvät jo veroihin
<         marg['etuudet']=marg['ansiopvraha']+marg['asumistuki']+marg['toimtuki']
<         marg['verot']=marg['palkkaverot'] # sisältää sivukulut
<         marg['ansioverot']=marg['palkkaverot']+marg['elake'] # sisältää sivukulut
<         marg['marginaali']=marg['pvhoito']+marg['etuudet']+marg['verot']+marg['elake']
<     
<         # ja käteen jää
<         tulot={}
<         tulot['kateen1']=q1['kateen']
<         tulot['kateen2']=q2['kateen']
<     
<         omattulotnetto1=q1['omattulot_netto'] # ilman etuuksia
<         omattulotnetto2=q2['omattulot_netto'] # ilman etuuksia
<         puolisontulotnetto1=q1['puoliso_tulot_netto'] # ilman etuuksia
<         puolisontulotnetto2=q2['puoliso_tulot_netto'] # ilman etuuksia
<         if laske_tyollistymisveroaste>0:
<             tulot['tulotnetto']=omattulotnetto2+puolisontulotnetto2
<             tulot['puolisotulotnetto']=puolisontulotnetto2
<             tulot['omattulotnetto']=omattulotnetto2
<         else:
<             tulot['tulotnetto']=omattulotnetto1+puolisontulotnetto1
<             tulot['puolisotulotnetto']=puolisontulotnetto1
<             tulot['omattulotnetto']=omattulotnetto1
<             
<         marg['marginaaliveroprosentti']=100-(tulot['kateen2']-tulot['kateen1'])*100/dt 
<     
<         return tulot,marg
<     
<     def laske_ja_plottaa(self,p=None,min_salary=0,max_salary=6000,step_salary=1,
<             basenetto=None,baseeff=None,basetva=None,baseosatva=None,
<             dt=100,plottaa=True,otsikko="Vaihtoehto",otsikkobase="Nykytila",selite=True,
<             plot_tva=True,plot_eff=True,plot_netto=True,plot_osaeff=True,
<             figname=None,grayscale=None):
<             
<         netto,eff,tva,osa_tva=self.comp_insentives(p=p,p2=None,min_salary=min_salary,
<                                                 max_salary=max_salary,step_salary=step_salary,dt=dt)
<                 
<         if plottaa:
<             self.plot_insentives(netto,eff,tva,osa_tva,min_salary=min_salary,max_salary=max_salary+1,
<                 step_salary=step_salary,
<                 basenetto=basenetto,baseeff=baseeff,basetva=basetva,baseosatva=baseosatva,
<                 dt=dt,otsikko=otsikko,otsikkobase=otsikkobase,selite=selite,
<                 plot_tva=plot_tva,plot_eff=plot_eff,plot_netto=plot_netto,plot_osaeff=plot_osaeff,
<                 figname=figname,grayscale=grayscale)
<         
<         return netto,eff,tva,osa_tva
<         
<     def plot_insentives(self,netto,eff,tva,osa_tva,
<             min_salary=0,max_salary=6000,step_salary=1,
<             basenetto=None,baseeff=None,basetva=None,baseosatva=None,
<             dt=100,otsikko="Vaihtoehto",otsikkobase="Nykytila",selite=True,
<             plot_tva=True,plot_eff=True,plot_netto=True,plot_osaeff=False,
<             figname=None,grayscale=False):
<             
<         if grayscale:
<             plt.style.use('grayscale')
<             plt.rcParams['figure.facecolor'] = 'white' # Or any suitable colour...
<             pal=sns.dark_palette("darkgray", 6, reverse=True)
<             reverse=True
<         else:
<             pal=sns.color_palette()            
<             
<         x=np.arange(min_salary,max_salary,step_salary)
<         if plot_netto:
<             fig, axs = plt.subplots()
<             if basenetto is not None:
<                 axs.plot(x,basenetto,label=otsikkobase)
<                 axs.plot(x,netto,label=otsikko)
<                 if selite:
<                     axs.legend(loc='upper right')
<             else:
<                 axs.plot(x,netto)        
<             axs.set_xlabel(self.labels['wage'])
<             axs.set_ylabel(self.labels['net income'])
<             axs.grid(False)
<             axs.set_xlim(0, max_salary)
<             if figname is not None:
<                 plt.savefig(figname+'_netto.eps', format='eps')
<             plt.show()
< 
<         if plot_eff:
<             fig, axs = plt.subplots()
<             if baseeff is not None:
<                 axs.plot(x,baseeff,label=otsikkobase)
<                 axs.plot(x,eff,label=otsikko)
<                 if selite:
<                     axs.legend(loc='upper right')
<             else:
<                 axs.plot(x,eff)        
<             axs.set_xlabel(self.labels['wage'])
<             axs.set_ylabel(self.labels['effective'])
<             axs.grid(True)
<             axs.set_xlim(0, max_salary)
<             if figname is not None:
<                 plt.savefig(figname+'_effmarg.eps', format='eps')
<             plt.show()
< 
<         if plot_tva:
<             fig, axs = plt.subplots()
<             if basenetto is not None:
<                 axs.plot(x,basetva,label=otsikkobase)
<                 axs.plot(x,tva,label=otsikko)
<                 if selite:
<                     axs.legend(loc='upper right')
<             else:
<                 axs.plot(x,tva)
<             axs.set_xlabel(self.labels['wage'])
<             axs.set_ylabel('Työllistymisveroaste (%)')
<             axs.grid(True)
<             axs.set_xlim(0, max_salary)
<             axs.set_ylim(0, 120)
<             if figname is not None:
<                 plt.savefig(figname+'_tva.eps', format='eps')
<             plt.show()
< 
<         if plot_osaeff:
<             fig, axs = plt.subplots()
<             if baseosatva is not None:
<                 axs.plot(x,baseosatva,label=otsikkobase)
<                 axs.plot(x,osa_tva,label=otsikko)
<                 if selite:
<                     axs.legend(loc='upper right')
<             else:
<                 axs.plot(x,osa_tva) 
<                        
<             axs.set_xlabel('Osatyön palkka (e/kk)')
<             axs.set_ylabel('Osatyöstä kokotyöhön siirtymisen eff.marg.vero (%)')
<             axs.grid(True)
<             axs.set_xlim(0, max_salary)
<             if figname is not None:
<                 plt.savefig(figname+'_osatva.eps', format='eps')
<             plt.show()    
<         
<     def comp_insentives(self,p=None,p2=None,min_salary=0,max_salary=6000,step_salary=1,dt=100):
<         n_salary=int((max_salary+step_salary-min_salary)/step_salary)
<         netto=np.zeros(n_salary)
<         palkka=np.zeros(n_salary)
<         tva=np.zeros(n_salary)
<         osa_tva=np.zeros(n_salary)
<         eff=np.zeros(n_salary)
<         
<         if p is None:
<             p=self.get_default_parameter()
< 
<         if p2 is None:
<             p2=p.copy()
<             p2['t']=0 # palkka
<         p3=p.copy()
<         n0,q0=self.laske_tulot(p2)
<         k=0
<         for t in np.arange(min_salary,max_salary+step_salary,step_salary):
<             p3['t']=t # palkka
<             n1,q1=self.laske_tulot(p3)
<             p3['t']=t+dt # palkka
<             n2,q2=self.laske_tulot(p3)
<             p3['t']=2*t # palkka
<             n3,q3=self.laske_tulot(p3)
<             netto[k]=n1
<             palkka[k]=t
<             eff[k]=(1-(n2-n1)/dt)*100
<             if t>0:
<                 tva[k]=(1-(n1-n0)/t)*100
<                 osa_tva[k]=(1-(n3-n1)/t)*100
<             else:
<                 tva[k]=0
<                 osa_tva[k]=0
<             k=k+1
<             
<         return netto,eff,tva,osa_tva
<         
<     def comp_top_marginaali(self,p=None):
<     
<         if p==None:
<             p,selite=perheparametrit(perhetyyppi=1)
<         salary=150_000/12.5
<         n,eff,_,_=self.comp_insentives(p=p,min_salary=salary,max_salary=salary+1,step_salary=1,dt=100)
<         #print(n,eff)
<         
<         return eff[0]
<         
<     def laske_ja_plottaa_marginaalit(self,p=None,min_salary=0,max_salary=6000,
<                 basenetto=None,baseeff=None,basetva=None,dt=100,plottaa=True,
<                 otsikko="Vaihtoehto",otsikkobase="Perustapaus",selite=True,ret=False,
<                 plot_tva=True,plot_eff=True,plot_netto=True,figname=None,grayscale=False,
<                 incl_perustulo=False,incl_elake=True,fig=None,ax=None):
<         netto=np.zeros(max_salary+1)
<         palkka=np.zeros(max_salary+1)
<         tva=np.zeros(max_salary+1)
<         eff=np.zeros(max_salary+1)
<         asumistuki=np.zeros(max_salary+1)
<         toimeentulotuki=np.zeros(max_salary+1)
<         ansiopvraha=np.zeros(max_salary+1)
<         nettotulot=np.zeros(max_salary+1)
<         lapsilisa=np.zeros(max_salary+1)
<         elake=np.zeros(max_salary+1)    
<         elatustuki=np.zeros(max_salary+1)
<         perustulo=np.zeros(max_salary+1)
<         opintotuki=np.zeros(max_salary+1)        
<         margasumistuki=np.zeros(max_salary+1)
<         margtoimeentulotuki=np.zeros(max_salary+1)
<         margansiopvraha=np.zeros(max_salary+1)
<         margverot=np.zeros(max_salary+1)    
<         margelake=np.zeros(max_salary+1)    
<         margpvhoito=np.zeros(max_salary+1)        
<         margyht=np.zeros(max_salary+1)        
<         margyht2=np.zeros(max_salary+1)    
<         margperustulo=np.zeros(max_salary+1)    
<         margopintotuki=np.zeros(max_salary+1)        
<         tva_asumistuki=np.zeros(max_salary+1)
<         tva_toimeentulotuki=np.zeros(max_salary+1)
<         tva_ansiopvraha=np.zeros(max_salary+1)
<         tva_verot=np.zeros(max_salary+1)        
<         tva_elake=np.zeros(max_salary+1)        
<         tva_pvhoito=np.zeros(max_salary+1)        
<         tva_perustulo=np.zeros(max_salary+1)        
<         tva_opintotuki=np.zeros(max_salary+1)        
<         tva_yht=np.zeros(max_salary+1)        
<         tva_yht2=np.zeros(max_salary+1)        
<         
<         if grayscale:
<             plt.style.use('grayscale')
<             plt.rcParams['figure.facecolor'] = 'white' # Or any suitable colour...
<             pal=sns.dark_palette("darkgray", 6, reverse=True)
<             plt.grid(b=False)
<             reverse=True
---
>             taite2=58_252/12  
2027,2099c1080,1083
<             pal=sns.color_palette()
<         
<         if p is None:
<             p=self.get_default_parameter()
<             
<         p2=p.copy()
< 
<         p2['t']=0 # palkka
<         n0,q0=self.laske_tulot(p2)
<         for t in range(0,max_salary+1):
<             p2['t']=t # palkka
<             n1,q1=self.laske_tulot(p2)
<             p2['t']=t+dt # palkka
<             n2,q2=self.laske_tulot(p2)
<             tulot,marg=self.laske_marginaalit(q1,q2,dt)
<             tulot2,tvat=self.laske_marginaalit(q0,q1,t,laske_tyollistymisveroaste=1)
<             netto[t]=n1
<             palkka[t]=t
<             margasumistuki[t]=marg['asumistuki']
<             margtoimeentulotuki[t]=marg['toimtuki']
<             margverot[t]=marg['verot']
<             margelake[t]=marg['elake']
<             margansiopvraha[t]=marg['ansiopvraha']
<             margpvhoito[t]=marg['pvhoito']
<             margperustulo[t]=marg['perustulo']
<             margopintotuki[t]=marg['opintotuki']
<             margyht[t]=marg['marginaali']
<             margyht2[t]=marg['marginaaliveroprosentti']
<             elake[t]=q1['kokoelake_netto']
<             asumistuki[t]=q1['asumistuki']
<             toimeentulotuki[t]=q1['toimtuki']
<             opintotuki[t]=q1['opintotuki']
<             ansiopvraha[t]=q1['ansiopvraha_nettonetto']+q1['puoliso_ansiopvraha_nettonetto']
<             lapsilisa[t]=q1['lapsilisa']
<             perustulo[t]=q1['perustulo_nettonetto']+q1['puoliso_perustulo_nettonetto']
<             nettotulot[t]=tulot['tulotnetto']
<             tva_asumistuki[t]=tvat['asumistuki']
<             tva_toimeentulotuki[t]=tvat['toimtuki']
<             tva_verot[t]=tvat['verot']
<             tva_elake[t]=tvat['elake']
<             tva_perustulo[t]=tvat['perustulo']
<             tva_ansiopvraha[t]=tvat['ansiopvraha']
<             tva_opintotuki[t]=tvat['opintotuki']
<             tva_pvhoito[t]=tvat['pvhoito']
<             tva_yht[t]=tvat['marginaali']
<             tva_yht2[t]=tvat['marginaaliveroprosentti']
< 
<             eff[t]=(1-(n2-n1)/dt)*100
<             if t>0:
<                 tva[t]=(1-(n1-n0)/t)*100
<             else:
<                 tva[t]=0
<                 
<         if plot_eff and plottaa:
<             sns.set()
<             if fig is None:
<                 figi,axs = plt.subplots()
<             else:
<                 figi=fig
<                 axs=ax
<             if incl_perustulo:
<                 axs.stackplot(palkka,margverot,margasumistuki,margtoimeentulotuki,margansiopvraha,margpvhoito,margelake,margopintotuki,margperustulo,
<                     labels=(self.labels['taxes'],self.labels['asumistuki'],self.labels['toimeentulotuki'],self.labels['tyottomyysturva'],self.labels['paivahoito'],self.labels['elake'],self.labels['opintotuki'],self.labels['perustulo']),
<                     colors=pal)
<             else:
<                 if incl_elake:
<                     axs.stackplot(palkka,margverot,margasumistuki,margtoimeentulotuki,margansiopvraha,margpvhoito,margelake,margopintotuki,
<                         labels=(self.labels['taxes'],self.labels['asumistuki'],self.labels['toimeentulotuki'],self.labels['tyottomyysturva'],self.labels['paivahoito'],self.labels['elake'],self.labels['opintotuki']),
<                         colors=pal)
<                 else:
<                     axs.stackplot(palkka,margverot,margasumistuki,margtoimeentulotuki,margansiopvraha,margpvhoito,margopintotuki,
<                         labels=(self.labels['taxes'],self.labels['asumistuki'],self.labels['toimeentulotuki'],self.labels['tyottomyysturva'],self.labels['paivahoito'],self.labels['opintotuki']),
<                         colors=pal)
---
>             minimi=self.perustulo() #27.86*25
>             sotumaksu=0.0448
>             taite1=37_861/12  
>             taite2=58_252/12  
2101,2327c1085
<             axs.set_xlabel(self.labels['wage'])
<             axs.set_ylabel(self.labels['effective'])
<             axs.grid(True,color='lightgray')
<             axs.set_xlim(0, max_salary)
<             axs.set_ylim(0, 120)
<             if selite:
<                 #axs.legend(loc='upper right')
<                 handles, labels = axs.get_legend_handles_labels()
<                 lgd=axs.legend(handles[::-1], labels[::-1], loc='upper right')
<             if figname is not None:
<                 plt.savefig(figname+'_eff.png')
<             plt.show()
<         
<         if plot_netto and plottaa:
<             if fig is None:
<                 figi,axs = plt.subplots()
<             else:
<                 figi=fig
<                 axs=ax
<             sns.set()
<             if incl_perustulo:
<                 axs.stackplot(palkka,nettotulot,asumistuki,toimeentulotuki,ansiopvraha,lapsilisa,elake,opintotuki,perustulo,
<                     labels=('Nettopalkka',self.labels['asumistuki'],self.labels['toimeentulotuki'],self.labels['tyottomyysturva'],'Lapsilisä',self.labels['elake'],self.labels['opintotuki'],self.labels['perustulo']),
<                     colors=pal)
<             else:
<                 if incl_elake:
<                     axs.stackplot(palkka,nettotulot,asumistuki,toimeentulotuki,ansiopvraha,lapsilisa,elake,opintotuki,
<                         labels=('Nettopalkka',self.labels['asumistuki'],self.labels['toimeentulotuki'],self.labels['tyottomyysturva'],'Lapsilisä',self.labels['elake'],self.labels['opintotuki']),
<                         colors=pal)
<                 else:
<                     axs.stackplot(palkka,nettotulot,asumistuki,toimeentulotuki,ansiopvraha,lapsilisa,opintotuki,
<                         labels=('Nettopalkka',self.labels['asumistuki'],self.labels['toimeentulotuki'],self.labels['tyottomyysturva'],'Lapsilisä',self.labels['opintotuki']),
<                         colors=pal)
<             
<             #axs.plot(netto)
<             axs.set_xlabel(self.labels['wage'])
<             axs.set_ylabel(self.labels['net income'])
<             axs.grid(True,color='lightgray')
<             axs.set_xlim(0, max_salary)
<             if selite:        
<                 #axs.legend(loc='lower right')
<                 handles, labels = axs.get_legend_handles_labels()
<                 lgd=axs.legend(handles[::-1], labels[::-1], loc='lower right')
<                 
<             if figname is not None:
<                 plt.savefig(figname+'_netto.png')
<             plt.show()
< 
<         if plot_tva and plottaa:
<             if fig is None:
<                 figi,axs = plt.subplots()
<             else:
<                 figi=fig
<                 axs=ax
<             sns.set()
<             if incl_perustulo:
<                 axs.stackplot(palkka,tva_verot,tva_asumistuki,tva_toimeentulotuki,tva_ansiopvraha,tva_pvhoito,tva_elake,tva_opintotuki,tva_perustulo,
<                     labels=(self.labels['taxes'],self.labels['asumistuki'],self.labels['toimeentulotuki'],self.labels['tyottomyysturva'],self.labels['paivahoito'],self.labels['elake'],self.labels['opintotuki'],self.labels['perustulo']),
<                     colors=pal)
<             else:
<                 if incl_elake:
<                     axs.stackplot(palkka,tva_verot,tva_asumistuki,tva_toimeentulotuki,tva_ansiopvraha,tva_pvhoito,tva_elake,tva_opintotuki,
<                         labels=(self.labels['taxes'],self.labels['asumistuki'],self.labels['toimeentulotuki'],self.labels['tyottomyysturva'],self.labels['paivahoito'],self.labels['elake'],self.labels['opintotuki']),
<                         colors=pal)
<                 else:
<                     axs.stackplot(palkka,tva_verot,tva_asumistuki,tva_toimeentulotuki,tva_ansiopvraha,tva_pvhoito,tva_opintotuki,
<                         labels=(self.labels['taxes'],self.labels['asumistuki'],self.labels['toimeentulotuki'],self.labels['tyottomyysturva'],self.labels['paivahoito'],self.labels['opintotuki']),
<                         colors=pal)
< 
<             axs.plot(tva,label='Vaihtoehto')
<             #axs.plot(tva_yht,label='Vaihtoehto2')
<             #axs.plot(tva_yht2,label='Vaihtoehto3')
<             axs.set_xlabel(self.labels['wage'])
<             axs.set_ylabel('Työllistymisveroaste (%)')
<             axs.grid(True,color='lightgray')
<             axs.set_xlim(0, max_salary)
<             axs.set_ylim(0, 120)
<             if selite:
<                 #axs.legend(loc='upper right')
<                 handles, labels = axs.get_legend_handles_labels()
<                 lgd=axs.legend(handles[::-1], labels[::-1], loc='upper right')
<                 
<             if figname is not None:
<                 plt.savefig(figname+'_tva.png')
<             plt.show()
<                
<         if ret: 
<             return netto,eff,tva   
< 
<     def laske_ja_plottaa_veromarginaalit(self,p=None,min_salary=0,max_salary=6000,basenetto=None,baseeff=None,basetva=None,dt=100,plottaa=True,otsikko="Vaihtoehto",otsikkobase="Perustapaus",selite=True):
<         palkka=np.zeros(max_salary+1)
<         margtyotvakmaksu=np.zeros(max_salary+1)        
<         margsairausvakuutus=np.zeros(max_salary+1)
<         margptel=np.zeros(max_salary+1)
<         margtyotulovah=np.zeros(max_salary+1)
<         margansiotulovah=np.zeros(max_salary+1)        
<         margverot=np.zeros(max_salary+1)        
<         margkunnallisvero=np.zeros(max_salary+1)        
<         margvaltionvero=np.zeros(max_salary+1)  
<         margperusvahennys=np.zeros(max_salary+1)  
<         margpuolisonverot=np.zeros(max_salary+1)  
<         tyotvakmaksu=np.zeros(max_salary+1)        
<         sairausvakuutus=np.zeros(max_salary+1)
<         ptel=np.zeros(max_salary+1)
<         tyotulovah=np.zeros(max_salary+1)
<         ansiotulovah=np.zeros(max_salary+1)        
<         verot=np.zeros(max_salary+1)        
<         kunnallisvero=np.zeros(max_salary+1)        
<         valtionvero=np.zeros(max_salary+1)  
<         perusvahennys=np.zeros(max_salary+1)  
<         puolisonverot=np.zeros(max_salary+1)  
<         
<         if p is None:
<             p=self.get_default_parameter()
<             
<         p2=p.copy()
< 
<         p2['t']=0 # palkka
<         n0,q0=self.laske_tulot(p2)
<         for t in range(0,max_salary+1):
<             p2['t']=t # palkka
<             n1,q1=self.laske_tulot(p2)
<             p2['t']=t+dt # palkka
<             n2,q2=self.laske_tulot(p2)
<             palkka[t]=t
<             
<             tulot,marg=self.laske_marginaalit(q1,q2,dt)
<             margvaltionvero[t]=marg['valtionvero']
<             margkunnallisvero[t]=marg['kunnallisvero']
<             margverot[t]=marg['ansioverot']
<             margansiotulovah[t]=marg['ansiotulovah']
<             margtyotulovah[t]=marg['tyotulovahennys']
<             margperusvahennys[t]=marg['perusvahennys']
<             margptel[t]=marg['ptel']
<             margsairausvakuutus[t]=marg['sairausvakuutus']
<             margtyotvakmaksu[t]=marg['tyotvakmaksu']
<             margpuolisonverot[t]=marg['puoliso_verot']
<             tyotvakmaksu[t]=q1['tyotvakmaksu']
<             sairausvakuutus[t]=q1['sairausvakuutus']
<             ptel[t]=q1['ptel']
<             kunnallisvero[t]=q1['kunnallisvero']
<             valtionvero[t]=q1['valtionvero']
<             puolisonverot[t]=0 #q1['puolisoverot']
<                             
<         fig,axs = plt.subplots()
<         axs.stackplot(palkka,margvaltionvero,margkunnallisvero,margptel,margsairausvakuutus,margtyotvakmaksu,margpuolisonverot,
<             #labels=('Valtionvero','Kunnallisvero','PTEL','sairausvakuutus','työttömyysvakuutusmaksu','puolison verot'))
<             labels=('State tax','Municipal tax','Employee pension premium','sairausvakuutus','työttömyysvakuutusmaksu','puolison verot'))
<         axs.plot(margverot,label='Yht')
<         #axs.plot(margyht,label='Vaihtoehto2')
<         #axs.plot(margyht2,label='Vaihtoehto3')
<         axs.set_xlabel(self.labels['wage'])
<         axs.set_ylabel(self.labels['effective'])
<         axs.grid(True)
<         axs.set_xlim(0, max_salary)
<         axs.set_ylim(-50, 120)
<         if selite:
<             axs.legend(loc='upper left')
<         plt.show()
<         
<         fig,axs = plt.subplots()
<         axs.stackplot(palkka,tyotvakmaksu,sairausvakuutus,ptel,kunnallisvero,valtionvero,puolisonverot,
<             labels=('tyotvakmaksu','sairausvakuutus','ptel','kunnallisvero','valtionvero','puolisonverot'))
<         #axs.plot(netto)
<         axs.set_xlabel(self.labels['wage'])
<         axs.set_ylabel('Verot yhteensä (e/kk)')
<         axs.grid(True)
<         axs.set_xlim(0, max_salary)
<         if selite:        
<             axs.legend(loc='lower right')
<         plt.show()
< 
<     def laske_ja_plottaa_hila(self,min_salary=0,max_salary=6000,type='eff',dt=100,maxn=None,dire=None):
<         if maxn is None:
<             maxn=36
<         fig,axs = plt.subplots(int(maxn/5),5,sharex=True,sharey=True)
<         for k in range(1,maxn):
<             x=(k-1) % 5
<             y=int(np.floor((k-1)/5))
<             #ax=plt.subplot(10,3,k)
<             p,_=perheparametrit(k)
<             self.lp_marginaalit_apu(axs[y,x],otsikko='Tapaus '+str(k),p=p,min_salary=min_salary,max_salary=max_salary,type=type,dt=dt)
< 
<         if dire is not None:
<             fig.savefig(dire+'multiple_'+type+'.eps',bbox_inches='tight')
<             fig.savefig(dire+'multiple_'+type+'.png',bbox_inches='tight')
< 
<         plt.show()
< 
<     def lp_marginaalit_apu(self,axs,otsikko='',p=None,min_salary=0,max_salary=6000,type='eff',dt=100,selite=False,include_perustulo=False):
<         netto=np.zeros(max_salary+1)
<         palkka=np.zeros(max_salary+1)
<         tva=np.zeros(max_salary+1)
<         eff=np.zeros(max_salary+1)
<         elake=np.zeros(max_salary+1)
<         asumistuki=np.zeros(max_salary+1)
<         toimeentulotuki=np.zeros(max_salary+1)
<         kokoelake=np.zeros(max_salary+1)
<         ansiopvraha=np.zeros(max_salary+1)
<         nettotulot=np.zeros(max_salary+1)
<         lapsilisa=np.zeros(max_salary+1)
<         opintotuki=np.zeros(max_salary+1)
<         perustulo=np.zeros(max_salary+1)
<         elatustuki=np.zeros(max_salary+1)
<         margasumistuki=np.zeros(max_salary+1)
<         margtoimeentulotuki=np.zeros(max_salary+1)
<         margansiopvraha=np.zeros(max_salary+1)
<         margperustulo=np.zeros(max_salary+1)    
<         margverot=np.zeros(max_salary+1)   
<         margelake=np.zeros(max_salary+1)   
<         margpvhoito=np.zeros(max_salary+1)        
<         margyht=np.zeros(max_salary+1)        
<         margyht2=np.zeros(max_salary+1)        
<         tva_asumistuki=np.zeros(max_salary+1)
<         tva_elake=np.zeros(max_salary+1)
<         tva_toimeentulotuki=np.zeros(max_salary+1)
<         tva_ansiopvraha=np.zeros(max_salary+1)
<         tva_verot=np.zeros(max_salary+1)        
<         tva_pvhoito=np.zeros(max_salary+1)        
<         tva_yht=np.zeros(max_salary+1)        
<         tva_yht2=np.zeros(max_salary+1)        
<         tva_perustulo=np.zeros(max_salary+1)        
< 
<         if p is None:
<             p=self.get_default_parameter()
<             
<         p2=p.copy()
---
>         raha=max(minimi,0.7*min(taite1,vakiintunutpalkka)+0.4*max(min(taite2,vakiintunutpalkka)-taite1,0)+0.4*max(vakiintunutpalkka-taite2,0))
2329,2537c1087
<         p2['t']=0 # palkka
<         n0,q0=self.laske_tulot(p2) #,elake=0)
<         for t in range(0,max_salary+1):
<             p2['t']=t # palkka
<             n1,q1=self.laske_tulot(p2) #,,elake=0)
<             p2['t']=t+dt # palkka
<             n2,q2=self.laske_tulot(p2) #,,elake=0)
<             tulot,marg=self.laske_marginaalit(q1,q2,dt)
<             netto[t]=n1
<             palkka[t]=t
<             margasumistuki[t]=marg['asumistuki']
<             margtoimeentulotuki[t]=marg['toimtuki']
<             margverot[t]=marg['verot']
<             margansiopvraha[t]=marg['ansiopvraha']
<             margpvhoito[t]=marg['pvhoito']
<             margelake[t]=marg['pvhoito']
<             margyht[t]=marg['marginaali']
<             margyht2[t]=marg['marginaaliveroprosentti']
<             margperustulo[t]=marg['perustulo']
<             perustulo[t]=q1['perustulo_nettonetto']+q1['puoliso_perustulo_nettonetto']
<             asumistuki[t]=q1['asumistuki']
<             elake[t]=q1['kokoelake_netto']
<             toimeentulotuki[t]=q1['toimtuki']
<             ansiopvraha[t]=q1['ansiopvraha_nettonetto']+q1['puoliso_ansiopvraha_nettonetto']
<             lapsilisa[t]=q1['lapsilisa']
<             opintotuki[t]=q1['opintotuki']
<             nettotulot[t]=tulot['tulotnetto']
<             if type=='tva':
<                 tulot2,tvat=self.laske_marginaalit(q0,q1,t,laske_tyollistymisveroaste=1)
<                 tva_asumistuki[t]=tvat['asumistuki']
<                 tva_perustulo[t]=tvat['perustulo']
<                 tva_toimeentulotuki[t]=tvat['toimtuki']
<                 tva_verot[t]=tvat['verot']
<                 tva_ansiopvraha[t]=tvat['ansiopvraha']
<                 tva_pvhoito[t]=tvat['pvhoito']
<                 tva_yht[t]=tvat['marginaali']
<                 tva_yht2[t]=tvat['marginaaliveroprosentti']
< 
<             eff[t]=(1-(n2-n1)/dt)*100
<             if t>0:
<                 tva[t]=(1-(n1-n0)/t)*100
<             else:
<                 tva[t]=0
<                 
<         if type=='eff':
<             #fig,axs = plt.subplots()
<             if include_perustulo:
<                 axs.stackplot(palkka,margverot,margasumistuki,margtoimeentulotuki,margansiopvraha,margpvhoito,margelake,margperustulo,
<                     labels=(self.labels['taxes'],self.labels['asumistuki'],self.labels['toimeentulotuki'],self.labels['tyottomyysturva'],self.labels['paivahoito'],self.labels['elake'],self.labels['perustulo']))
<             else:
<                 axs.stackplot(palkka,margverot,margasumistuki,margtoimeentulotuki,margansiopvraha,margpvhoito,margelake,
<                     labels=(self.labels['taxes'],self.labels['asumistuki'],self.labels['toimeentulotuki'],self.labels['tyottomyysturva'],self.labels['paivahoito'],self.labels['elake']))
<             self.labels['valtionvero']='Valtionvero'
<             self.labels['kunnallisvero']='Kunnallisvero'
<             self.labels['telp']='TEL-P'
<             self.labels['sairausvakuutus']='sairausvakuutus'
<             self.labels['työttömyysvakuutusmaksu']='työttömyysvakuutusmaksu'
<             self.labels['puolison verot']='puolison verot'
<             self.labels['taxes']='verot'
<             self.labels['asumistuki']='asumistuki'
<             self.labels['toimeentulotuki']='toimeentulotuki'
<             self.labels['tyottomyysturva']='työttömyystuki'
<             self.labels['paivahoito']='päivähoito'
<             self.labels['elake']='eläke'
<             
<             axs.plot(eff)
<             #axs.plot(margyht,label='Vaihtoehto2')
<             #axs.plot(margyht2,label='Vaihtoehto3')
<             axs.set_xlabel(self.labels['wage'])
<             axs.set_ylabel(self.labels['effective'])
<             axs.grid(True)
<             axs.title.set_text(otsikko)
<             axs.set_xlim(0, max_salary)
<             axs.set_ylim(0, 120)
<             if selite:
<                 axs.legend(loc='upper right')
<             #plt.show()
<         elif type=='tva':
<             #fig,axs = plt.subplots()
<             if include_perustulo:
<                 axs.stackplot(palkka,tva_verot,tva_asumistuki,tva_toimeentulotuki,tva_ansiopvraha,tva_pvhoito,tva_elake,tva_perustulo,
<                     labels=(self.labels['taxes'],self.labels['asumistuki'],self.labels['toimeentulotuki'],self.labels['tyottomyysturva'],self.labels['paivahoito'],self.labels['elake'],self.labels['perustulo']))
<             else:
<                 axs.stackplot(palkka,tva_verot,tva_asumistuki,tva_toimeentulotuki,tva_ansiopvraha,tva_pvhoito,tva_elake,
<                     labels=(self.labels['taxes'],self.labels['asumistuki'],self.labels['toimeentulotuki'],self.labels['tyottomyysturva'],self.labels['paivahoito'],self.labels['elake']))
<             
<             axs.title.set_text(otsikko)
<             if self.language=='Finnish':
<                 axs.plot(tva,label='Vaihtoehto')
<                 #axs.plot(tva_yht,label='Vaihtoehto2')
<                 #axs.plot(tva_yht2,label='Vaihtoehto3')
<                 axs.set_xlabel(self.labels['wage'])
<                 axs.set_ylabel('Työllistymisveroaste (%)')
<             else:
<                 axs.plot(tva,label='Vaihtoehto')
<                 #axs.plot(tva_yht,label='Vaihtoehto2')
<                 #axs.plot(tva_yht2,label='Vaihtoehto3')
<                 axs.set_xlabel('Wage (e/m)')
<                 axs.set_ylabel('Työllistymisveroaste (%)')
<             
<             axs.grid(True)
<             axs.set_xlim(0, max_salary)
<             axs.set_ylim(0, 120)
<             if selite:
<                 axs.legend(loc='upper right')
<         else:
<             if include_perustulo:
<                 axs.stackplot(palkka,asumistuki,toimeentulotuki,ansiopvraha,nettotulot,lapsilisa,elake,opintotuki,perustulo,
<                     labels=(self.labels['asumistuki'],self.labels['toimeentulotuki'],self.labels['tyottomyysturva'],self.labels['pure wage'],'Lapsilisä',self.labels['elake'],self.labels['opintotuki'],self.labels['perustulo']))
<             else:
<                 axs.stackplot(palkka,asumistuki,toimeentulotuki,ansiopvraha,nettotulot,lapsilisa,elake,opintotuki,
<                     labels=(self.labels['asumistuki'],self.labels['toimeentulotuki'],self.labels['tyottomyysturva'],self.labels['pure wage'],'Lapsilisä',self.labels['elake'],self.labels['opintotuki']))
<                             
<             axs.plot(netto)
<             axs.title.set_text(otsikko)
<             axs.set_xlabel(self.labels['wage'])
<             axs.set_ylabel(self.labels['net income'])
<             
<             axs.grid(True)
<             axs.set_xlim(0, max_salary)
<             if selite:
<                 axs.legend(loc='lower right')
<                 
<         #return netto,eff,tva        
<         
<     # valitaan oikeat funktiot vuoden mukaan
<     def set_year(self,vuosi):
<         '''
<         korvataan etuusfunktiot oikeiden vuosien etuusfunktioilla
<         '''
<         if vuosi==2019:
<             self.laske_kansanelake=self.laske_kansanelake2019
<             self.laske_takuuelake=self.laske_takuuelake2019
<             self.aitiysraha=self.aitiysraha2019
<             self.isyysraha=self.isyysraha_perus
<             self.peruspaivaraha=self.peruspaivaraha2019
<             self.veroparam=self.veroparam2019          
<             self.valtionvero_asteikko=self.valtionvero_asteikko_2019
<             self.laske_ylevero=self.laske_ylevero2019
<             self.elaketulovahennys=self.elaketulovahennys2019
<             self.tyotulovahennys=self.tyotulovahennys2019
<             self.ansiotulovahennys=self.ansiotulovahennys2019
<             self.perusvahennys=self.perusvahennys2019
<             self.lapsilisa=self.lapsilisa2019
<             self.asumistuki=self.asumistuki2019
<             self.kotihoidontuki=self.kotihoidontuki2019
<             self.paivahoitomenot=self.paivahoitomenot2019
<             self.sairauspaivaraha=self.sairauspaivaraha2019
<             self.toimeentulotuki_param=self.toimeentulotuki_param2019
<         elif vuosi==2020:
<             self.laske_kansanelake=self.laske_kansanelake2020
<             self.laske_takuuelake=self.laske_takuuelake2020
<             self.aitiysraha=self.aitiysraha2020
<             self.isyysraha=self.isyysraha_perus
<             self.peruspaivaraha=self.peruspaivaraha2020
<             self.valtionvero_asteikko=self.valtionvero_asteikko_2020
<             self.laske_ylevero=self.laske_ylevero2020
<             self.elaketulovahennys=self.elaketulovahennys2020
<             self.tyotulovahennys=self.tyotulovahennys2020
<             self.perusvahennys=self.perusvahennys2020
<             self.ansiotulovahennys=self.ansiotulovahennys2020
<             self.veroparam=self.veroparam2020
<             self.lapsilisa=self.lapsilisa2020
<             self.asumistuki=self.asumistuki2020
<             self.kotihoidontuki=self.kotihoidontuki2020
<             self.paivahoitomenot=self.paivahoitomenot2020
<             self.sairauspaivaraha=self.sairauspaivaraha2020
<             self.toimeentulotuki_param=self.toimeentulotuki_param2020
<         elif vuosi==2021:
<             self.laske_kansanelake=self.laske_kansanelake2021
<             self.laske_takuuelake=self.laske_takuuelake2021
<             self.aitiysraha=self.aitiysraha2021
<             self.isyysraha=self.isyysraha_perus
<             self.peruspaivaraha=self.peruspaivaraha2021
<             self.valtionvero_asteikko=self.valtionvero_asteikko_2021
<             self.laske_ylevero=self.laske_ylevero2021
<             self.elaketulovahennys=self.elaketulovahennys2021
<             self.tyotulovahennys=self.tyotulovahennys2021
<             self.perusvahennys=self.perusvahennys2021
<             self.ansiotulovahennys=self.ansiotulovahennys2021
<             self.veroparam=self.veroparam2021
<             self.lapsilisa=self.lapsilisa2021
<             self.asumistuki=self.asumistuki2021
<             self.kotihoidontuki=self.kotihoidontuki2021
<             self.paivahoitomenot=self.paivahoitomenot2021
<             self.sairauspaivaraha=self.sairauspaivaraha2021
<             self.toimeentulotuki_param=self.toimeentulotuki_param2021
<         elif vuosi==2018:
<             self.laske_kansanelake=self.laske_kansanelake2018
<             self.laske_takuuelake=self.laske_takuuelake2018
<             self.aitiysraha=self.aitiysraha2019
<             self.isyysraha=self.isyysraha_perus
<             self.peruspaivaraha=self.peruspaivaraha2018
<             self.veroparam=self.veroparam2018            
<             self.elaketulovahennys=self.elaketulovahennys2018
<             self.tyotulovahennys=self.tyotulovahennys2018
<             self.perusvahennys=self.perusvahennys2018
<             self.ansiotulovahennys=self.ansiotulovahennys2018
<             self.valtionvero_asteikko=self.valtionvero_asteikko_2018
<             self.laske_ylevero=self.laske_ylevero2018
<             self.lapsilisa=self.lapsilisa2018
<             self.asumistuki=self.asumistuki2018
<             self.kotihoidontuki=self.kotihoidontuki2018
<             self.paivahoitomenot=self.paivahoitomenot2018
<             self.sairauspaivaraha=self.sairauspaivaraha2018
<             self.toimeentulotuki_param=self.toimeentulotuki_param2018            
<         else:
<             print('Vuoden {v} aineisto puuttuu'.format(v=vuosi))
<     
---
>         return raha        
\ No newline at end of file
