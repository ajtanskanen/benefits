5c5
<     implements universal basic income on top of benefits module
---
>     implements social security benefits and taxation in the Finnish social security schemes
16d15
< from .benefits import Benefits
18c17
< class BasicIncomeBenefits(Benefits):
---
> class Benefits():
24c23
<         AT
---
>         Antti J. Tanskanen
41,45c40
<         self.include_perustulo=True
<         self.perustulomalli='Sotu'
<         
<         self.osittainen_perustulo=True
<         self.perustulo_korvaa_toimeentulotuen=False
---
>         self.include_perustulo=False
58,59c53,54
<                     self.language=value        
<             elif key=='perustulomalli':
---
>                     self.language=value
>             elif key=='additional_income_tax':
61,62c56,57
<                     self.perustulomalli=value
<             elif key=='osittainen_perustulo':
---
>                     self.additional_income_tax=value
>             elif key=='additional_income_tax_high':
64,65c59,60
<                     self.osittainen_perustulo=value
<             elif key=='valtionverotaso':
---
>                     self.additional_income_tax_high=value
>             elif key=='additional_tyel_premium':
67,68c62,63
<                     self.valtionverotaso=value
<             elif key=='perustulo_asetettava':
---
>                     self.additional_tyel_premium=value
>             elif key=='additional_kunnallisvero':
70,71c65,66
<                     self.perustulo_asetettava=value
<             elif key=='perustulo_kela_asetettava':
---
>                     self.additional_kunnallisvero=value
>             elif key=='additional_vat':
73,75c68,69
<                     self.perustulo_asetettava=value
<                     self.valtionverotaso=self.Kela_kustannusneutraali_veroaste(value)
<             elif key=='perustulo_korvaa_toimeentulotuen':
---
>                     self.additional_vat=value
>             elif key=='vaihtuva_tyelmaksu':
77,82c71,78
<                     self.perustulo_korvaa_toimeentulotuen=value
<                     
<         print(f'UBI-model {self.perustulomalli}\nPartial UBI {self.osittainen_perustulo}\nperustulo_korvaa_toimeentulotuen {self.perustulo_korvaa_toimeentulotuen}')
<                     
<         super().__init__(**kwargs)
<         self.setup_basic_income()
---
>                     self.vaihtuva_tyelmaksu=value
>             elif key=='tyel_perusvuosi':
>                 if value is not None:
>                     self.tyel_perusvuosi=value                    
>             elif key=='extra_ppr':
>                 if value is not None:
>                     self.use_extra_ppr=True
>                     self.extra_ppr_factor+=value
91,105d86
<             
<         
<     def set_year(self,vuosi):
<         super().set_year(vuosi)
<         self.setup_basic_income()
<         
<     def veroparam2018_perustulokokeilu(self):
<         super().veroparam2018()
< 
<     def veroparam2018_perustulo(self):
<         super().veroparam2018()
<         self.kunnallisvero_pros=0.0    
<         
<     def veroparam2018_perustulo_sotu(self):
<         super().veroparam2018()
107,274c88,91
<     def veroparam2019_perustulokokeilu(self):
<         super().veroparam2018()
< 
<     def veroparam2019_perustulo(self):
<         super().veroparam2018()
<         self.kunnallisvero_pros=0.0    
< 
<     def veroparam2020_perustulokokeilu(self):
<         super().veroparam2018()
< 
<     def veroparam2020_perustulo(self):
<         super().veroparam2018()
<         self.kunnallisvero_pros=0.0    
< 
<     def veroparam2021_perustulokokeilu(self):
<         super().veroparam2018()
< 
<     def veroparam2021_perustulo(self):
<         super().veroparam2018()
<         self.kunnallisvero_pros=0.0    
< 
<     def veroparam2022_perustulokokeilu(self):
<         super().veroparam2018()
< 
<     def veroparam2022_perustulo(self):
<         super().veroparam2018()
<         self.kunnallisvero_pros=0.0    
< 
<     def veroparam2022_perustulo_sotu(self):
<         super().veroparam2022()
< 
<     def setup_basic_income(self):
<         self.nyky_soviteltu_peruspaivaraha=super().soviteltu_peruspaivaraha
<         self.laske_perustulovero=self.laske_perustulovero_perus
<         if self.year==2018:
<             self.veroparam2018=self.veroparam2018_perustulo
<             self.veroparam=self.veroparam2018_perustulo
<             self.nykyperuspaivaraha=super().peruspaivaraha2018
<         elif self.year==2019:
<             self.veroparam2018=self.veroparam2019_perustulo
<             self.veroparam=self.veroparam2019_perustulo
<             self.nykyperuspaivaraha=super().peruspaivaraha2019
<         elif self.year==2020:
<             self.veroparam2018=self.veroparam2020_perustulo
<             self.veroparam=self.veroparam2020_perustulo
<             self.nykyperuspaivaraha=super().peruspaivaraha2020
<         elif self.year==2021:
<             self.veroparam2018=self.veroparam2021_perustulo
<             self.veroparam=self.veroparam2021_perustulo
<             self.nykyperuspaivaraha=super().peruspaivaraha2021
<         elif self.year==2022:
<             self.veroparam2018=self.veroparam202_perustulo
<             self.veroparam=self.veroparam2022_perustulo
<             self.nykyperuspaivaraha=super().peruspaivaraha2022
<         elif self.year==2023:
<             self.veroparam2018=self.veroparam2023_perustulo
<             self.veroparam=self.veroparam2023_perustulo
<             self.nykyperuspaivaraha=super().peruspaivaraha2023
<     
<         if self.perustulomalli=='perustulokokeilu':
<             # Kela-malli
<             self.perustulo=self.laske_perustulo_Kelamalli
<             self.asumistuen_suojaosa=600
<             self.max_tyotulovahennys=1540
<             self.max_perusvahennys=3020
<             self.max_ansiotulovahennys=3570
<             self.valtionvero_asteikko=self.valtionvero_asteikko_2018
<             self.verotus=super().verotus
<             self.veroparam2018=self.veroparam2018_perustulokokeilu
<             self.veroparam=self.veroparam2018            
<             # ei muutosta verotukseen, ei aktiivimallia toteutettuna
<         elif self.perustulomalli=='Kela':
<             # Kela-malli
<             self.perustulo=self.laske_perustulo_Kelamalli
<             self.asumistuen_suojaosa=600
<             self.ansiotulovahennys=self.ansiotulovahennys_perustulo_sotu
<             self.tyotulovahennys=self.tyotulovahennys_perustulo_sotu
<             self.veroparam2018=self.veroparam2018_perustulo
<             self.veroparam=self.veroparam2018            
<             self.valtionvero_asteikko=self.valtionvero_asteikko_perustulo_Kela
<         elif self.perustulomalli=='BI':
<             # Artikkelin BI-malli
<             self.perustulo=self.laske_perustulo_BI
<             self.asumistuen_suojaosa=600
<             self.ansiotulovahennys=self.ansiotulovahennys_perustulo_sotu
<             self.tyotulovahennys=self.tyotulovahennys_perustulo_sotu
<             self.veroparam2018=self.veroparam2018_perustulo
<             self.veroparam=self.veroparam2018            
<             self.valtionvero_asteikko=self.valtionvero_asteikko_perustulo_BI
<         elif self.perustulomalli in set(['vasemmistoliitto','Vasemmistoliitto']):        
<             # Vasemmistoliitto
<             self.perustulo=self.laske_perustulo_vasemmistoliitto
<             self.asumistuen_suojaosa=600
<             self.ansiotulovahennys=self.ansiotulovahennys_perustulo_sotu
<             self.tyotulovahennys=self.tyotulovahennys_perustulo_sotu
<             self.veroparam2018=self.veroparam2018_perustulo
<             self.veroparam=self.veroparam2018            
<             self.max_ansiotulovahennys=0
<             self.valtionvero_asteikko=self.valtionvero_asteikko_perustulo_vasemmistoliitto
<         elif self.perustulomalli in set(['sotu','Sotu','SOTU']):        
<             # Vasemmistoliitto
<             self.perustulo=self.laske_perustulo_sotu
<             self.max_tyotulovahennys=0
<             self.ansiotulovahennys=self.ansiotulovahennys_perustulo_sotu
<             self.tyotulovahennys=self.tyotulovahennys_perustulo_sotu
<             self.veroparam2022=self.veroparam2022_perustulo_sotu
<             self.veroparam=self.veroparam2022            
<             self.laske_perustulovero=self.laske_perustulovero_sotu
<             self.valtionvero_asteikko=self.valtionvero_asteikko_2022 # valtionvero_asteikko_2018 # valtionvero_asteikko_perustulo_sotu
<         elif self.perustulomalli in set(['sotu_matala','Sotu_matala','SOTU_matala','sotu matala','Sotu matala','SOTU matala']):        
<             # Vasemmistoliitto
<             self.perustulo=self.laske_perustulo_sotu_matala
<             self.ansiotulovahennys=self.ansiotulovahennys_perustulo_sotu
<             self.tyotulovahennys=self.tyotulovahennys_perustulo_sotu
<             self.veroparam2022=self.veroparam2022_perustulo_sotu
<             self.veroparam=self.veroparam2022         
<             self.laske_perustulovero=self.laske_perustulovero_sotu_matala
<             self.valtionvero_asteikko=self.valtionvero_asteikko_2022
<         elif self.perustulomalli in set (['asetettava']):
<             # asetettava
<             self.perustulo=self.laske_perustulo_asetettava
<             self.asumistuen_suojaosa=600
<             #self.perustulo_asetettava=
<             self.ansiotulovahennys=self.ansiotulovahennys_perustulo_sotu
<             self.tyotulovahennys=self.tyotulovahennys_perustulo_sotu
<             self.veroparam2018=self.veroparam2018_perustulo
<             self.veroparam=self.veroparam2018            
<             self.valtionvero_asteikko=self.valtionvero_asteikko_perustulo_asetettava
<             self.peruspaivaraha=self.peruspaivaraha_bi
<         elif self.perustulomalli in set (['kela_asetettava']):
<             # asetettava
<             self.perustulo=self.laske_perustulo_asetettava
<             self.asumistuen_suojaosa=600
<             #self.perustulo_asetettava=
<             self.ansiotulovahennys=self.ansiotulovahennys_perustulo_sotu
<             self.tyotulovahennys=self.tyotulovahennys_perustulo_sotu
<             self.veroparam2018=self.veroparam2018_perustulo
<             self.veroparam=self.veroparam2018            
<             self.valtionvero_asteikko=self.valtionvero_asteikko_perustulo_asetettava
<             self.peruspaivaraha=self.peruspaivaraha_bi
<         elif self.perustulomalli in set (['vihreat','Vihreät','vihreät','Vihreat']):
<             # Vihreiden malli
<             self.perustulo=self.laske_perustulo_vihreat
<             self.asumistuen_suojaosa=600
<             self.ansiotulovahennys=self.ansiotulovahennys_perustulo_sotu
<             self.tyotulovahennys=self.tyotulovahennys_perustulo_sotu
<             self.veroparam2018=self.veroparam2018_perustulo
<             self.veroparam=self.veroparam2018            
<             self.valtionvero_asteikko=self.valtionvero_asteikko_perustulo_vihreat
<             self.peruspaivaraha=self.peruspaivaraha_bi
<         elif self.perustulomalli=='tonni':        
<             # Tonnin täysi perustulo
<             self.perustulo=self.laske_perustulo_tonni
<             self.asumistuen_suojaosa=600
<             self.ansiotulovahennys=self.ansiotulovahennys_perustulo_sotu
<             self.tyotulovahennys=self.tyotulovahennys_perustulo_sotu
<             self.veroparam2018=self.veroparam2018_perustulo
<             self.veroparam=self.veroparam2018            
<             self.valtionvero_asteikko=self.valtionvero_asteikko_perustulo_tonni
<             self.peruspaivaraha=self.peruspaivaraha_bi
<         elif self.perustulomalli=='puolitoista':        
<             # Tonnin täysi perustulo
<             self.perustulo=self.laske_perustulo_puolitoista
<             self.asumistuen_suojaosa=600
<             self.ansiotulovahennys=self.ansiotulovahennys_perustulo_sotu
<             self.tyotulovahennys=self.tyotulovahennys_perustulo_sotu
<             self.valtionvero_asteikko=self.valtionvero_asteikko_perustulo_1500
<             self.peruspaivaraha=self.peruspaivaraha_bi
---
>     def explain(self,p=None):
>         #self.tee_selite()
>         if p is None:
>             print('Ei parametrejä')
276,279c93,97
<             print('basic_income: unknown basic income model',self.perustulomalli)
<         
<     def laske_perustulo_Kelamalli(self):
<         return 560.0
---
>             selite=tee_selite(p)
>             print(selite)
>             
>     def laske_vaihtuva_tyoelakemaksu(self,ika : int):
>         vuosi=int(self.floor(self.tyel_perusvuosi+ika)) # alkuvuonna 18
281c99,165
<     def laske_perustulo_BI(self):
---
>         # prosenttia palkoista, vuodesta 2017 alkaen, jatkettu päätepisteen tasolla vuoden 2085 jälkeen
>         self.tyontekijan_maksu=self.data_ptel[vuosi]
>         if vuosi<2017:
>             self.tyontekijan_maksu_52=self.tyontekijan_maksu*19/15
>         else:
>             self.tyontekijan_maksu_52=self.tyontekijan_maksu+0.015
>             
>         self.koko_tyel_maksu=self.data_tyel_kokomaksu[vuosi]
>         self.tyonantajan_tyel=self.koko_tyel_maksu-self.tyontekijan_maksu
>     
>     def toimeentulotuki_param2018(self):
>         min_etuoikeutettuosa=150
>         lapsi1=305.87     # e/kk     alle 10v lapsi
>         lapsi2=281.59     # e/kk
>         lapsi3=257.32     # e/kk
>         yksinhuoltaja=534.05     # e/kk
>         # muu 18v täyttänyt ja avio- ja avopuolisot 412,68
>         muu=412.68    
>         yksinasuva=485.50
>         
>         return min_etuoikeutettuosa,lapsi1,lapsi2,lapsi3,yksinhuoltaja,muu,yksinasuva
>     
>     def toimeentulotuki_param2019(self):
>         min_etuoikeutettuosa=150
>         lapsi1=313.29     # e/kk     alle 10v lapsi
>         lapsi2=288.43     # e/kk
>         lapsi3=263.56     # e/kk
>         yksinhuoltaja=547.02     # e/kk
>         # muu 18v täyttänyt ja avio- ja avopuolisot 412,68
>         muu=422.70    
>         yksinasuva=497.29
>         return min_etuoikeutettuosa,lapsi1,lapsi2,lapsi3,yksinhuoltaja,muu,yksinasuva
> 
>     def toimeentulotuki_param2020(self):
>         min_etuoikeutettuosa=150
>         lapsi1=317.56     # e/kk     alle 10v lapsi
>         lapsi2=292.35     # e/kk
>         lapsi3=267.15     # e/kk
>         yksinhuoltaja=572.52     # e/kk
>         # muu 18v täyttänyt ja avio- ja avopuolisot 412,68
>         muu=412.68    
>         yksinasuva=502.21
>         return min_etuoikeutettuosa,lapsi1,lapsi2,lapsi3,yksinhuoltaja,muu,yksinasuva
>         
>     def toimeentulotuki_param2021(self):
>         min_etuoikeutettuosa=150
>         lapsi1=317.56     # e/kk     alle 10v lapsi
>         lapsi2=292.35     # e/kk
>         lapsi3=267.15     # e/kk
>         yksinhuoltaja=574.63     # e/kk
>         # muu 18v täyttänyt ja avio- ja avopuolisot 412,68
>         muu=428.45
>         yksinasuva=504.16
>         return min_etuoikeutettuosa,lapsi1,lapsi2,lapsi3,yksinhuoltaja,muu,yksinasuva
>         
>     def toimeentulotuki_param2022(self):
>         min_etuoikeutettuosa=150
>         lapsi1=324.34     # e/kk     alle 10v lapsi
>         lapsi2=298.60     # e/kk
>         lapsi3=272.85     # e/kk
>         yksinhuoltaja=586.89     # e/kk
>         # muu 18v täyttänyt ja avio- ja avopuolisot 412,68
>         muu=437.60
>         yksinasuva=514.82
>         return min_etuoikeutettuosa,lapsi1,lapsi2,lapsi3,yksinhuoltaja,muu,yksinasuva
> 
>     def toimeentulotuki_param2023(self):
283c167
<         Artikkelia varten
---
>         Päivitä
285c169,177
<         return 600.0
---
>         min_etuoikeutettuosa=150
>         lapsi1=324.34     # e/kk     alle 10v lapsi
>         lapsi2=298.60     # e/kk
>         lapsi3=272.85     # e/kk
>         yksinhuoltaja=586.89     # e/kk
>         # muu 18v täyttänyt ja avio- ja avopuolisot 412,68
>         muu=437.60
>         yksinasuva=514.82
>         return min_etuoikeutettuosa,lapsi1,lapsi2,lapsi3,yksinhuoltaja,muu,yksinasuva
287,288c179,267
<     def laske_perustulo_tm(self):
<         return 660
---
>     def setup_tmtuki_param(self,vuosi : int):
>         if vuosi==2018:
>             self.tmtuki_suojaosa_perheellinen=800
>             self.tmtuki_puoliso_suojaosa=560
>             self.tmtuki_lisa=106
>             self.tmtuki_suojaosa_yksin=211
>         elif vuosi==2019:
>             self.tmtuki_suojaosa_perheellinen=800
>             self.tmtuki_puoliso_suojaosa=560
>             self.tmtuki_lisa=106
>             self.tmtuki_suojaosa_yksin=211
>         elif vuosi==2020:
>             self.tmtuki_suojaosa_perheellinen=800
>             self.tmtuki_puoliso_suojaosa=560
>             self.tmtuki_lisa=106
>             self.tmtuki_suojaosa_yksin=211
>         elif vuosi==2021:
>             self.tmtuki_suojaosa_perheellinen=800
>             self.tmtuki_puoliso_suojaosa=560
>             self.tmtuki_lisa=106
>             self.tmtuki_suojaosa_yksin=211
>         elif vuosi==2022:
>             self.tmtuki_suojaosa_perheellinen=800
>             self.tmtuki_puoliso_suojaosa=560
>             self.tmtuki_lisa=106
>             self.tmtuki_suojaosa_yksin=211
>         elif vuosi==2023:
>             self.tmtuki_suojaosa_perheellinen=800
>             self.tmtuki_puoliso_suojaosa=560
>             self.tmtuki_lisa=106
>             self.tmtuki_suojaosa_yksin=211
>         else:
>             self.tmtuki_suojaosa_perheellinen=800
>             self.tmtuki_puoliso_suojaosa=560
>             self.tmtuki_lisa=106
>             self.tmtuki_suojaosa_yksin=211
>         
>     def toimeentulotuki(self,omabruttopalkka : float,omapalkkavero : float,puolison_bruttopalkka : float,puolison_palkkavero : float,
>                              muuttulot : float,verot : float,asumismenot : float,muutmenot : float,p : dict,omavastuuprosentti=0.0,alennus=0):
> 
>         omavastuu=omavastuuprosentti*asumismenot
>         menot=max(0,asumismenot-omavastuu)+muutmenot
>         
>         min_etuoikeutettuosa,lapsi1,lapsi2,lapsi3,yksinhuoltaja,muu,yksinasuva=self.toimeentulotuki_param()
> 
>         #menot=asumismenot+muutmenot    
>         bruttopalkka=omabruttopalkka+puolison_bruttopalkka    
>         palkkavero=omapalkkavero+puolison_palkkavero    
>         palkkatulot=bruttopalkka-palkkavero    
>         
>         if False: # lain mukainen tiukka tulkinta
>             omaetuoikeutettuosa=min(min_etuoikeutettuosa,0.2*omabruttopalkka)     # etuoikeutettu osa edunsaajakohtainen 1.1.2015 alkaen
>             puolison_etuoikeutettuosa=min(min_etuoikeutettuosa,0.2*puolison_bruttopalkka)    
>         else: # Kelan tulkinta: aina 150e
>             omaetuoikeutettuosa=min_etuoikeutettuosa
>             puolison_etuoikeutettuosa=min_etuoikeutettuosa
>             
>         etuoikeutettuosa=omaetuoikeutettuosa+puolison_etuoikeutettuosa    
> 
>         if p['aikuisia']<2:
>             if p['lapsia']<1: 
>                 tuki1=yksinasuva     # yksinasuva 485,50
>             elif p['lapsia']==1:
>                 tuki1=yksinhuoltaja+lapsi1     # yksinhuoltaja 534,05
>             elif p['lapsia']==2:
>                 tuki1=yksinhuoltaja+lapsi1+lapsi2     # yksinhuoltaja 534,05
>             else:
>                 tuki1=yksinhuoltaja+lapsi1+lapsi2+lapsi3*(p['lapsia']-2)     # yksinhuoltaja 534,05
>         else:
>             if p['lapsia']<1:
>                 tuki1=muu*p['aikuisia']   
>             elif p['lapsia']==1:
>                 tuki1=muu*p['aikuisia']+lapsi1     # yksinhuoltaja 534,05
>             elif p['lapsia']==2:
>                 tuki1=muu*p['aikuisia']+lapsi1+lapsi2     # yksinhuoltaja 534,05
>             else:
>                 tuki1=muu*p['aikuisia']+lapsi1+lapsi2+lapsi3*(p['lapsia']-2)     # yksinhuoltaja 534,05
> 
>         # if (bruttopalkka-etuoikeutettuosa>palkkavero)
>         #     tuki=max(0,tuki1+menot-max(0,bruttopalkka-etuoikeutettuosa-palkkavero)-verot-muuttulot)    
>         # else 
>         #     verot2=palkkavero+verot-max(0,(bruttopalkka-etuoikeutettuosa))    
>         #     tuki=max(0,tuki1+menot-muuttulot+verot2)    
>         # end
>         if alennus>0:
>             tuki1=tuki1*(1-alennus)
>             
>         if self.use_extra_ppr:
>             tuki1=tuki1*self.extra_ppr_factor
290,291c269,270
<     def laske_perustulo_vihreat(self):
<         return 600
---
>         tuki=max(0,tuki1+menot-max(0,omabruttopalkka-omaetuoikeutettuosa-omapalkkavero)\
>                 -max(0,puolison_bruttopalkka-puolison_etuoikeutettuosa-puolison_palkkavero)-verot-muuttulot)
293,294c272,278
<     def laske_perustulo_asetettava(self):
<         return self.perustulo_asetettava
---
>         if p['toimeentulotuki_vahennys']>0: # vähennetään 20%
>             tuki=tuki*0.8
>                 
>         if tuki<10:
>             tuki=0    
>             
>         return tuki
296,297c280,281
<     def laske_perustulo_696(self):
<         return 696.6
---
>     def perheparametrit(self,perhetyyppi=10,tulosta=False):
>         return perheparametrit(perhetyyppi=perhetyyppi,tulosta=tulosta)
299,306c283,287
<     def laske_perustulo_vasemmistoliitto(self):
<         return 800.0
<     
<     def laske_perustulo_sotu(self):
<         return 742.0
<     
<     def laske_perustulo_sotu_matala(self):
<         return 300.0
---
>     def print_examples(self):
>         return print_examples()
>         
>     def get_default_parameter(self):
>         return perheparametrit(perhetyyppi=1)
308,309c289,301
<     def laske_perustulo_tonni(self):
<         return 1000.0
---
>     def perustulo(self):
>         return 0
>     
>     # tmtuki samankokoinen
>     def peruspaivaraha2018(self,lapsia : int):
>         if lapsia==0:
>             lisa=0    
>         elif lapsia==1:
>             lisa=5.23     # e/pv
>         elif lapsia==2:
>             lisa=7.68     # e/pv
>         else:
>             lisa=9.90     # e/pv
311,312c303,309
<     def laske_perustulo_puolitoista(self):
<         return 1500.0
---
>         if self.use_extra_ppr:
>             pvraha=21.5*(32.40+lisa)*self.extra_ppr_factor
>         else:
>             pvraha=21.5*(32.40+lisa) #*self.extra_ppr_factor
>         tuki=max(0,pvraha)    
>     
>         return tuki
313a311,320
>     # tmtuki samankokoinen
>     def peruspaivaraha2019(self,lapsia : int):
>         if lapsia==0:
>             lisa=0    
>         elif lapsia==1:
>             lisa=5.23     # e/pv
>         elif lapsia==2:
>             lisa=7.68     # e/pv
>         else:
>             lisa=9.90     # e/pv
315,332c322,326
<     def kotihoidontuki(self,lapsia,allekolmev,alle_kouluikaisia):
<         # korvataan perustulolla
<         return self.perustulo()
<     
<     def valtionvero_asteikko_perustulo_Kela(self):
<         rajat=np.array([6720,50000,9999999,9999999])/self.kk_jakaja
<         pros=np.array([0.43,0.43,0.43,0.43]) # 560 e/kk
<         return rajat,pros
<     
<     def valtionvero_asteikko_perustulo_BI(self):
<         rajat=np.array([12*600,50000,9999999,9999999])/self.kk_jakaja
<         pros=np.array([0.5475,0.5475,0.5475,0.5475]) # 800 e/kk # tasavero 52,5 % vastaa 750e ja 48% 650e
<         return rajat,pros
<     
<     def valtionvero_asteikko_perustulo_vihreat(self):
<         rajat=np.array([12*600,50000,9999999,9999999])/self.kk_jakaja
<         pros=np.array([0.4750,0.4750,0.4750,0.4750]) # 600 e/kk Vai 44,75 %??
<         return rajat,pros
---
>         if self.use_extra_ppr:
>             pvraha=21.5*(32.40+lisa)*self.extra_ppr_factor
>         else:
>             pvraha=21.5*(32.40+lisa)
>         tuki=max(0,pvraha)    
334,342c328,345
<     def valtionvero_asteikko_perustulo_asetettava(self):
<         rajat=np.array([12*600,50000,9999999,9999999])/self.kk_jakaja
<         pros=np.array([self.valtionverotaso,self.valtionverotaso,self.valtionverotaso,self.valtionverotaso]) # 600 e/kk Vai 44,75 %??
<         return rajat,pros
<             
<     def valtionvero_asteikko_perustulo_kela_asetettava(self):
<         rajat=np.array([12*600,50000,9999999,9999999])/self.kk_jakaja
<         pros=np.array([self.valtionverotaso,self.valtionverotaso,self.valtionverotaso,self.valtionverotaso]) # 600 e/kk Vai 44,75 %??
<         return rajat,pros
---
>         return tuki
> 
>     # tmtuki samankokoinen
>     def peruspaivaraha2020(self,lapsia : int):
>         if lapsia==0:
>             lisa=0    
>         elif lapsia==1:
>             lisa=5.28     # e/pv
>         elif lapsia==2:
>             lisa=7.76     # e/pv
>         else:
>             lisa=10.00     # e/pv
>         
>         if self.use_extra_ppr:
>             pvraha=21.5*(33.66+lisa)*self.extra_ppr_factor
>         else:
>             pvraha=21.5*(33.66+lisa)
>         tuki=max(0,pvraha)    
344,347c347,364
<     def valtionvero_asteikko_perustulo_vasemmistoliitto(self):
<         rajat=np.array([12*800,50000,9999999,9999999])/self.kk_jakaja
<         pros=np.array([0.5475,0.5475,0.5475,0.5475]) # 800 e/kk # tasavero 52,5 % vastaa 750e ja 48% 650e
<         return rajat,pros
---
>         return tuki
> 
>     # tmtuki samankokoinen
>     def peruspaivaraha2021(self,lapsia : int):
>         if lapsia==0:
>             lisa=0    
>         elif lapsia==1:
>             lisa=5.30     # e/pv
>         elif lapsia==2:
>             lisa=7.78     # e/pv
>         else:
>             lisa=10.03     # e/pv 
>         
>         if self.use_extra_ppr:
>             pvraha=21.5*(33.78+lisa)*self.extra_ppr_factor
>         else:
>             pvraha=21.5*(33.78+lisa)
>         tuki=max(0,pvraha)    
349,352c366,382
<     def valtionvero_asteikko_perustulo_tonni(self):
<         rajat=np.array([12*1000,50000,9999999,9999999])/self.kk_jakaja
<         pros=np.array([0.64,0.64,0.64,0.64]) # 800 e/kk # tasavero 52,5 %
<         return rajat,pros
---
>         return tuki
> 
>     def peruspaivaraha2022(self,lapsia : int):
>         if lapsia==0:
>             lisa=0    
>         elif lapsia==1:
>             lisa=5.41     # e/pv
>         elif lapsia==2:
>             lisa=7.95     # e/pv
>         else:
>             lisa=10.25     # e/pv 
>         
>         if self.use_extra_ppr:
>             pvraha=21.5*(34.50+lisa)*self.extra_ppr_factor
>         else:
>             pvraha=21.5*(34.50+lisa)
>         tuki=max(0,pvraha)    
354,363c384,394
<     def valtionvero_asteikko_perustulo_1500(self):
<         rajat=np.array([12*1500,50000,9999999,9999999])/self.kk_jakaja
<         pros=np.array([0.79,0.79,0.79,0.79]) # 800 e/kk # tasavero 52,5 %
<         return rajat,pros        
<         
<     def toimeentulotuki(self,omabruttopalkka,omapalkkavero,puolison_bruttopalkka,puolison_palkkavero,
<                              muuttulot,verot,asumismenot,muutmenot,p,omavastuuprosentti=0.0,alennus=0):
<                              
<         return super().toimeentulotuki(omabruttopalkka,omapalkkavero,puolison_bruttopalkka,puolison_palkkavero,
<                              muuttulot,verot,asumismenot,muutmenot,p,omavastuuprosentti=omavastuuprosentti,alennus=alennus)
---
>         return tuki
> 
>     def peruspaivaraha2023(self,lapsia : int):
>         if lapsia==0:
>             lisa=0    
>         elif lapsia==1:
>             lisa=5.41*1.035     # e/pv
>         elif lapsia==2:
>             lisa=7.95*1.035     # e/pv
>         else:
>             lisa=10.25*1.035     # e/pv 
365,366c396,402
<     def peruspaivaraha_bi(self,lapsia):
<         return self.perustulo()
---
>         if self.use_extra_ppr:
>             pvraha=21.5*(34.50*1.035+lisa)*self.extra_ppr_factor
>         else:
>             pvraha=21.5*(34.50*1.035+lisa)
>         tuki=max(0,pvraha)    
>     
>         return tuki
368c404
<     def ansiopaivaraha_ylaraja(self,ansiopaivarahamaara,tyotaikaisettulot,vakpalkka,vakiintunutpalkka,peruspvraha):
---
>     def ansiopaivaraha_ylaraja(self,ansiopaivarahamaara : float,tyotaikaisettulot : float,vakpalkka : float,vakiintunutpalkka : float,peruspvraha : float):
373,382d408
< 
<     def laske_perustulovero_perus(self,tulo,puhdas_ansiotulo):
<         return 0.0
< 
<     def laske_perustulovero_sotu(self,palkkatulo,puhdas_ansiotulo):
<         return min(0.25*palkkatulo,3_383/self.kk_jakaja)+0.0037*puhdas_ansiotulo
< 
<     def laske_perustulovero_sotu_matala(self,palkkatulo,puhdas_ansiotulo):
<         return 0.0
<         #return min(0.05*palkkatulo,3_383/self.kk_jakaja)+0.0037*puhdas_ansiotulo
384c410
<     def laske_sotumaksu(self,vuosi):
---
>     def laske_sotumaksu(self,vuosi : int):
394a421,422
>         elif vuosi==2023:
>             sotumaksu=0.0434+0.6*self.additional_tyel_premium
400c428
<     def ansiopaivaraha(self,tyoton,vakiintunutpalkka,lapsia,tyotaikaisettulot,saa_ansiopaivarahaa,kesto,p,ansiokerroin=1.0,omavastuukerroin=1.0,alku=''):
---
>     def ansiopaivaraha(self,tyoton : int,vakiintunutpalkka,lapsia : int,tyotaikaisettulot : float,saa_ansiopaivarahaa : int,kesto : float,p : dict,ansiokerroin=1.0,omavastuukerroin=1.0,alku=''):
423,424c451,452
<             else:
<                 lapsikorotus=np.array([0,5.41,7.95,10.25])*21.5    
---
>             elif self.year==2023:
>                 lapsikorotus=np.array([0,5.41,7.95,10.25])*21.5*1.035   
425a454,456
>             else:
>                 lapsikorotus=np.array([0,5.23,7.68,9.90])*21.5    
>                 taite=3078.60   
430,433c461,464
<                 # peruspäiväraha lasketaan tässä kohdassa ilman lapsikorotusta
<                 # käytetään nykyistä peruspäivärahaa, jotta ansiosidonnainen ei kasva
<                 perus=self.nykyperuspaivaraha(0)
<                 vakpalkka=vakiintunutpalkka*(1-self.sotumaksu)
---
>             
>             
>                 perus=self.peruspaivaraha(0)     # peruspäiväraha lasketaan tässä kohdassa ilman lapsikorotusta
>                 vakpalkka=vakiintunutpalkka*(1-self.sotumaksu)     
437c468
<                     tuki2=0.2*max(0,vakpalkka-taite)+0.45*max(0,taite-perus)+perus
---
>                     tuki2=0.2*max(0,vakpalkka-taite)+0.45*max(0,taite-perus)+perus    
441c472
<                 tuki2=tuki2+lapsikorotus[min(lapsia,3)]
---
>                 tuki2=tuki2+lapsikorotus[min(lapsia,3)]    
444,445c475,476
< 
<                 perus=self.nykyperuspaivaraha(lapsia)     # peruspäiväraha lasketaan tässä kohdassa lapsikorotukset mukana
---
>         
>                 perus=self.peruspaivaraha(lapsia)     # peruspäiväraha lasketaan tässä kohdassa lapsikorotukset mukana
447c478
<                     tuki2=max(.9*vakpalkka,perus)
---
>                     tuki2=max(.9*vakpalkka,perus)    
449c480
<                 vahentavat_tulot=max(0,tyotaikaisettulot-suojaosa) 
---
>                 vahentavat_tulot=max(0,tyotaikaisettulot-suojaosa)
451,452c482,483
<                 soviteltuperus=self.nyky_soviteltu_peruspaivaraha(lapsia,tyotaikaisettulot,ansiopvrahan_suojaosa,p)
<                 ansiopaivarahamaara=self.ansiopaivaraha_ylaraja(ansiopaivarahamaara,tyotaikaisettulot,vakpalkka,vakiintunutpalkka,soviteltuperus)
---
>                 soviteltuperus=self.soviteltu_peruspaivaraha(lapsia,tyotaikaisettulot,ansiopvrahan_suojaosa,p)    
>                 ansiopaivarahamaara=self.ansiopaivaraha_ylaraja(ansiopaivarahamaara,tyotaikaisettulot,vakpalkka,vakiintunutpalkka,soviteltuperus)  
454,462c485,495
<                 perus=self.perustulo()
<                 tuki=omavastuukerroin*max(0,ansiopaivarahamaara-perus)
<                 ansiopaivarahamaara=omavastuukerroin*max(0,ansiopaivarahamaara-perus)
<                 perus=0 # perustulo maksetaan muualla
<             else:
<                 # perustulo korvaa peruspäivärahan
<                 ansiopaivarahamaara=0    
<                 perus=0 #self.soviteltu_peruspaivaraha(lapsia,tyotaikaisettulot,ansiopvrahan_suojaosa,p)    
<                 tuki=0 #self.perustulo()
---
>                 tuki=ansiopaivarahamaara    
>                 tuki=omavastuukerroin*max(soviteltuperus,tuki)     # voi tulla vastaan pienillä tasoilla4
>             else:
>                 if True: #p[alku+'peruspaivarahalla']>0:
>                     ansiopaivarahamaara=0
>                     perus=self.soviteltu_peruspaivaraha(lapsia,tyotaikaisettulot,ansiopvrahan_suojaosa,p)    
>                     tuki=omavastuukerroin*perus
>                 else: # tm-tuki
>                     ansiopaivarahamaara=0
>                     perus=self.soviteltu_tmtuki(lapsia,tyotaikaisettulot,ansiopvrahan_suojaosa,p)    
>                     tuki=omavastuukerroin*perus
470,471c503,564
<     def soviteltu_peruspaivaraha(self,lapsia,tyotaikaisettulot,ansiopvrahan_suojaosa,p):
<         return self.perustulo()
---
>     def soviteltu_peruspaivaraha(self,lapsia : int,tyotaikaisettulot : float,ansiopvrahan_suojaosa : int,p : dict):
>         suojaosa=self.tyottomyysturva_suojaosa(ansiopvrahan_suojaosa,p)
> 
>         pvraha=self.peruspaivaraha(lapsia)
>         vahentavattulo=max(0,tyotaikaisettulot-suojaosa)
>         tuki=max(0,pvraha-0.5*vahentavattulo)
>     
>         return tuki
>         
>     def tmtuki_suojaosa(self,lapsia,p):
>         if lapsia>0:
>             suojaosa=self.tmtuki_suojaosa_perheellinen+lapsia*self.tmtuki_lisa
>         else:
>             suojaosa=self.tmtuki_suojaosa_yksin
>             
>         return suojaosa
>         
>     def tmtuki_vahentavatulo(self,lapsia,tyotaikaisettulot,ansiopvrahan_suojaosa : int,p):
>         if p['aikuisia']>1:
>             puoliso=True
>         else:
>             puoliso=False
>         
>         if lapsia>0 or puoliso:
>             suojaosa=self.tmtuki_suojaosa_perheellinen+lapsia*self.tmtuki_lisa
>         else:
>             suojaosa=self.tmtuki_suojaosa_yksin
>         
>         if puoliso:
>             # Henkilölle, joka on saanut työttömyyspäivärahaa enimmäisajan, työmarkkinatuki
>             # maksetaan ilman tarveharkintaa 180 ensimmäisen työttömyyspäivän ajalta. 
>             # Myös jos ikä >= 55 ja toe täyttynyt työttömäksi joutuessa, 
>             if p['ika']>=55:
>                 vahentavattulo=max(0,tyotaikaisettulot-suojaosa)
>             else:
>                 vahentavattulo=max(0,max(p['puoliso_tulot']-self.tmtuki_puoliso_suojaosa,0)+tyotaikaisettulot-suojaosa)
>         else:
>             vahentavattulo=max(0,tyotaikaisettulot-suojaosa)
>             
>         return vahentavattulo
>         
>     def soviteltu_tmtuki(self,lapsia : int,tyotaikaisettulot : float,ansiopvrahan_suojaosa : int,p):
>         if True: # ei tarveharkintaa, koska tarveharkinta kohdistuu vain pääomatuloihin yms. ove pitäisi tarveharkita
>             return self.soviteltu_peruspaivaraha(lapsia,tyotaikaisettulot,ansiopvrahan_suojaosa,p)
>         else:
>             suojaosa=self.tmtuki_suojaosa(lapsia,p)
> 
>             pvraha=self.peruspaivaraha(lapsia)
>             vahentavattulo=self.tmtuki_vahentavatulo(lapsia,tyotaikaisettulot,ansiopvrahan_suojaosa,p)
> 
>             if p['aikuisia']>1:
>                 puoliso=True
>             else:
>                 puoliso=False
> 
>             if lapsia>0 or puoliso:
>                 tuki=max(0,pvraha-0.5*vahentavattulo)
>             else:
>                 #tuki=max(0,pvraha-0.75*vahentavattulo)
>                 tuki=max(0,pvraha-0.5*vahentavattulo)
>     
>             return tuki
472a566,614
>     def elaketulovahennys2018(self,elaketulot : float,tulot : float):
>         max_elaketulovahennys_valtio=11560/self.kk_jakaja
>         elaketulovahennys_valtio=max(0,min(elaketulot,max_elaketulovahennys_valtio-0.38*max(0,tulot-max_elaketulovahennys_valtio)))
>         max_elaketulovahennys_kunnallis=9040/self.kk_jakaja
>         elaketulovahennys_kunnallis=max(0,min(elaketulot,max(0,max_elaketulovahennys_kunnallis-0.51*max(0,tulot-max_elaketulovahennys_kunnallis))))
>         return elaketulovahennys_valtio,elaketulovahennys_kunnallis
> 
>     def elaketulovahennys2019(self,elaketulot : float,tulot : float):
>         max_elaketulovahennys_valtio=11590/self.kk_jakaja
>         elaketulovahennys_valtio=max(0,min(elaketulot,max_elaketulovahennys_valtio-0.38*max(0,tulot-max_elaketulovahennys_valtio)))
>         max_elaketulovahennys_kunnallis=9050/self.kk_jakaja
>         elaketulovahennys_kunnallis=max(0,min(elaketulot,max(0,max_elaketulovahennys_kunnallis-0.51*max(0,tulot-max_elaketulovahennys_kunnallis))))
>         return elaketulovahennys_valtio,elaketulovahennys_kunnallis
> 
>     def elaketulovahennys2020(self,elaketulot : float,tulot : float):
>         max_elaketulovahennys_valtio=11540/self.kk_jakaja
>         elaketulovahennys_valtio=max(0,min(elaketulot,max_elaketulovahennys_valtio-0.38*max(0,tulot-max_elaketulovahennys_valtio)))
>         max_elaketulovahennys_kunnallis=9230/self.kk_jakaja
>         elaketulovahennys_kunnallis=max(0,min(elaketulot,max(0,max_elaketulovahennys_kunnallis-0.51*max(0,tulot-max_elaketulovahennys_kunnallis))))
>         return elaketulovahennys_valtio,elaketulovahennys_kunnallis
> 
>     def elaketulovahennys2021(self,elaketulot : float,tulot : float):
>         max_elaketulovahennys_valtio=11150/self.kk_jakaja
>         elaketulovahennys_valtio=max(0,min(elaketulot,max_elaketulovahennys_valtio-0.38*max(0,tulot-max_elaketulovahennys_valtio)))
>         max_elaketulovahennys_kunnallis=9270/self.kk_jakaja
>         elaketulovahennys_kunnallis=max(0,min(elaketulot,max(0,max_elaketulovahennys_kunnallis-0.51*max(0,tulot-max_elaketulovahennys_kunnallis))))
>         return elaketulovahennys_valtio,elaketulovahennys_kunnallis
> 
>     def elaketulovahennys2022(self,elaketulot : float,tulot : float):
>         max_elaketulovahennys_valtio=11190/self.kk_jakaja
>         elaketulovahennys_valtio=max(0,min(elaketulot,max_elaketulovahennys_valtio-0.38*max(0,tulot-max_elaketulovahennys_valtio)))
>         max_elaketulovahennys_kunnallis=9500/self.kk_jakaja
>         elaketulovahennys_kunnallis=max(0,min(elaketulot,max(0,max_elaketulovahennys_kunnallis-0.51*max(0,tulot-max_elaketulovahennys_kunnallis))))
>         return elaketulovahennys_valtio,elaketulovahennys_kunnallis
> 
>     def elaketulovahennys2023(self,elaketulot : float,tulot : float):
>         max_elaketulovahennys_valtio=11190/self.kk_jakaja
>         elaketulovahennys_valtio=max(0,min(elaketulot,max_elaketulovahennys_valtio-0.38*max(0,tulot-max_elaketulovahennys_valtio)))
>         max_elaketulovahennys_kunnallis=9500/self.kk_jakaja
>         elaketulovahennys_kunnallis=max(0,min(elaketulot,max(0,max_elaketulovahennys_kunnallis-0.51*max(0,tulot-max_elaketulovahennys_kunnallis))))
>         return elaketulovahennys_valtio,elaketulovahennys_kunnallis
> 
>     def elaketulovahennys2024(self,elaketulot : float,tulot : float):
>         max_elaketulovahennys_valtio=11190/self.kk_jakaja
>         elaketulovahennys_valtio=max(0,min(elaketulot,max_elaketulovahennys_valtio-0.38*max(0,tulot-max_elaketulovahennys_valtio)))
>         max_elaketulovahennys_kunnallis=9500/self.kk_jakaja
>         elaketulovahennys_kunnallis=max(0,min(elaketulot,max(0,max_elaketulovahennys_kunnallis-0.51*max(0,tulot-max_elaketulovahennys_kunnallis))))
>         return elaketulovahennys_valtio,elaketulovahennys_kunnallis
> 
498c640
<         max_tyotulovahennys=1840/self.kk_jakaja
---
>         max_tyotulovahennys=1930/self.kk_jakaja
500c642
<         ttulopros=np.array([0.127,0.0189,0])
---
>         ttulopros=np.array([0.13,0.0196,0])
503,504c645,646
<     def tyotulovahennys_perustulo_sotu(self):
<         max_tyotulovahennys=0
---
>     def tyotulovahennys2023(self):
>         max_tyotulovahennys=1930/self.kk_jakaja
506c648
<         ttulopros=np.array([0,0,0])
---
>         ttulopros=np.array([0.13,0.0196,0])
509,513c651,655
<     def ansiotulovahennys_perustulo_sotu(self):
<         rajat=np.array([2500,7230,14000])/self.kk_jakaja
<         maxvahennys=0/self.kk_jakaja
<         ansvah=np.array([0,0,0])
<         return rajat,maxvahennys,ansvah
---
>     def tyotulovahennys2024(self):
>         max_tyotulovahennys=1930/self.kk_jakaja
>         ttulorajat=np.array([2500,33000,127000])/self.kk_jakaja # 127000??
>         ttulopros=np.array([0.13,0.0196,0])
>         return max_tyotulovahennys,ttulorajat,ttulopros
549a692,871
> 
>     def ansiotulovahennys2023(self):
>         rajat=np.array([2500,7230,14000])/self.kk_jakaja
>         maxvahennys=3570/self.kk_jakaja
>         ansvah=np.array([0.51,0.28,0.045])
>         return rajat,maxvahennys,ansvah
> 
>     def ansiotulovahennys2024(self):
>         rajat=np.array([2500,7230,14000])/self.kk_jakaja
>         maxvahennys=3570/self.kk_jakaja
>         ansvah=np.array([0.51,0.28,0.045])
>         return rajat,maxvahennys,ansvah
>         
>     def veroparam2018(self):
>         self.kunnallisvero_pros=max(0,max(0,0.1984+self.additional_kunnallisvero)) # Viitamäen raportista 19,84; verotuloilla painotettu k.a. 19,86
>         self.tyottomyysvakuutusmaksu=0.0190 #
>         if self.vaihtuva_tyelmaksu:
>             self.laske_vaihtuva_tyoelakemaksu(p['ika'])
>         else:
>             self.tyontekijan_maksu=max(0,max(0,0.0635+self.additional_tyel_premium)) # PTEL
>             self.tyontekijan_maksu_52=max(0,max(0,0.0785+self.additional_tyel_premium)) # PTEL
>             self.koko_tyel_maksu=max(0,max(0,0.2440+self.additional_tyel_premium))
>             self.tyonantajan_tyel=self.koko_tyel_maksu-self.tyontekijan_maksu
> 
>         self.tyonantajan_sairausvakuutusmaksu=0.0086
>         self.tyonantajan_tyottomyysvakuutusmaksu=0.0142 # keskimäärin
>         self.tyonantajan_ryhmahenkivakuutusmaksu=0.0006
>         self.tyonantajan_tytalmaksu=0.0070 # työtapaturma- ja ammattitautimaksu, keskimäärin
>         self.tyonantajan_sivukulut=max(0,self.tyonantajan_ryhmahenkivakuutusmaksu
>             +self.tyonantajan_tyel+self.tyonantajan_sairausvakuutusmaksu+self.tyonantajan_tytalmaksu)
>     
>         self.sairaanhoitomaksu=0.0
>         self.sairaanhoitomaksu_etuus=0.0147 # muut
>         
>         self.paivarahamaksu_pros=0.0153 # palkka
>         self.paivarahamaksu_raja=14020/self.kk_jakaja    
>         
>         self.elakemaksu_alaraja=58.27
>         self.tulonhankkimisvahennys=750/self.kk_jakaja
>         
>     def veroparam2019(self):
>         self.kunnallisvero_pros=max(0,0.1988+self.additional_kunnallisvero) # Viitamäen raportista
>         self.tyottomyysvakuutusmaksu=0.0125 #
>         if self.vaihtuva_tyelmaksu:
>             self.laske_vaihtuva_tyoelakemaksu(p['ika'])
>         else:
>             self.tyontekijan_maksu=max(0,0.0715+self.additional_tyel_premium) # PTEL
>             self.tyontekijan_maksu_52=max(0,0.0865+self.additional_tyel_premium) # PTEL
>             self.koko_tyel_maksu=max(0,0.2440+self.additional_tyel_premium) # PTEL
>             self.tyonantajan_tyel=self.koko_tyel_maksu-self.tyontekijan_maksu
> 
>         self.tyonantajan_sairausvakuutusmaksu=0.0077
>         self.tyonantajan_tyottomyysvakuutusmaksu=0.0142 # keskimäärin
>         self.tyonantajan_ryhmahenkivakuutusmaksu=0.0006
>         self.tyonantajan_tytalmaksu=0.0070 # työtapaturma- ja ammattitautimaksu, keskimäärin
>         self.tyonantajan_sivukulut=max(0,self.tyonantajan_ryhmahenkivakuutusmaksu
>             +self.tyonantajan_tyel+self.tyonantajan_sairausvakuutusmaksu+self.tyonantajan_tytalmaksu)
>     
>         self.sairaanhoitomaksu=0.0
>         self.sairaanhoitomaksu_etuus=0.0161 # muut
>         
>         self.paivarahamaksu_pros=0.0118 # palkka
>         self.paivarahamaksu_raja=14282/self.kk_jakaja    
>         
>         self.elakemaksu_alaraja=60.57
>         self.tulonhankkimisvahennys=750/self.kk_jakaja
>         
>     def veroparam2020(self):
>         self.kunnallisvero_pros=max(0,0.1997+self.additional_kunnallisvero) # Viitamäen raportista
>         self.tyottomyysvakuutusmaksu=0.0125 #
>         if self.vaihtuva_tyelmaksu:
>             self.laske_vaihtuva_tyoelakemaksu(p['ika'])
>         else:
>             self.tyontekijan_maksu=max(0,0.0715+self.additional_tyel_premium) # PTEL
>             self.tyontekijan_maksu_52=max(0,0.0865+self.additional_tyel_premium) # PTEL
>             self.koko_tyel_maksu=max(0,0.2440+self.additional_tyel_premium) # PTEL
>             self.tyonantajan_tyel=self.koko_tyel_maksu-self.tyontekijan_maksu
> 
>         self.tyonantajan_sairausvakuutusmaksu=0.0134
>         self.tyonantajan_tyottomyysvakuutusmaksu=0.0142 # keskimäärin
>         self.tyonantajan_ryhmahenkivakuutusmaksu=0.0006
>         self.tyonantajan_tytalmaksu=0.0070 # työtapaturma- ja ammattitautimaksu, keskimäärin
>         self.tyonantajan_sivukulut=max(0,self.tyonantajan_ryhmahenkivakuutusmaksu
>             +self.tyonantajan_tyel+self.tyonantajan_sairausvakuutusmaksu+self.tyonantajan_tytalmaksu)
>     
>         self.sairaanhoitomaksu=0.0068
>         self.sairaanhoitomaksu_etuus=0.0161 # muut
>         
>         self.paivarahamaksu_pros=0.0118 # palkka
>         self.paivarahamaksu_raja=14574/self.kk_jakaja    
>         
>         self.elakemaksu_alaraja=60.57
>         self.tulonhankkimisvahennys=750/self.kk_jakaja
>         
>     def veroparam2021(self):
>         self.kunnallisvero_pros=max(0,0.2002+self.additional_kunnallisvero) # Viitamäen raportista
>         self.tyottomyysvakuutusmaksu=0.0140 #
>         if self.vaihtuva_tyelmaksu:
>             self.laske_vaihtuva_tyoelakemaksu(p['ika'])
>         else:
>             self.tyontekijan_maksu=max(0,0.0715+self.additional_tyel_premium) # PTEL
>             self.tyontekijan_maksu_52=max(0,0.0865+self.additional_tyel_premium) # PTEL
>             self.koko_tyel_maksu=max(0,0.2440+self.additional_tyel_premium) # PTEL
>             self.tyonantajan_tyel=self.koko_tyel_maksu-self.tyontekijan_maksu
> 
>         self.tyonantajan_sairausvakuutusmaksu=0.0153
>         self.tyonantajan_tyottomyysvakuutusmaksu=0.0142 # keskimäärin
>         self.tyonantajan_ryhmahenkivakuutusmaksu=0.0006
>         self.tyonantajan_tytalmaksu=0.0070 # työtapaturma- ja ammattitautimaksu, keskimäärin
>         self.tyonantajan_sivukulut=max(0,self.tyonantajan_ryhmahenkivakuutusmaksu
>             +self.tyonantajan_tyel+self.tyonantajan_sairausvakuutusmaksu+self.tyonantajan_tytalmaksu)
>     
>         self.sairaanhoitomaksu=0.0066
>         self.sairaanhoitomaksu_etuus=0.0165 # muut
>         
>         self.paivarahamaksu_pros=0.0136 # palkka
>         self.paivarahamaksu_raja=14766/self.kk_jakaja    
>         
>         self.elakemaksu_alaraja=61.37
>         self.tulonhankkimisvahennys=750/self.kk_jakaja
>         
>     def veroparam2022(self):
>         '''
>         Päivitä
>         '''
>         self.kunnallisvero_pros=max(0,0.2002+self.additional_kunnallisvero) # Viitamäen raportista
>         self.tyottomyysvakuutusmaksu=0.0150 #
>         if self.vaihtuva_tyelmaksu:
>             self.laske_vaihtuva_tyoelakemaksu(p['ika'])
>         else:
>             self.tyontekijan_maksu=max(0,0.0715+self.additional_tyel_premium) # PTEL
>             self.tyontekijan_maksu_52=max(0,0.0865+self.additional_tyel_premium) # PTEL
>             self.koko_tyel_maksu=max(0,0.2440+self.additional_tyel_premium) # PTEL
>             self.tyonantajan_tyel=self.koko_tyel_maksu-self.tyontekijan_maksu
> 
>         self.tyonantajan_sairausvakuutusmaksu=0.0134
>         self.tyonantajan_tyottomyysvakuutusmaksu=0.0142 # keskimäärin
>         self.tyonantajan_ryhmahenkivakuutusmaksu=0.0006
>         self.tyonantajan_tytalmaksu=0.0070 # työtapaturma- ja ammattitautimaksu, keskimäärin
>         self.tyonantajan_sivukulut=max(0,self.tyonantajan_ryhmahenkivakuutusmaksu
>             +self.tyonantajan_tyel+self.tyonantajan_sairausvakuutusmaksu+self.tyonantajan_tytalmaksu)
>     
>         self.sairaanhoitomaksu=0.0053
>         self.sairaanhoitomaksu_etuus=0.0150 # muut
>         
>         self.paivarahamaksu_pros=0.0118 # palkka
>         self.paivarahamaksu_raja=15128/self.kk_jakaja    
>         
>         self.elakemaksu_alaraja=62.88
>         self.tulonhankkimisvahennys=750/self.kk_jakaja
>         
>     def veroparam2023(self):
>         '''
>         Päivitä
>         '''
>         self.kunnallisvero_pros=max(0,0.2001+self.additional_kunnallisvero) # Viitamäen raportista
>         self.tyottomyysvakuutusmaksu=0.0140 #
>         if self.vaihtuva_tyelmaksu:
>             self.laske_vaihtuva_tyoelakemaksu(p['ika'])
>         else:
>             self.tyontekijan_maksu=max(0,0.0715+self.additional_tyel_premium) # PTEL
>             self.tyontekijan_maksu_52=max(0,0.0865+self.additional_tyel_premium) # PTEL
>             self.koko_tyel_maksu=max(0,0.2440+self.additional_tyel_premium) # PTEL
>             self.tyonantajan_tyel=self.koko_tyel_maksu-self.tyontekijan_maksu
> 
>         self.tyonantajan_sairausvakuutusmaksu=0.0134
>         self.tyonantajan_tyottomyysvakuutusmaksu=0.0142 # keskimäärin
>         self.tyonantajan_ryhmahenkivakuutusmaksu=0.0006
>         self.tyonantajan_tytalmaksu=0.0070 # työtapaturma- ja ammattitautimaksu, keskimäärin
>         self.tyonantajan_sivukulut=max(0,self.tyonantajan_ryhmahenkivakuutusmaksu
>             +self.tyonantajan_tyel+self.tyonantajan_sairausvakuutusmaksu+self.tyonantajan_tytalmaksu)
>     
>         self.sairaanhoitomaksu=0.0053
>         self.sairaanhoitomaksu_etuus=0.0150 # muut
>         
>         self.paivarahamaksu_pros=0.0118 # palkka
>         self.paivarahamaksu_raja=15128/self.kk_jakaja    
>         
>         self.elakemaksu_alaraja=62.88
>         self.tulonhankkimisvahennys=750/self.kk_jakaja
615a938,950
>     def laske_ylevero2023(self,palkkatulot,elaketulot):
>         yleveropros=0.025
>         min_ylevero=0/self.kk_jakaja
>         max_ylevero=163/self.kk_jakaja
>         ylevero_alaraja=14000/self.kk_jakaja
>     
>         ylevero=min(max_ylevero,yleveropros*max(0,elaketulot+palkkatulot-ylevero_alaraja))
>     
>         if ylevero<min_ylevero:
>             ylevero=0
>             
>         return ylevero    
> 
640a976,980
>     def perusvahennys2023(self):
>         perusvahennys_pros=0.18
>         max_perusvahennys=3740/self.kk_jakaja
>         return perusvahennys_pros,max_perusvahennys
>     
715,720d1054
<         peritytverot += ylevero
<         
<         # perustulovero
<         perustulovero=self.laske_perustulovero(palkkatulot_puhdas,puhdas_ansiotulo)
<         #valtionvero=ylevero
<         peritytverot += perustulovero
721a1056,1057
>         peritytverot += ylevero
> 
745,747c1081,1083
<         valtionveroperuste=tulot_valtio
<         valtionvero=self.laske_valtionvero(valtionveroperuste,p)
<         valtionvero+=self.raippavero(elaketulot_valtio)
---
>         valtionveroperuste = tulot_valtio
>         valtionvero = self.laske_valtionvero(valtionveroperuste,p)
>         valtionvero += self.raippavero(elaketulot_valtio)
760c1096
<         valtionvero += perustulovero
---
>         
818,819c1154,1155
<         if np.abs(d2-d1)>1e-6:
<             print('verotus',d2-d1)
---
> #         if np.abs(d2-d1)>1e-6:
> #             print('verotus',d2-d1)
824a1161,1286
>     def kotihoidontuki2018(self,lapsia,allekolmev,alle_kouluikaisia):
>         if lapsia<1:
>             arvo=0
>         else:
>             tuki_alle_3v=341.27 # e/kk
>             seuraavat_alle_3v=102.17 # e/kk
>             yli_3v=65.65 #e_kk
>             if allekolmev>0:
>                 kerroin1=1
>                 if allekolmev>1:
>                     kerroin2=allekolmev-1
>                 else:
>                     kerroin2=0
>             else:
>                 kerroin1=0
>                 kerroin2=0
>             
>             arvo=alle_kouluikaisia*yli_3v+tuki_alle_3v*kerroin1+kerroin2*seuraavat_alle_3v        
>         
>         return arvo
>     
>     def kotihoidontuki2019(self,lapsia,allekolmev,alle_kouluikaisia):
>         if lapsia<1:
>             arvo=0
>         else:
>             tuki_alle_3v=338.34 # e/kk
>             seuraavat_alle_3v=101.29 # e/kk
>             yli_3v=65.09 #e_kk
>             if allekolmev>0:
>                 kerroin1=1
>                 if allekolmev>1:
>                     kerroin2=allekolmev-1
>                 else:
>                     kerroin2=0
>             else:
>                 kerroin1=0
>                 kerroin2=0
>             
>             arvo=alle_kouluikaisia*yli_3v+tuki_alle_3v*kerroin1+kerroin2*seuraavat_alle_3v        
>         
>         return arvo
>     
>     def kotihoidontuki2020(self,lapsia,allekolmev,alle_kouluikaisia):
>         if lapsia<1:
>             arvo=0
>         else:
>             tuki_alle_3v=341.69 # e/kk
>             seuraavat_alle_3v=102.30 # e/kk
>             yli_3v=65.73 #e_kk
>             if allekolmev>0:
>                 kerroin1=1
>                 if allekolmev>1:
>                     kerroin2=allekolmev-1
>                 else:
>                     kerroin2=0
>             else:
>                 kerroin1=0
>                 kerroin2=0
>             
>             arvo=alle_kouluikaisia*yli_3v+tuki_alle_3v*kerroin1+kerroin2*seuraavat_alle_3v        
>         
>         return arvo
>     
>     def kotihoidontuki2021(self,lapsia,allekolmev,alle_kouluikaisia):
>         if lapsia<1:
>             arvo=0
>         else:
>             tuki_alle_3v=343.95 # e/kk
>             seuraavat_alle_3v=102.67 # e/kk
>             yli_3v=65.97 #e_kk
>             if allekolmev>0:
>                 kerroin1=1
>                 if allekolmev>1:
>                     kerroin2=allekolmev-1
>                 else:
>                     kerroin2=0
>             else:
>                 kerroin1=0
>                 kerroin2=0
>             
>             arvo=alle_kouluikaisia*yli_3v+tuki_alle_3v*kerroin1+kerroin2*seuraavat_alle_3v        
>         
>         return arvo
>     
>     def kotihoidontuki2022(self,lapsia,allekolmev,alle_kouluikaisia):
>         if lapsia<1:
>             arvo=0
>         else:
>             tuki_alle_3v=350.27 # e/kk
>             seuraavat_alle_3v=104.86 # e/kk
>             yli_3v=67.38 #e_kk
>             if allekolmev>0:
>                 kerroin1=1
>                 if allekolmev>1:
>                     kerroin2=allekolmev-1
>                 else:
>                     kerroin2=0
>             else:
>                 kerroin1=0
>                 kerroin2=0
>             
>             arvo=alle_kouluikaisia*yli_3v+tuki_alle_3v*kerroin1+kerroin2*seuraavat_alle_3v        
>         
>         return arvo
> 
>     def kotihoidontuki2023(self,lapsia,allekolmev,alle_kouluikaisia):
>         if lapsia<1:
>             arvo=0
>         else:
>             tuki_alle_3v=350.27 # e/kk
>             seuraavat_alle_3v=104.86 # e/kk
>             yli_3v=67.38 #e_kk
>             if allekolmev>0:
>                 kerroin1=1
>                 if allekolmev>1:
>                     kerroin2=allekolmev-1
>                 else:
>                     kerroin2=0
>             else:
>                 kerroin1=0
>                 kerroin2=0
>             
>             arvo=alle_kouluikaisia*yli_3v+tuki_alle_3v*kerroin1+kerroin2*seuraavat_alle_3v        
>         
>         return arvo
> 
855,858c1317,1326
<     def valtionvero_asteikko_2018(self):
<         rajat=np.array([17200,25700,42400,74200])/self.kk_jakaja
<         pros=np.maximum(0,np.array([0.06,0.1725,0.2125,0.3125+self.additional_income_tax_high])+self.additional_income_tax)
<         pros=np.maximum(0,np.minimum(pros,0.3125+self.additional_income_tax_high+self.additional_income_tax))
---
>     def raippavero2023(self,elaketulo):
>         alaraja=47_000*self.kk_jakaja
>         pros=0.0585
>         vero=max(elaketulo-alaraja,0)*pros
>         return vero
>     
>     def valtionvero_asteikko_2018(self):
>         rajat=np.array([17200,25700,42400,74200])/self.kk_jakaja
>         pros=np.maximum(0,np.array([0.06,0.1725,0.2125,0.3125+self.additional_income_tax_high])+self.additional_income_tax)
>         pros=np.maximum(0,np.minimum(pros,0.3125+self.additional_income_tax_high+self.additional_income_tax))
885,924c1353,1356
<     def valtionvero_asteikko_perustulo_Kela(self):
<         rajat=np.array([6720,50000,9999999,9999999])/self.kk_jakaja
<         pros=np.array([0.43,0.43,0.43,0.43]) # 560 e/kk
<         return rajat,pros
<     
<     def valtionvero_asteikko_perustulo_BI(self):
<         rajat=np.array([12*600,50000,9999999,9999999])/self.kk_jakaja
<         pros=np.array([0.40,0.40,0.40,0.40]) # 500 e/kk
<         return rajat,pros
<     
<     def valtionvero_asteikko_perustulo_vihreat(self):
<         rajat=np.array([12*600,50000,9999999,9999999])/self.kk_jakaja
<         #pros=np.array([0.4575,0.4575,0.4575,0.4575]) # 600 e/kk Vai 44,75 %??
<         pros=np.array([0.4750,0.4750,0.4750,0.4750]) # 600 e/kk Vai 44,75 %??
< 
<         return rajat,pros
<     
<     def valtionvero_asteikko_perustulo_asetettava(self):
<         rajat=np.array([12*600,50000,9999999,9999999])/self.kk_jakaja
<         pros=np.array([self.valtionverotaso,self.valtionverotaso,self.valtionverotaso,self.valtionverotaso]) # 600 e/kk Vai 44,75 %??
<         return rajat,pros
<             
<     def valtionvero_asteikko_perustulo_kela_asetettava(self):
<         rajat=np.array([12*600,50000,9999999,9999999])/self.kk_jakaja
<         pros=np.array([self.valtionverotaso,self.valtionverotaso,self.valtionverotaso,self.valtionverotaso]) # 600 e/kk Vai 44,75 %??
<         return rajat,pros
<     
<     def valtionvero_asteikko_perustulo_vasemmistoliitto(self):
<         rajat=np.array([12*800,50000,9999999,9999999])/self.kk_jakaja
<         pros=np.array([0.5475,0.5475,0.5475,0.5475]) # 800 e/kk # tasavero 52,5 % vastaa 750e ja 48% 650e
<         return rajat,pros
<     
<     def valtionvero_asteikko_perustulo_tonni(self):
<         rajat=np.array([12*1000,50000,9999999,9999999])/self.kk_jakaja
<         pros=np.array([0.64,0.64,0.64,0.64]) # 800 e/kk # tasavero 52,5 %
<         return rajat,pros
<     
<     def valtionvero_asteikko_perustulo_1500(self):
<         rajat=np.array([12*1500,50000,9999999,9999999])/self.kk_jakaja
<         pros=np.array([0.79,0.79,0.79,0.79]) # 800 e/kk # tasavero 52,5 %
---
>     def valtionvero_asteikko_2023(self):
>         rajat=np.array([19200,28700,47300,82900])/self.kk_jakaja
>         pros=np.maximum(0,np.array([0.06,0.1725,0.2125,0.3125+self.additional_income_tax_high])+self.additional_income_tax)
>         pros=np.maximum(0,np.minimum(pros,0.3125+self.additional_income_tax_high+self.additional_income_tax))
926c1358
<                 
---
>         
931c1363
<             elatustuki=167.35*lapsia
---
>             elatustuki=158.74*lapsia
937a1370,1371
>         elif self.year==2023:
>             elatustuki=172.59*lapsia
990a1425,1494
>     def lapsilisa2018(self,yksinhuoltajakorotus=False):
>         lapsilisat=np.array([95.75,105.80,135.01,154.64,174.27])
>         if yksinhuoltajakorotus:
>             # yksinhuoltajakorotus 53,30 e/lapsi
>             lapsilisat += 53.3
> 
>         return lapsilisat
>     
>     def lapsilisa2019(self,yksinhuoltajakorotus=False):
>         lapsilisat=np.array([94.88,104.84,133.79,153.24,172.69])
>         if yksinhuoltajakorotus:
>             # yksinhuoltajakorotus 53,30 e/lapsi
>             lapsilisat += 53.3
>             
>         return lapsilisat
>     
>     def lapsilisa2020(self,yksinhuoltajakorotus=False):
>         lapsilisat=np.array([94.88,104.84,133.79,163.24,182.69])
>         if yksinhuoltajakorotus:
>             # yksinhuoltajakorotus 53,30 e/lapsi
>             lapsilisat += 53.3
>             
>         return lapsilisat
>     
>     def lapsilisa2021(self,yksinhuoltajakorotus=False):
>         lapsilisat=np.array([94.88,104.84,133.79,163.24,182.69])
>         if yksinhuoltajakorotus:
>             # yksinhuoltajakorotus 53,30 e/lapsi
>             lapsilisat += 63.3
>             
>         return lapsilisat
>     
>     def lapsilisa2022(self,yksinhuoltajakorotus=False):
>         lapsilisat=np.array([94.88,104.84,133.79,163.24,182.69])
>         if yksinhuoltajakorotus:
>             # yksinhuoltajakorotus 53,30 e/lapsi
>             lapsilisat += 63.3
>             
>         return lapsilisat
>     
>     def lapsilisa2023(self,yksinhuoltajakorotus=False):
>         lapsilisat=np.array([94.88,104.84,133.79,163.24,182.69])
>         if yksinhuoltajakorotus:
>             # yksinhuoltajakorotus 53,30 e/lapsi
>             lapsilisat += 63.3
>             
>         return lapsilisat
>     
>     def laske_lapsilisa(self,lapsia,yksinhuoltajakorotus=0):
>         lapsilisat=self.lapsilisa(yksinhuoltajakorotus=yksinhuoltajakorotus)
> 
>         if lapsia==0:
>             tuki=0
>         elif lapsia==1:
>             tuki=lapsilisat[0]
>         elif lapsia==2:
>             tuki=sum(lapsilisat[0:2])
>         elif lapsia==3:
>             tuki=sum(lapsilisat[0:3])
>         elif lapsia==4:
>             tuki=sum(lapsilisat[0:4])
>         elif lapsia==5:
>             tuki=sum(lapsilisat[0:5])
>         elif lapsia>5:
>             tuki=sum(lapsilisat[0:5])+(lapsia-5)*lapsilisat[4]
>         else:
>             print('error(1))')
>         
>         return tuki
>         
995,996c1499,1543
<         tuki=0 #self.perustulo()
<                     
---
>         if p['lapsia']>0:
>             if self.year==2018:
>                 tuki=350.28 # +650*0.4 = opintolainahyvitys mukana?
>             elif self.year==2019:
>                 tuki=350.28 # +650*0.4 = opintolainahyvitys mukana?
>             elif self.year==2020:
>                 tuki=350.28 # +650*0.4 = opintolainahyvitys mukana?
>             elif self.year==2021:
>                 tuki=355.05# +650*0.4 = opintolainahyvitys mukana?
>             elif self.year==2022:
>                 tuki=355.05# +650*0.4 = opintolainahyvitys mukana?
>             elif self.year==2023:
>                 tuki=355.05# +650*0.4 = opintolainahyvitys mukana?
>         else:
>             if self.year==2018:
>                 tuki=250.28 #+650*0.4 # opintolainahyvitys mukana
>             elif self.year==2019:
>                 tuki=250.28 # +650*0.4 = opintolainahyvitys mukana?
>             elif self.year==2020:
>                 tuki=250.28 # +650*0.4 = opintolainahyvitys mukana?
>             elif self.year==2021:
>                 tuki=253.69 # +650*0.4 = opintolainahyvitys mukana?
>             elif self.year==2022:
>                 tuki=259.10 # +650*0.4 = opintolainahyvitys mukana?
>             elif self.year==2023:
>                 tuki=259.10 # +650*0.4 = opintolainahyvitys mukana?
>             
>         if self.year==2018:
>             raja=696
>         elif self.year==2019:
>             raja=667
>         elif self.year==2020:
>             raja=667
>         elif self.year==2021:
>             raja=696
>         elif self.year==2022:
>             raja=696
>         elif self.year==2023:
>             raja=696
>         else:
>             print('error')
> 
>         if palkka>raja: #+222/12: # oletetaan että täysiaikainen opiskelija
>             tuki=0
>             
1000,1002c1547,1552
<         p=super().check_p(p)
< 
<         return p
---
>         if 'toimeentulotuki_vahennys' not in p:
>             p['toimeentulotuki_vahennys']=0
>         if 'lapsikorotus_lapsia' not in p:
>             p['lapsikorotus_lapsia']=p['lapsia']
>         if 'osaaikainen_paivahoito' not in p:
>             p['osaaikainen_paivahoito']=0
1004,1021c1554,1574
<     def asumistuki2018(self,palkkatulot,muuttulot,vuokra,p):
<         # Ruokakunnan koko
<         # henkilöä    I kuntaryhmä,
<         # e/kk    II kuntaryhmä,
<         # e/kk    III kuntaryhmä,
<         # e/kk    IIII kuntaryhmä,
<         # e/kk
<         # 1    508    492    411    362
<         # 2    735    706    600    527
<         # 3    937    890    761    675
<         # 4    1095    1038    901    804
<         # + lisähenkilöä kohden, e/kk
<         # 
<         # 137    130    123    118
<         # enimmaismenot kuntaryhmittain kun hloita 1-4
<         max_menot=np.array([[508, 492, 411, 362],[735, 706, 600, 527],[937, 890, 761, 675],[1095, 1038, 901, 804]])
<         max_lisa=np.array([137, 130, 123, 118])
<         # kuntaryhma=3
---
>         for alku in set(['omat_','puoliso_','']):
>             if alku+'alive' not in p:
>                 p[alku+'alive']=1
>             if alku+'peruspaivarahalla' not in p:
>                 p[alku+'peruspaivarahalla']=0
>             if alku+'elake_maksussa' not in p:
>                 p[alku+'elake_maksussa']=0
>             if alku+'opiskelija' not in p:
>                 p[alku+'opiskelija']=0
>             if alku+'elakkeella' not in p:
>                 p[alku+'elakkeella']=0
>             if alku+'tyoelake' not in p:
>                 p[alku+'tyoelake']=0
>             if alku+'kansanelake' not in p:
>                 p[alku+'kansanelake']=0
>             if alku+'sairauspaivarahalla' not in p:
>                 p[alku+'sairauspaivarahalla']=0
>             if alku+'disabled' not in p:
>                 p[alku+'disabled']=0
>             if alku+'saa_elatustukea' not in p:
>                 p[alku+'saa_elatustukea']=0
1023c1576,1604
<         max_meno=max_menot[min(3,p['aikuisia']+p['lapsia']-1),p['kuntaryhma']]+max(0,p['aikuisia']+p['lapsia']-4)*max_lisa[p['kuntaryhma']]
---
>     def laske_tulot(self,p,tt_alennus=0,include_takuuelake=True,legacy=True):
>         q={} # tulokset tänne
>         
>         self.check_p(p)
>         q['perustulo']=0
>         q['puoliso_perustulo']=0
>         q['puhdas_tyoelake']=0
>         q['multiplier']=1
>         q['kotihoidontuki']=0
>         q['kotihoidontuki_netto']=0
>         q['puoliso_opintotuki']=0
>         q['puoliso_kotihoidontuki']=0
>         q['puoliso_kotihoidontuki_netto']=0
>         q['puoliso_ansiopvraha_netto']=0
>         q['puoliso_kotihoidontuki_netto']=0
>         q['puoliso_opintotuki_netto']=0
>         if p['elakkeella']>0: # vanhuuseläkkeellä
>             p['tyoton']=0
>             q['isyyspaivaraha'],q['aitiyspaivaraha'],q['kotihoidontuki'],q['sairauspaivaraha']=(0,0,0,0)
>             q['elake_maksussa']=p['tyoelake']
>             q['elake_tuleva']=0
>             p['saa_ansiopaivarahaa']=0
>             # huomioi takuueläkkeen, kansaneläke sisältyy eläke_maksussa-osaan
>             if (p['aikuisia']>1):
>                 q['kokoelake']=self.laske_kokonaiselake(p['ika'],q['elake_maksussa'],yksin=0,include_takuuelake=include_takuuelake,disability=p['disabled'])
>                 q['puhdas_tyoelake']=self.laske_puhdas_tyoelake(p['ika'],p['tyoelake'],disability=p['disabled'],yksin=0)
>             else:
>                 q['kokoelake']=self.laske_kokonaiselake(p['ika'],q['elake_maksussa'],yksin=1,include_takuuelake=include_takuuelake,disability=p['disabled'])
>                 q['puhdas_tyoelake']=self.laske_puhdas_tyoelake(p['ika'],p['tyoelake'],disability=p['disabled'],yksin=1)
1025,1031c1606,1692
<         prosentti=0.8 # vastaa 80 %
<         suojaosa=300*p['aikuisia']
<         perusomavastuu=max(0,0.42*(max(0,palkkatulot-suojaosa)+muuttulot-(603+100*p['aikuisia']+223*p['lapsia'])))
<         if perusomavastuu<10:
<             perusomavastuu=0
<         if p['aikuisia']==1 and p['tyoton']==1 and p['saa_ansiopaivarahaa']==0 and palkkatulot<1 and p['lapsia']==0:
<             perusomavastuu=0
---
>             q['ansiopvraha'],q['puhdasansiopvraha'],q['peruspvraha']=(0,0,0)
>             #oletetaan että myös puoliso eläkkeellä
>             q['puoliso_ansiopvraha']=0
>             q['opintotuki']=0
>         elif p['opiskelija']>0:
>             q['elake_maksussa']=p['tyoelake']
>             q['kokoelake']=p['tyoelake']
>             q['elake_tuleva']=0
>             q['puoliso_ansiopvraha']=0
>             q['ansiopvraha'],q['puhdasansiopvraha'],q['peruspvraha']=(0,0,0)
>             q['isyyspaivaraha'],q['aitiyspaivaraha'],q['kotihoidontuki'],q['sairauspaivaraha']=(0,0,0,0)
>             q['opintotuki']=0
>             if p['aitiysvapaalla']>0:
>                 q['aitiyspaivaraha']=self.aitiysraha(p['vakiintunutpalkka'],p['aitiysvapaa_kesto'])
>             elif p['isyysvapaalla']>0:
>                 q['isyyspaivaraha']=self.isyysraha(p['vakiintunutpalkka'])
>             elif p['kotihoidontuella']>0:
>                 q['kotihoidontuki']=self.kotihoidontuki(p['lapsia_kotihoidontuella'],p['lapsia_alle_3v'],p['lapsia_alle_kouluikaisia'])
>             else:
>                 q['opintotuki']=self.opintoraha(0,p)
>         else: # ei eläkkeellä     
>             q['opintotuki']=0
>             q['elake_maksussa']=p['tyoelake']
>             q['kokoelake']=p['tyoelake']
>             q['elake_tuleva']=0
>             q['puoliso_ansiopvraha']=0
>             q['ansiopvraha'],q['puhdasansiopvraha'],q['peruspvraha']=(0,0,0)
>             q['isyyspaivaraha'],q['aitiyspaivaraha'],q['kotihoidontuki'],q['sairauspaivaraha']=(0,0,0,0)
>             if p['aitiysvapaalla']>0:
>                 q['aitiyspaivaraha']=self.aitiysraha(p['vakiintunutpalkka'],p['aitiysvapaa_kesto'])
>             elif p['isyysvapaalla']>0:
>                 q['isyyspaivaraha']=self.isyysraha(p['vakiintunutpalkka'])
>             elif p['sairauspaivarahalla']>0:
>                 q['sairauspaivaraha']=self.sairauspaivaraha(p['vakiintunutpalkka'])
>             elif p['kotihoidontuella']>0:
>                 q['kotihoidontuki']=self.kotihoidontuki(p['lapsia_kotihoidontuella'],p['lapsia_alle_3v'],p['lapsia_alle_kouluikaisia'])
>             elif p['tyoton']>0:
>                 if 'omavastuukerroin' in p:
>                     omavastuukerroin=p['omavastuukerroin']
>                 else:
>                     omavastuukerroin=1.0
>                 q['ansiopvraha'],q['puhdasansiopvraha'],q['peruspvraha']=self.ansiopaivaraha(p['tyoton'],p['vakiintunutpalkka'],p['lapsia'],p['t'],p['saa_ansiopaivarahaa'],p['tyottomyyden_kesto'],p,omavastuukerroin=omavastuukerroin)
>                 
>         if p['aikuisia']>1:
>             if p['puoliso_elakkeella']>0: # vanhuuseläkkeellä
>                 p['puoliso_tyoton']=0
>                 q['puoliso_isyyspaivaraha'],q['puoliso_aitiyspaivaraha'],q['puoliso_kotihoidontuki'],q['puoliso_sairauspaivaraha']=(0,0,0,0)
>                 q['puoliso_elake_maksussa']=p['puoliso_tyoelake']
>                 q['puoliso_elake_tuleva']=0
>                 p['puoliso_saa_ansiopaivarahaa']=0
>                 # huomioi takuueläkkeen, kansaneläke sisältyy eläke_maksussa-osaan
>                 q['puoliso_kokoelake']=self.laske_kokonaiselake(p['puoliso_ika'],q['puoliso_elake_maksussa'],yksin=0)
>                 q['puoliso_ansiopvraha'],q['puoliso_puhdasansiopvraha'],q['puoliso_peruspvraha']=(0,0,0)
>                 q['puoliso_opintotuki']=0
>             elif p['puoliso_opiskelija']>0:
>                 q['puoliso_kokoelake']=0
>                 q['puoliso_elake_maksussa']=p['puoliso_tyoelake']
>                 q['puoliso_elake_tuleva']=0
>                 q['puoliso_ansiopvraha'],q['puoliso_puhdasansiopvraha'],q['puoliso_peruspvraha']=(0,0,0)
>                 q['puoliso_isyyspaivaraha'],q['puoliso_aitiyspaivaraha'],q['puoliso_kotihoidontuki'],q['puoliso_sairauspaivaraha']=(0,0,0,0)
>                 q['puoliso_opintotuki']=0
>                 if p['puoliso_aitiysvapaalla']>0:
>                     q['puoliso_aitiyspaivaraha']=self.aitiysraha(p['puoliso_vakiintunutpalkka'],p['puoliso_aitiysvapaa_kesto'])
>                 elif p['puoliso_isyysvapaalla']>0:
>                     q['puoliso_isyyspaivaraha']=self.isyysraha(p['puoliso_vakiintunutpalkka'])
>                 elif p['puoliso_kotihoidontuella']>0:
>                     q['puoliso_kotihoidontuki']=self.kotihoidontuki(p['lapsia_kotihoidontuella'],p['lapsia_alle_3v'],p['lapsia_alle_kouluikaisia'])
>                 else:
>                     q['puoliso_opintotuki']=self.opintoraha(0,p)
>             else: # ei eläkkeellä     
>                 q['puoliso_kokoelake']=0
>                 q['puoliso_opintotuki']=0
>                 q['puoliso_elake_maksussa']=p['puoliso_tyoelake']
>                 q['puoliso_elake_tuleva']=0
>                 q['puoliso_puolison_ansiopvraha']=0
>                 q['puoliso_ansiopvraha'],q['puoliso_puhdasansiopvraha'],q['puoliso_peruspvraha']=(0,0,0)
>                 q['puoliso_isyyspaivaraha'],q['puoliso_aitiyspaivaraha'],q['puoliso_kotihoidontuki'],q['puoliso_sairauspaivaraha']=(0,0,0,0)
>                 if p['puoliso_aitiysvapaalla']>0:
>                     q['puoliso_aitiyspaivaraha']=self.aitiysraha(p['puoliso_vakiintunutpalkka'],p['puoliso_aitiysvapaa_kesto'])
>                 elif p['puoliso_isyysvapaalla']>0:
>                     q['puoliso_isyyspaivaraha']=self.isyysraha(p['puoliso_vakiintunutpalkka'])
>                 elif p['puoliso_sairauspaivarahalla']>0:
>                     q['puoliso_sairauspaivaraha']=self.sairauspaivaraha(p['puoliso_vakiintunutpalkka'])
>                 elif p['puoliso_kotihoidontuella']>0:
>                     q['puoliso_kotihoidontuki']=self.kotihoidontuki(p['lapsia_kotihoidontuella'],p['lapsia_alle_3v'],p['lapsia_alle_kouluikaisia'])
>                 elif p['puoliso_tyoton']>0:
>                     q['puoliso_ansiopvraha'],q['puoliso_puhdasansiopvraha'],q['puoliso_peruspvraha']=self.ansiopaivaraha(p['puoliso_tyoton'],p['puoliso_vakiintunutpalkka'],p['lapsia'],p['puoliso_tulot'],p['puoliso_saa_ansiopaivarahaa'],p['puoliso_tyottomyyden_kesto'],p)
1033,1039c1694,1713
<         tuki=max(0,(min(max_meno,vuokra)-perusomavastuu)*prosentti)
< 
<         if self.use_extra_ppr:
<             tuki=tuki*self.extra_ppr_factor
<         
<         if tuki<15:
<             tuki=0
---
>         # q['verot] sisältää kaikki veronluonteiset maksut
>         _,q['verot'],q['valtionvero'],q['kunnallisvero'],q['kunnallisveronperuste'],q['valtionveroperuste'],\
>             q['ansiotulovahennys'],q['perusvahennys'],q['tyotulovahennys'],q['tyotulovahennys_kunnallisveroon'],\
>             q['ptel'],q['sairausvakuutusmaksu'],q['tyotvakmaksu'],q['tyel_kokomaksu'],q['ylevero']=self.verotus(p['t'],
>                 q['ansiopvraha']+q['aitiyspaivaraha']+q['isyyspaivaraha']+q['kotihoidontuki']+q['sairauspaivaraha']+q['opintotuki'],
>                 q['kokoelake'],p['lapsia'],p)
>         _,q['verot_ilman_etuuksia'],_,_,_,_,_,_,_,_,_,_,_,_,_=self.verotus(p['t'],0,0,p['lapsia'],p)
> 
>         if (p['aikuisia']>1):
>             _,q['puoliso_verot'],_,_,_,_,_,_,_,_,q['puoliso_ptel'],q['puoliso_sairausvakuutusmaksu'],\
>                 q['puoliso_tyotvakmaksu'],q['puoliso_tyel_kokomaksu'],q['puoliso_ylevero']\
>                 =self.verotus(p['puoliso_tulot'],q['puoliso_ansiopvraha']+q['puoliso_aitiyspaivaraha']+q['puoliso_isyyspaivaraha']+q['puoliso_kotihoidontuki']+q['puoliso_sairauspaivaraha']+q['puoliso_opintotuki'],
>                     q['puoliso_kokoelake'],p['lapsia'],p)
>             _,q['puoliso_verot_ilman_etuuksia'],_,_,_,_,_,_,_,_,_,_,_,_,_=self.verotus(p['puoliso_tulot'],0,0,0,p)
>         else:
>             q['puoliso_verot_ilman_etuuksia']=0
>             q['puoliso_verot']=0
>             q['puoliso_ptel']=0
>             q['puoliso_sairausvakuutusmaksu']=0
>             q['puoliso_tyotvakmaksu']=0
1041c1715,1718
<         return tuki
---
>         if p['aikuisia']==1 and p['saa_elatustukea']>0:
>             q['elatustuki']=self.laske_elatustuki(p['lapsia'],p['aikuisia'])
>         else:
>             q['elatustuki']=0
1043,1070c1720,1723
<     def asumistuki2019(self,palkkatulot,muuttulot,vuokra,p):
<         # Ruokakunnan koko
<         # henkilöä    I kuntaryhmä,
<         # e/kk    II kuntaryhmä,
<         # e/kk    III kuntaryhmä,
<         # e/kk    IIII kuntaryhmä,
<         # e/kk
<         # 1    508    492    411    362
<         # 2    735    706    600    527
<         # 3    937    890    761    675
<         # 4    1095    1038    901    804
<         # + lisähenkilöä kohden, e/kk
<         # 
<         # 137    130    123    118
<         # enimmaismenot kuntaryhmittain kun hloita 1-4
<         max_menot=np.array([[508, 492, 411, 362],[735, 706, 600, 527],[937, 890, 761, 675],[1095, 1038, 901, 804]])
<         max_lisa=np.array([137, 130, 123, 118])
<         # kuntaryhma=3
< 
<         max_meno=max_menot[min(3,p['aikuisia']+p['lapsia']-1),p['kuntaryhma']]+max(0,p['aikuisia']+p['lapsia']-4)*max_lisa[p['kuntaryhma']]
< 
<         prosentti=0.8 # vastaa 80 %
<         suojaosa=300*p['aikuisia']
<         perusomavastuu=max(0,0.42*(max(0,palkkatulot-suojaosa)+muuttulot-(603+100*p['aikuisia']+223*p['lapsia'])))
<         if perusomavastuu<10:
<             perusomavastuu=0
<         if p['aikuisia']==1 and p['tyoton']==1 and p['saa_ansiopaivarahaa']==0 and palkkatulot<1 and p['lapsia']==0:
<             perusomavastuu=0
---
>         if p['elakkeella']>0:
>             q['asumistuki']=self.elakkeensaajan_asumistuki(p['puoliso_tulot']+p['t'],q['kokoelake'],p['asumismenot_asumistuki'],p)
>         else:
>             q['asumistuki']=self.asumistuki(p['puoliso_tulot']+p['t'],q['ansiopvraha']+q['puoliso_ansiopvraha']+q['aitiyspaivaraha']+q['isyyspaivaraha']+q['kotihoidontuki']+q['sairauspaivaraha']+q['opintotuki'],p['asumismenot_asumistuki'],p)
1072,1075c1725,1739
<         tuki=max(0,(min(max_meno,vuokra)-perusomavastuu)*prosentti)
< 
<         if self.use_extra_ppr:
<             tuki=tuki*self.extra_ppr_factor
---
>         if p['lapsia']>0:
>             q['pvhoito']=self.paivahoitomenot(p['lapsia_paivahoidossa'],p['puoliso_tulot']+p['t']+q['kokoelake']+q['elatustuki']+q['ansiopvraha']+q['puoliso_ansiopvraha']+q['sairauspaivaraha'],p)
>             if (p['lapsia_kotihoidontuella']>0):
>                 alle_kouluikaisia=max(0,p['lapsia_kotihoidontuella']-p['lapsia_alle_3v'])
>                 q['pvhoito']=0 #max(0,q['pvhoito']-self.kotihoidontuki(p['lapsia_kotihoidontuella'],p['lapsia_alle_3v'],alle_kouluikaisia)) # ok?
>             q['pvhoito_ilman_etuuksia']=self.paivahoitomenot(p['lapsia_paivahoidossa'],p['puoliso_tulot']+p['t']+q['elatustuki'],p)
>             if p['aikuisia']==1:
>                 yksinhuoltajakorotus=1
>             else:
>                 yksinhuoltajakorotus=0
>             q['lapsilisa']=self.laske_lapsilisa(p['lapsia'],yksinhuoltajakorotus=yksinhuoltajakorotus)
>         else:
>             q['pvhoito']=0
>             q['pvhoito_ilman_etuuksia']=0
>             q['lapsilisa']=0
1077,1078c1741,1772
<         if tuki<15:
<             tuki=0
---
>         # lasketaan netotettu ansiopäiväraha huomioiden verot (kohdistetaan ansiopvrahaan se osa veroista, joka ei aiheudu palkkatuloista)
>         q['kokoelake_netto'],q['isyyspaivaraha_netto'],q['ansiopvraha_netto'],q['aitiyspaivaraha_netto'],q['sairauspaivaraha_netto'],\
>             q['puoliso_ansiopvraha_netto'],q['opintotuki_netto']=(0,0,0,0,0,0,0)
>             
>         if p['elakkeella']>0:
>             q['kokoelake_netto']=q['kokoelake']-(q['verot']-q['verot_ilman_etuuksia'])
>         elif p['opiskelija']>0:
>             q['opintotuki_netto']=q['opintotuki']-(q['verot']-q['verot_ilman_etuuksia'])
>         elif p['aitiysvapaalla']>0:
>             q['aitiyspaivaraha_netto']=q['aitiyspaivaraha']-(q['verot']-q['verot_ilman_etuuksia']) 
>         elif p['isyysvapaalla']>0:
>             q['isyyspaivaraha_netto']=q['isyyspaivaraha']-(q['verot']-q['verot_ilman_etuuksia']) 
>         elif p['kotihoidontuella']>0:
>             q['kotihoidontuki_netto']=q['kotihoidontuki']-(q['verot']-q['verot_ilman_etuuksia']) 
>         elif p['sairauspaivarahalla']>0:
>             q['sairauspaivaraha_netto']=q['sairauspaivaraha']-(q['verot']-q['verot_ilman_etuuksia']) 
>         else:
>             q['ansiopvraha_netto']=q['ansiopvraha']-(q['verot']-q['verot_ilman_etuuksia'])
>             
>         if p['aikuisia']>1:
>             if p['puoliso_tyoton']>0: # vanhuuseläkkeellä
>                 q['puoliso_ansiopvraha_netto']=q['puoliso_ansiopvraha']-(q['puoliso_verot']-q['puoliso_verot_ilman_etuuksia'])
>             elif p['puoliso_opiskelija']>0:
>                 q['puoliso_opintotuki_netto']=q['puoliso_opintotuki']-(q['puoliso_verot']-q['puoliso_verot_ilman_etuuksia'])
>             elif p['puoliso_kotihoidontuella']>0:
>                 q['puoliso_kotihoidontuki_netto']=q['puoliso_kotihoidontuki']-(q['puoliso_verot']-q['puoliso_verot_ilman_etuuksia']) 
>         else:
>             q['puoliso_ansiopvraha_netto']=0
>         #print('ptyötön',q['puoliso_ansiopvraha_netto'],q['puoliso_ansiopvraha'],q['puoliso_verot']-q['puoliso_verot_ilman_etuuksia'])
>             
>         if (p['isyysvapaalla']>0 or p['aitiysvapaalla']>0) and p['tyoton']>0:
>             print('error: vanhempainvapaalla & työtön ei toteutettu')
1080,1100c1774,1776
<         return tuki
< 
<         
<     def asumistuki2020(self,palkkatulot,muuttulot,vuokra,p):
<         # Ruokakunnan koko
<         # henkilöä    I kuntaryhmä,
<         # e/kk    II kuntaryhmä,
<         # e/kk    III kuntaryhmä,
<         # e/kk    IIII kuntaryhmä,
<         # e/kk
<         # 1    508    492    411    362
<         # 2    735    706    600    527
<         # 3    937    890    761    675
<         # 4    1095    1038    901    804
<         # + lisähenkilöä kohden, e/kk
<         # 
<         # 137    130    123    118
<         # enimmaismenot kuntaryhmittain kun hloita 1-4
<         max_menot=np.array([[508, 492, 411, 362],[735, 706, 600, 527],[937, 890, 761, 675],[1095, 1038, 901, 804]])
<         max_lisa=np.array([137, 130, 123, 118])
<         # kuntaryhma=3
---
>         # jaetaan ilman etuuksia laskettu pvhoitomaksu puolisoiden kesken ansiopäivärahan suhteessa
>         # eli kohdistetaan päivähoitomaksun korotus ansiopäivärahan mukana
>         # ansiopäivärahaan miten huomioitu päivähoitomaksussa, ilman etuuksia
1102c1778,1784
<         max_meno=max_menot[min(3,p['aikuisia']+p['lapsia']-1),p['kuntaryhma']]+max(0,p['aikuisia']+p['lapsia']-4)*max_lisa[p['kuntaryhma']]
---
>         if q['puoliso_ansiopvraha_netto']+q['ansiopvraha_netto']>0:
>             suhde=max(0,q['ansiopvraha_netto']/(q['puoliso_ansiopvraha_netto']+q['ansiopvraha_netto']))
>             q['ansiopvraha_nettonetto']=q['ansiopvraha_netto']-suhde*(q['pvhoito']-q['pvhoito_ilman_etuuksia'])
>             q['puoliso_ansiopvraha_nettonetto']=q['puoliso_ansiopvraha_netto']-(1-suhde)*(q['pvhoito']-q['pvhoito_ilman_etuuksia'])
>         else:
>             q['ansiopvraha_nettonetto']=0
>             q['puoliso_ansiopvraha_nettonetto']=0
1104,1110c1786,1797
<         prosentti=0.8 # vastaa 80 %
<         suojaosa=300*p['aikuisia']
<         perusomavastuu=max(0,0.42*(max(0,palkkatulot-suojaosa)+muuttulot-(603+100*p['aikuisia']+223*p['lapsia'])))
<         if perusomavastuu<10:
<             perusomavastuu=0
<         if p['aikuisia']==1 and p['tyoton']==1 and p['saa_ansiopaivarahaa']==0 and palkkatulot<1 and p['lapsia']==0:
<             perusomavastuu=0
---
>         if p['opiskelija']>0:
>             q['toimeentulotuki']=0
>         else:
>             q['toimeentulotuki']=self.toimeentulotuki(p['t'],q['verot_ilman_etuuksia'],p['puoliso_tulot'],q['puoliso_verot_ilman_etuuksia'],\
>                 q['elatustuki']+q['opintotuki_netto']+q['puoliso_opintotuki_netto']+q['ansiopvraha_netto']+q['puoliso_ansiopvraha_netto']+q['asumistuki']+q['sairauspaivaraha_netto']\
>                 +q['lapsilisa']+q['kokoelake_netto']+q['aitiyspaivaraha_netto']+q['isyyspaivaraha_netto']+q['kotihoidontuki_netto']+q['puoliso_kotihoidontuki_netto'],\
>                 0,p['asumismenot_toimeentulo'],q['pvhoito'],p)
> 
>         kateen=q['opintotuki']+q['kokoelake']+p['puoliso_tulot']+p['t']+q['aitiyspaivaraha']+q['isyyspaivaraha']+q['kotihoidontuki']+q['asumistuki']+q['toimeentulotuki']\
>             +q['ansiopvraha']+q['puoliso_ansiopvraha']+q['elatustuki']-q['puoliso_verot']-q['verot']-q['pvhoito']+q['lapsilisa']+q['sairauspaivaraha']
>         omanetto=q['opintotuki']+q['kokoelake']+p['t']+q['aitiyspaivaraha']+q['isyyspaivaraha']+q['kotihoidontuki']+q['asumistuki']+q['toimeentulotuki']\
>             +q['ansiopvraha']+q['elatustuki']-q['verot']-q['pvhoito']+q['lapsilisa']+q['sairauspaivaraha']
1112c1799,1837
<         tuki=max(0,(min(max_meno,vuokra)-perusomavastuu)*prosentti)
---
>         q['kateen']=kateen # tulot yhteensä perheessä
>         q['perhetulot_netto']=p['puoliso_tulot']+p['t']-q['verot_ilman_etuuksia']-q['puoliso_verot_ilman_etuuksia']-q['pvhoito_ilman_etuuksia'] # ilman etuuksia
>         q['omattulot_netto']=p['t']-q['verot_ilman_etuuksia']-q['pvhoito_ilman_etuuksia'] # ilman etuuksia
>         q['etuustulo_netto']=q['ansiopvraha_netto']+q['puoliso_ansiopvraha_netto']+q['opintotuki']\
>             +q['aitiyspaivaraha']+q['isyyspaivaraha']+q['kotihoidontuki']+q['asumistuki']\
>             +q['toimeentulotuki']-(q['pvhoito_ilman_etuuksia']-q['pvhoito_ilman_etuuksia'])
>         q['etuustulo_brutto']=q['ansiopvraha']+q['puoliso_ansiopvraha']+q['opintotuki']\
>             +q['aitiyspaivaraha']+q['isyyspaivaraha']+q['kotihoidontuki']+q['asumistuki']\
>             +q['toimeentulotuki']+q['kokoelake']
>         q['brutto']=q['etuustulo_brutto']+p['t']
>             
>         #if p['aikuisia']>1 and False:
>         #    asumismeno=0.5*p['asumismenot_asumistuki']
>         #else:
>         asumismeno=p['asumismenot_asumistuki']
>             
>         q['alv']=self.laske_alv(max(0,kateen-asumismeno)) # vuokran ylittävä osuus tuloista menee kulutukseen
>         
>         # nettotulo, joka huomioidaan elinkaarimallissa alkaen versiosta 4. sisältää omat tulot ja puolet vuokrasta
>         q['netto']=max(0,kateen-q['alv'])
>         #q['netto']=max(0,omanetto-q['alv']-asumismeno)
>         
>         if not legacy:
>             kateen=q['netto']
>         
>         q['palkkatulot']=p['t']
>         if p['elakkeella']<1:
>             q['palkkatulot_eielakkeella']=p['t']
>         else:
>             q['palkkatulot_eielakkeella']=0
>             
>         q['puoliso_palkkatulot']=p['puoliso_tulot']
>         q['puoliso_tulot_netto']=p['puoliso_tulot']-q['puoliso_verot_ilman_etuuksia']
>         q['perustulo']=0
>         q['puoliso_perustulo']=0
>         q['perustulo_netto']=0
>         q['puoliso_perustulo_netto']=0
>         q['perustulo_nettonetto']=0
>         q['puoliso_perustulo_nettonetto']=0
1114,1120c1839,1854
<         if self.use_extra_ppr:
<             tuki=tuki*self.extra_ppr_factor
<     
<         if tuki<15:
<             tuki=0
<     
<         return tuki
---
>         return kateen,q
>         
>     def setup_puoliso_q(self,p,q,puoliso='puoliso_',alku='puoliso_',include_takuuelake=True):
>         q[puoliso+'multiplier']=1
>         q[puoliso+'perustulo']=0
>         q[puoliso+'puhdas_tyoelake']=0
>         q[puoliso+'kansanelake']=0
>         q[puoliso+'tyoelake']=0
>         q[puoliso+'takuuelake']=0
>             
>         q[puoliso+'perustulo']=0
>         q[puoliso+'perustulo_netto']=0
>         q[puoliso+'perustulo_nettonetto']=0
>         
>         if 'lapsikorotus_lapsia' not in p:
>             p['lapsikorotus_lapsia']=p['lapsia']
1121a1856,1861
>         if p['aikuisia']>1 and p[puoliso+'alive']>0:
>             q[puoliso+'palkkatulot']=p[alku+'t']
>             if p[alku+'elakkeella']<1:
>                 q[puoliso+'palkkatulot_eielakkeella']=p[alku+'t']
>             else:
>                 q[puoliso+'palkkatulot_eielakkeella']=0
1123c1863,2665
<     def asumistuki2021(self,palkkatulot,muuttulot,vuokra,p):
---
>             if p[alku+'elakkeella']>0: # vanhuuseläkkeellä
>                 #p[alku+'tyoton']=0
>                 q[puoliso+'isyyspaivaraha'],q[puoliso+'aitiyspaivaraha'],q[puoliso+'kotihoidontuki'],q[puoliso+'sairauspaivaraha']=(0,0,0,0)
>                 q[puoliso+'elake_maksussa']=p[alku+'elake_maksussa']
>                 q[puoliso+'tyoelake']=p[alku+'tyoelake']
>                 q[puoliso+'kansanelake']=p[alku+'kansanelake']
>                 q[puoliso+'elake_tuleva']=0
>                 #p[alku+'saa_ansiopaivarahaa']=0
>                 # huomioi takuueläkkeen, kansaneläke sisältyy eläke_maksussa-osaan
>                 q[puoliso+'kokoelake']=self.laske_kokonaiselake(p['ika'],q[puoliso+'elake_maksussa'],include_takuuelake=include_takuuelake,yksin=0,
>                                             disability=p[puoliso+'disabled'],lapsia=p['lapsikorotus_lapsia'])
>                 q[puoliso+'takuuelake']=q[puoliso+'kokoelake']-q[puoliso+'elake_maksussa']
>                 q[puoliso+'ansiopvraha'],q[puoliso+'puhdasansiopvraha'],q[puoliso+'peruspvraha']=(0,0,0)
>                 q[puoliso+'opintotuki']=0
>                 q[puoliso+'puhdas_tyoelake']=self.laske_puhdas_tyoelake_v2(p['ika'],q[puoliso+'tyoelake'],q[puoliso+'kansanelake'],disability=p[alku+'disabled'],yksin=0,lapsia=p['lapsia'])
>             elif p[alku+'opiskelija']>0:
>                 q[puoliso+'kokoelake']=p[alku+'tyoelake']
>                 q[puoliso+'elake_maksussa']=p[alku+'tyoelake']
>                 q[puoliso+'tyoelake']=p[alku+'tyoelake']
>                 q[puoliso+'elake_tuleva']=0
>                 q[puoliso+'ansiopvraha'],q[puoliso+'puhdasansiopvraha'],q[puoliso+'peruspvraha']=(0,0,0)
>                 q[puoliso+'isyyspaivaraha'],q[puoliso+'aitiyspaivaraha'],q[puoliso+'kotihoidontuki'],q[puoliso+'sairauspaivaraha']=(0,0,0,0)
>                 q[puoliso+'opintotuki']=0
>                 if p[alku+'aitiysvapaalla']>0:
>                     q[puoliso+'aitiyspaivaraha']=self.aitiysraha(p[alku+'vakiintunutpalkka'],p[alku+'aitiysvapaa_kesto'])
>                 elif p[alku+'isyysvapaalla']>0:
>                     q[puoliso+'isyyspaivaraha']=self.isyysraha(p[alku+'vakiintunutpalkka'])
>                 elif p[alku+'kotihoidontuella']>0:
>                     q[puoliso+'kotihoidontuki']=self.kotihoidontuki(p['lapsia_kotihoidontuella'],p['lapsia_alle_3v'],p['lapsia_alle_kouluikaisia'])
>                 else:
>                     q[puoliso+'opintotuki']=self.opintoraha(0,p)
>             else: # ei eläkkeellä     
>                 q[puoliso+'kokoelake']=p[alku+'tyoelake']
>                 q[puoliso+'opintotuki']=0
>                 q[puoliso+'elake_maksussa']=p[alku+'tyoelake']
>                 q[puoliso+'tyoelake']=p[alku+'tyoelake']
>                 q[puoliso+'elake_tuleva']=0
>                 q[puoliso+'ansiopvraha'],q[puoliso+'puhdasansiopvraha'],q[puoliso+'peruspvraha']=(0,0,0)
>                 q[puoliso+'isyyspaivaraha'],q[puoliso+'aitiyspaivaraha'],q[puoliso+'kotihoidontuki'],q[puoliso+'sairauspaivaraha']=(0,0,0,0)
>                 if p[alku+'aitiysvapaalla']>0:
>                     q[puoliso+'aitiyspaivaraha']=self.aitiysraha(p[alku+'vakiintunutpalkka'],p[alku+'aitiysvapaa_kesto'])
>                 elif p[alku+'isyysvapaalla']>0:
>                     q[puoliso+'isyyspaivaraha']=self.isyysraha(p[alku+'vakiintunutpalkka'])
>                 elif p[alku+'sairauspaivarahalla']>0:
>                     q[puoliso+'sairauspaivaraha']=self.sairauspaivaraha(p[alku+'vakiintunutpalkka'])
>                 elif p[alku+'kotihoidontuella']>0:
>                     q[puoliso+'kotihoidontuki']=self.kotihoidontuki(p['lapsia_kotihoidontuella'],p['lapsia_alle_3v'],p['lapsia_alle_kouluikaisia'])
>                 elif p[alku+'tyoton']>0:
>                     q[puoliso+'ansiopvraha'],q[puoliso+'puhdasansiopvraha'],q[puoliso+'peruspvraha']=\
>                         self.ansiopaivaraha(p[alku+'tyoton'],p[alku+'vakiintunutpalkka'],p['lapsikorotus_lapsia'],p[alku+'t'],
>                             p[alku+'saa_ansiopaivarahaa'],p[alku+'tyottomyyden_kesto'],p,alku=alku)
>         else:
>             q[puoliso+'kokoelake']=0
>             q[puoliso+'opintotuki']=0
>             q[puoliso+'elake_maksussa']=0
>             q[puoliso+'tyoelake']=0
>             q[puoliso+'elake_tuleva']=0
>             q[puoliso+'ansiopvraha'],q[puoliso+'puhdasansiopvraha'],q[puoliso+'peruspvraha']=(0,0,0)
>             q[puoliso+'isyyspaivaraha'],q[puoliso+'aitiyspaivaraha'],q[puoliso+'kotihoidontuki'],q[puoliso+'sairauspaivaraha']=(0,0,0,0)
>             q[puoliso+'palkkatulot']=0
>             q[puoliso+'palkkatulot_eielakkeella']=0
>                 
>         return q
>         
>     def setup_omat_q(self,p,omat='omat_',alku='',include_takuuelake=True):
>         q={} # tulokset tänne
>         q[omat+'multiplier']=1
>         q[omat+'perustulo']=0
>         q[omat+'puhdas_tyoelake']=0
>         q[omat+'perustulo_netto']=0
>         q[omat+'perustulo_nettonetto']=0
>         q[omat+'palkkatulot']=p[alku+'t']
>         q[omat+'tyoelake']=0
>         q[omat+'kansanelake']=0
>         q[omat+'takuuelake']=0
>         
>         if p[alku+'elakkeella']<1 and p[alku+'alive']>0:
>             q[omat+'palkkatulot_eielakkeella']=p[alku+'t']
>         else:
>             q[omat+'palkkatulot_eielakkeella']=0
>             
>         if p[alku+'alive']<1:
>             q[omat+'isyyspaivaraha'],q[omat+'aitiyspaivaraha'],q[omat+'kotihoidontuki'],q[omat+'sairauspaivaraha']=(0,0,0,0)
>             q[omat+'elake_maksussa'],q[omat+'tyoelake'],q[omat+'kansanelake'],q[omat+'elake_tuleva']=0,0,0,0
>             q[omat+'ansiopvraha'],q[omat+'puhdasansiopvraha'],q[omat+'peruspvraha']=(0,0,0)
>             q[omat+'opintotuki']=0
>             q[omat+'kokoelake'],q[omat+'takuuelake'],q[omat+'puhdas_tyoelake']=0,0,0
>         elif p[alku+'elakkeella']>0: # vanhuuseläkkeellä
>             #p['tyoton']=0
>             q[omat+'isyyspaivaraha'],q[omat+'aitiyspaivaraha'],q[omat+'kotihoidontuki'],q[omat+'sairauspaivaraha']=(0,0,0,0)
>             q[omat+'elake_maksussa']=p[alku+'elake_maksussa']
>             q[omat+'tyoelake']=p[alku+'tyoelake']
>             q[omat+'kansanelake']=p[alku+'kansanelake']
>             q[omat+'elake_tuleva']=0
>             #p['omat_saa_ansiopaivarahaa']=0
>             # huomioi takuueläkkeen, kansaneläke sisältyy eläke_maksussa-osaan
>             if (p['aikuisia']>1):
>                 q[omat+'kokoelake']=self.laske_kokonaiselake(p['ika'],q[omat+'elake_maksussa'],yksin=0,include_takuuelake=include_takuuelake,
>                                             disability=p[alku+'disabled'],lapsia=p['lapsikorotus_lapsia'])
>                 q[omat+'takuuelake']=q[omat+'kokoelake']-q[omat+'elake_maksussa']
>                 q[omat+'puhdas_tyoelake']=self.laske_puhdas_tyoelake_v2(p['ika'],q[omat+'tyoelake'],q[omat+'kansanelake'],
>                                             disability=p[alku+'disabled'],yksin=0,lapsia=p['lapsia'])
>             else:
>                 q[omat+'kokoelake']=self.laske_kokonaiselake(p['ika'],q[omat+'elake_maksussa'],yksin=1,include_takuuelake=include_takuuelake,
>                                             disability=p[alku+'disabled'],lapsia=p['lapsikorotus_lapsia'])
>                 q[omat+'takuuelake']=q[omat+'kokoelake']-q[omat+'elake_maksussa']
>                 q[omat+'puhdas_tyoelake']=self.laske_puhdas_tyoelake_v2(p['ika'],q[omat+'tyoelake'],q[omat+'kansanelake'],
>                                             disability=p[alku+'disabled'],yksin=1,lapsia=p['lapsia'])
> 
>             q[omat+'ansiopvraha'],q[omat+'puhdasansiopvraha'],q[omat+'peruspvraha']=(0,0,0)
>             q[omat+'opintotuki']=0
>         elif p[alku+'opiskelija']>0:
>             q[omat+'elake_maksussa']=p[alku+'tyoelake']
>             q[omat+'kokoelake']=p[alku+'tyoelake']
>             q[omat+'tyoelake']=p[alku+'tyoelake']
>             q[omat+'elake_tuleva']=0
>             q[omat+'ansiopvraha'],q[omat+'puhdasansiopvraha'],q[omat+'peruspvraha']=(0,0,0)
>             q[omat+'isyyspaivaraha'],q[omat+'aitiyspaivaraha'],q[omat+'kotihoidontuki'],q[omat+'sairauspaivaraha']=(0,0,0,0)
>             q[omat+'opintotuki']=0
>             if p[alku+'aitiysvapaalla']>0:
>                 q[omat+'aitiyspaivaraha']=self.aitiysraha(p[alku+'vakiintunutpalkka'],p[alku+'aitiysvapaa_kesto'])
>             elif p[alku+'isyysvapaalla']>0:
>                 q[omat+'isyyspaivaraha']=self.isyysraha(p[alku+'vakiintunutpalkka'])
>             elif p[alku+'kotihoidontuella']>0:
>                 q[omat+'kotihoidontuki']=self.kotihoidontuki(p['lapsia_kotihoidontuella'],p['lapsia_alle_3v'],p['lapsia_alle_kouluikaisia'])
>             else:
>                 q[omat+'opintotuki']=self.opintoraha(0,p)
>         else: # ei eläkkeellä     
>             q[omat+'opintotuki']=0
>             q[omat+'elake_maksussa']=p[alku+'elake_maksussa']
>             q[omat+'kokoelake']=p[alku+'tyoelake']
>             q[omat+'tyoelake']=p[alku+'tyoelake']
>             q[omat+'elake_tuleva']=0
>             q[omat+'ansiopvraha'],q[omat+'puhdasansiopvraha'],q[omat+'peruspvraha']=(0,0,0)
>             q[omat+'isyyspaivaraha'],q[omat+'aitiyspaivaraha'],q[omat+'kotihoidontuki'],q[omat+'sairauspaivaraha']=(0,0,0,0)
>             if p[alku+'aitiysvapaalla']>0:
>                 q[omat+'aitiyspaivaraha']=self.aitiysraha(p[alku+'vakiintunutpalkka'],p[alku+'aitiysvapaa_kesto'])
>             elif p[alku+'isyysvapaalla']>0:
>                 q[omat+'isyyspaivaraha']=self.isyysraha(p[alku+'vakiintunutpalkka'])
>             elif p[alku+'sairauspaivarahalla']>0:
>                 q[omat+'sairauspaivaraha']=self.sairauspaivaraha(p[alku+'vakiintunutpalkka'])
>             elif p[alku+'kotihoidontuella']>0:
>                 q[omat+'kotihoidontuki']=self.kotihoidontuki(p['lapsia_kotihoidontuella'],p['lapsia_alle_3v'],p['lapsia_alle_kouluikaisia'])
>             elif p['tyoton']>0:
>                 if alku+'omavastuukerroin' in p:
>                     omavastuukerroin=p[alku+'omavastuukerroin']
>                 else:
>                     omavastuukerroin=1.0
>                 q[omat+'ansiopvraha'],q[omat+'puhdasansiopvraha'],q[omat+'peruspvraha']=\
>                     self.ansiopaivaraha(p[alku+'tyoton'],p[alku+'vakiintunutpalkka'],p['lapsikorotus_lapsia'],p[alku+'t'],
>                         p[alku+'saa_ansiopaivarahaa'],p[alku+'tyottomyyden_kesto'],p,omavastuukerroin=omavastuukerroin,alku=omat)
>         return q        
>         
>     def summaa_q(self,p,q,omat='omat_',puoliso='puoliso_'):
>         if p['aikuisia']>1:
>             q['verot']=q[omat+'verot']+q[puoliso+'verot']
>             q['ptel']=q[omat+'ptel']+q[puoliso+'ptel']
>             q['kunnallisvero']=q[omat+'kunnallisvero']+q[puoliso+'kunnallisvero']
>             q['valtionvero']=q[omat+'valtionvero']+q[puoliso+'valtionvero']
>             q['verot_ilman_etuuksia']=q[omat+'verot_ilman_etuuksia']+q[puoliso+'verot_ilman_etuuksia']
>             q['tyotvakmaksu']=q[omat+'tyotvakmaksu']+q[puoliso+'tyotvakmaksu']
>             q['ansiopvraha']=q[puoliso+'ansiopvraha']+q[omat+'ansiopvraha']
>             q['puhdasansiopvraha']=q[puoliso+'puhdasansiopvraha']+q[omat+'puhdasansiopvraha']
>             q['peruspvraha']=q[puoliso+'peruspvraha']+q[omat+'peruspvraha']
>             q['elake_maksussa']=q[puoliso+'elake_maksussa']+q[omat+'elake_maksussa']
>             q['opintotuki']=q[puoliso+'opintotuki']+q[omat+'opintotuki']
>             q['kokoelake']=q[puoliso+'kokoelake']+q[omat+'kokoelake']
>             q['kotihoidontuki']=q[puoliso+'kotihoidontuki']+q[omat+'kotihoidontuki']
>             q['aitiyspaivaraha']=q[puoliso+'aitiyspaivaraha']+q[omat+'aitiyspaivaraha']
>             q['isyyspaivaraha']=q[puoliso+'isyyspaivaraha']+q[omat+'isyyspaivaraha']
>             q['sairauspaivaraha']=q[puoliso+'sairauspaivaraha']+q[omat+'sairauspaivaraha']
>             q['tyel_kokomaksu']=q[puoliso+'tyel_kokomaksu']+q[omat+'tyel_kokomaksu']
>             q['sairausvakuutusmaksu']=q[puoliso+'sairausvakuutusmaksu']+q[omat+'sairausvakuutusmaksu']
>             q['ylevero']=q[puoliso+'ylevero']+q[omat+'ylevero'] # onko kotitalouskohtainen??
>             q['elatustuki']=q[omat+'elatustuki']+q[puoliso+'elatustuki']
>             q['perustulo']=q[omat+'perustulo']+q[puoliso+'perustulo']
>             q['palkkatulot']=q[omat+'palkkatulot']+q[puoliso+'palkkatulot']
>             q['palkkatulot_eielakkeella']=q[puoliso+'palkkatulot_eielakkeella']+q[omat+'palkkatulot_eielakkeella']
>             q['perustulo_netto']=q[omat+'perustulo_netto']+q[puoliso+'perustulo_netto']
>             q['perustulo_nettonetto']=q[omat+'perustulo_nettonetto']+q[puoliso+'perustulo_nettonetto']
>         else:
>             q['verot']=q[omat+'verot']
>             q['ptel']=q[omat+'ptel']
>             q['kunnallisvero']=q[omat+'kunnallisvero']
>             q['valtionvero']=q[omat+'valtionvero']
>             q['verot_ilman_etuuksia']=q[omat+'verot_ilman_etuuksia']
>             q['tyotvakmaksu']=q[omat+'tyotvakmaksu']
>             q['ansiopvraha']=q[omat+'ansiopvraha']
>             q['puhdasansiopvraha']=q[omat+'puhdasansiopvraha']
>             q['peruspvraha']=q[omat+'peruspvraha']
>             q['elake_maksussa']=q[omat+'elake_maksussa']
>             q['opintotuki']=q[omat+'opintotuki']
>             q['kokoelake']=q[omat+'kokoelake']
>             q['kotihoidontuki']=q[omat+'kotihoidontuki']
>             q['aitiyspaivaraha']=q[omat+'aitiyspaivaraha']
>             q['isyyspaivaraha']=q[omat+'isyyspaivaraha']
>             q['sairauspaivaraha']=q[omat+'sairauspaivaraha']
>             q['tyel_kokomaksu']=q[omat+'tyel_kokomaksu']
>             q['sairausvakuutusmaksu']=q[omat+'sairausvakuutusmaksu']
>             q['ylevero']=q[omat+'ylevero']
>             q['elatustuki']=q[omat+'elatustuki']
>             q['perustulo']=q[omat+'perustulo']
>             q['palkkatulot']=q[omat+'palkkatulot']
>             q['palkkatulot_eielakkeella']=q[omat+'palkkatulot_eielakkeella']
>             q['perustulo_netto']=q[omat+'perustulo_netto']
>             q['perustulo_nettonetto']=q[omat+'perustulo_nettonetto']
>         
>         return q
>         
>     def laske_tulot_v2(self,p,tt_alennus=0,include_takuuelake=True,omat='omat_',omatalku='',puoliso='puoliso_',puolisoalku='puoliso_',
>         include_alv=True):
>         '''
>         v4:ää varten tehty tulonlaskenta
>         - eroteltu paremmin omat ja puolison tulot ja etuudet 
>         - perusmuuttujat ovat summamuuttujia
>         '''
>         self.check_p(p)
> 
>         q=self.setup_omat_q(p,omat=omat,alku=omatalku,include_takuuelake=include_takuuelake)
>         q=self.setup_puoliso_q(p,q,puoliso=puoliso)
>         
>         # q['verot] sisältää kaikki veronluonteiset maksut
>         _,q[omat+'verot'],q[omat+'valtionvero'],q[omat+'kunnallisvero'],q[omat+'kunnallisveronperuste'],q[omat+'valtionveroperuste'],\
>             q[omat+'ansiotulovahennys'],q[omat+'perusvahennys'],q[omat+'tyotulovahennys'],q[omat+'tyotulovahennys_kunnallisveroon'],\
>             q[omat+'ptel'],q[omat+'sairausvakuutusmaksu'],q[omat+'tyotvakmaksu'],q[omat+'tyel_kokomaksu'],q[omat+'ylevero']=\
>             self.verotus(q[omat+'palkkatulot'],q[omat+'ansiopvraha']+q[omat+'aitiyspaivaraha']+q[omat+'isyyspaivaraha']+q[omat+'kotihoidontuki']+q[omat+'sairauspaivaraha']+q[omat+'opintotuki'],
>                 q[omat+'kokoelake'],p['lapsia'],p,alku=omatalku)
>         _,q[omat+'verot_ilman_etuuksia'],_,_,_,_,_,_,_,_,_,_,_,_,_=self.verotus(p['t'],0,0,p['lapsia'],p,alku=omatalku)
>         if q[omat+'kokoelake']>0:
>             _,q[omat+'verot_vain_elake'],_,_,_,_,_,_,_,_,_,_,_,_,_=self.verotus(0,0,q[omat+'kokoelake'],p['lapsia'],p,alku=omatalku)
>         else:
>             q[omat+'verot_vain_elake']=0
> 
>         if p['aikuisia']>1 and p[puoliso+'alive']>0:
>             _,q[puoliso+'verot'],q[puoliso+'valtionvero'],q[puoliso+'kunnallisvero'],q[puoliso+'kunnallisveronperuste'],q[puoliso+'valtionveroperuste'],\
>             q[puoliso+'ansiotulovahennys'],q[puoliso+'perusvahennys'],q[puoliso+'tyotulovahennys'],q[puoliso+'tyotulovahennys_kunnallisveroon'],\
>             q[puoliso+'ptel'],q[puoliso+'sairausvakuutusmaksu'],q[puoliso+'tyotvakmaksu'],q[puoliso+'tyel_kokomaksu'],q[puoliso+'ylevero']=\
>                 self.verotus(q[puoliso+'palkkatulot'],
>                     q[puoliso+'ansiopvraha']+q[puoliso+'aitiyspaivaraha']+q[puoliso+'isyyspaivaraha']+q[puoliso+'kotihoidontuki']+q[puoliso+'sairauspaivaraha']+q[puoliso+'opintotuki'],
>                     q[puoliso+'kokoelake'],0,p,alku=puoliso) # onko oikein että lapsia 0 tässä????
>             _,q[puoliso+'verot_ilman_etuuksia'],_,_,_,_,_,_,_,_,_,_,_,_,_=self.verotus(q[puoliso+'palkkatulot'],0,0,0,p,alku=puoliso)
>             if q[puoliso+'kokoelake']>0:
>                 _,q[puoliso+'verot_vain_elake'],_,_,_,_,_,_,_,_,_,_,_,_,_=self.verotus(0,0,q[puoliso+'kokoelake'],p['lapsia'],p,alku=omatalku)
>             else:
>                 q[puoliso+'verot_vain_elake']=0
>         else:
>             q[puoliso+'verot_ilman_etuuksia'],q[puoliso+'verot'],q[puoliso+'valtionvero']=0,0,0
>             q[puoliso+'kunnallisvero'],q[puoliso+'kunnallisveronperuste'],q[puoliso+'valtionveroperuste']=0,0,0
>             q[puoliso+'tyotulovahennys'],q[puoliso+'ansiotulovahennys']=0,0
>             q[puoliso+'perusvahennys'],q[puoliso+'tyotulovahennys_kunnallisveroon']=0,0
>             q[puoliso+'ptel']=0
>             q[puoliso+'sairausvakuutusmaksu']=0
>             q[puoliso+'tyotvakmaksu']=0
>             q[puoliso+'tyel_kokomaksu']=0
>             q[puoliso+'ylevero']=0
>             q[puoliso+'verot_vain_elake']=0
>             
>         # elatustuki (ei vaikuta kannnusteisiin, vain tuloihin, koska ei yhteensovitusta)
>         if p['aikuisia']==1 and p['saa_elatustukea']>0 and p[omatalku+'alive']>0:
>             q[omat+'elatustuki']=self.laske_elatustuki(p['lapsia'],p['aikuisia'])
>         else:
>             q[omat+'elatustuki']=0
>         
>         q[puoliso+'elatustuki']=0
>         
>         q=self.summaa_q(p,q,omat=omat,puoliso=puoliso)
> 
>         if p[puolisoalku+'alive']<1 and p[omatalku+'alive']<1:
>             q['asumistuki'] = 0
>         elif p[omatalku+'elakkeella']>0 and p[puolisoalku+'elakkeella']>0 :
>             q['asumistuki']=self.elakkeensaajan_asumistuki(q['palkkatulot'],q['kokoelake'],p['asumismenot_asumistuki'],p)
>         else:
>             q['asumistuki']=self.asumistuki(q['palkkatulot'],q['ansiopvraha']+q['aitiyspaivaraha']+q['isyyspaivaraha']
>                                             +q['kotihoidontuki']+q['sairauspaivaraha']+q['opintotuki'],
>                                             p['asumismenot_asumistuki'],p)
>             
>         if p['lapsia']>0:
>             if p['aikuisia']>1:
>                 if p[omatalku+'aitiysvapaalla']>0 or p[omatalku+'isyysvapaalla']>0 or p[omatalku+'kotihoidontuella']>0 \
>                     or p[puolisoalku+'aitiysvapaalla']>0 or p[puolisoalku+'isyysvapaalla']>0 or p[puolisoalku+'kotihoidontuella']>0:
>                     ei_pvhoitoa=True
>                 else:
>                     ei_pvhoitoa=False
>             else:
>                 if p[omatalku+'aitiysvapaalla']>0 or p[omatalku+'isyysvapaalla']>0 or p[omatalku+'kotihoidontuella']>0:
>                     ei_pvhoitoa=True
>                 else:
>                     ei_pvhoitoa=False
>         
>             if ei_pvhoitoa:
>                 q['pvhoito']=0
>                 q['pvhoito_ilman_etuuksia']=0
>             else:
>                 # kuukausi lomalla, jolloin ei päivähoitoa
>                 q['pvhoito']=11/12*self.paivahoitomenot(p['lapsia_paivahoidossa'],q['palkkatulot']+q['kokoelake']+q['elatustuki']+q['ansiopvraha']+q['sairauspaivaraha'],p)
>                 if (p['lapsia_kotihoidontuella']>0):
>                     alle_kouluikaisia=max(0,p['lapsia_kotihoidontuella']-p['lapsia_alle_3v'])
>                     q['pvhoito']=max(0,q['pvhoito']-self.kotihoidontuki(p['lapsia_kotihoidontuella'],p['lapsia_alle_3v'],alle_kouluikaisia)) # ok?
>                 q['pvhoito_ilman_etuuksia']=11/12*self.paivahoitomenot(p['lapsia_paivahoidossa'],p[puolisoalku+'t']+p[omatalku+'t']+q['elatustuki'],p)
>                 #if p['lapsia_paivahoidossa']>0:
>                 #    print('pv',q['pvhoito'],'lapsia',p['lapsia_paivahoidossa'],'t',q['palkkatulot'],'etuus',q['kokoelake']+q['elatustuki']+q['ansiopvraha']+q['sairauspaivaraha'])
>                 
>             if p['aikuisia']==1:
>                 yksinhuoltajakorotus=1
>             else:
>                 yksinhuoltajakorotus=0
>             q['lapsilisa']=self.laske_lapsilisa(p['lapsia'],yksinhuoltajakorotus=yksinhuoltajakorotus)
>         else:
>             q['pvhoito']=0
>             q['pvhoito_ilman_etuuksia']=0
>             q['lapsilisa']=0
>     
>         # lasketaan netotettu ansiopäiväraha huomioiden verot (kohdistetaan ansiopvrahaan se osa veroista, joka ei aiheudu palkkatuloista)
>         self.update_netto(p,q,omat,puoliso,omatalku,puolisoalku)
>             
>         if (p[omatalku+'isyysvapaalla']>0 or p[omatalku+'aitiysvapaalla']>0) and p[omatalku+'tyoton']>0:
>             print('error: vanhempainvapaalla & työtön ei toteutettu')
>         if (p[puolisoalku+'isyysvapaalla']>0 or p[puolisoalku+'aitiysvapaalla']>0) and p[puolisoalku+'tyoton']>0:
>             print('error: vanhempainvapaalla & työtön ei toteutettu')
>     
>         # jaetaan ilman etuuksia laskettu pvhoitomaksu puolisoiden kesken ansiopäivärahan suhteessa
>         # eli kohdistetaan päivähoitomaksun korotus ansiopäivärahan mukana
>         # ansiopäivärahaan miten huomioitu päivähoitomaksussa, ilman etuuksia
> 
>         self.update_toimeentulotuki(p,q,omat,puoliso,omatalku,puolisoalku)
> 
>         # sisältää sekä omat että puolison tulot ja menot
>         kateen=q['opintotuki']+q['kokoelake']+q['palkkatulot']+q['aitiyspaivaraha']+q['isyyspaivaraha']\
>             +q['kotihoidontuki']+q['asumistuki']+q['toimeentulotuki']+q['ansiopvraha']+q['elatustuki']\
>             -q['verot']-q['pvhoito']+q['lapsilisa']+q['sairauspaivaraha']
> 
>         brutto_omat=q[omat+'opintotuki']+q[omat+'kokoelake']+q[omat+'palkkatulot']+q[omat+'aitiyspaivaraha']\
>             +q[omat+'isyyspaivaraha']+q[omat+'kotihoidontuki']+\
>             +q[omat+'ansiopvraha']+q[omat+'elatustuki']+q[omat+'sairauspaivaraha']
>         kateen_omat=brutto_omat-q[omat+'verot']
>         etuusnetto_omat=brutto_omat-q[omat+'palkkatulot']-(q[omat+'verot']-q[omat+'verot_ilman_etuuksia'])
>                     
>         q['kateen']=kateen # tulot yhteensä perheessä
>         q['etuustulo_netto']=q['ansiopvraha']+q['opintotuki']+q['aitiyspaivaraha']+q['isyyspaivaraha']+q['kotihoidontuki']+q['asumistuki']\
>             +q['toimeentulotuki']+q['kokoelake']+q['elatustuki']+q['lapsilisa']+q['sairauspaivaraha']\
>             -(q['pvhoito']-q['pvhoito_ilman_etuuksia'])-(q['verot']-q['verot_ilman_etuuksia'])
>             
>         asumismeno=p['asumismenot_asumistuki']
>             
>         if include_alv:
>             q['alv']=self.laske_alv(max(0,kateen-asumismeno)) # vuokran ylittävä osuus tuloista menee kulutukseen
>         else:
>             q['alv']=0
>         
>         # nettotulo, joka huomioidaan elinkaarimallissa alkaen versiosta 4. sisältää omat tulot ja puolet vuokrasta
>         q['netto']=max(0,kateen-q['alv'])
>         
>         self.split_cost_to_wage_unemp(p,q,omat,puoliso,omatalku,puolisoalku)
>             
>         # LISÄÄ ALV-hajotelma etuuksiin!    
>         self.split_cost_to_wage_unemp(p,q,omat,puoliso,omatalku,puolisoalku)
>          
>         if p['aikuisia']>1:
>             brutto_puoliso=q[puoliso+'opintotuki']+q[puoliso+'kokoelake']+q[puoliso+'palkkatulot']+q[puoliso+'aitiyspaivaraha']\
>                 +q[puoliso+'isyyspaivaraha']+q[puoliso+'kotihoidontuki']\
>                 +q[puoliso+'ansiopvraha']+q[puoliso+'elatustuki']+q[puoliso+'sairauspaivaraha']
>             kateen_puoliso=brutto_puoliso-q[puoliso+'verot']
>             etuusnetto_puoliso=brutto_puoliso-q[puoliso+'palkkatulot']-(q[puoliso+'verot']-q[puoliso+'verot_ilman_etuuksia'])
>             
>             if kateen_puoliso+kateen_omat<1e-6:
>                 suhde=0.5
>             else: # jaetaan bruttotulojen suhteessa, mutta tasoitetaan eroja
>                 if kateen_omat>kateen_puoliso:
>                     if (q['asumistuki']+q['lapsilisa']+q['toimeentulotuki']-q['alv']-q['pvhoito'])>0:
>                         suhde=kateen_puoliso/(kateen_puoliso+kateen_omat)
>                     else:
>                         suhde=kateen_omat/(kateen_puoliso+kateen_omat)
>                 else:
>                     if (q['asumistuki']+q['lapsilisa']+q['toimeentulotuki']-q['alv']-q['pvhoito'])>0:
>                         suhde=kateen_puoliso/(kateen_puoliso+kateen_omat)
>                     else:
>                         suhde=kateen_omat/(kateen_puoliso+kateen_omat)
>                 
>             #print(suhde,1.0-suhde,q['asumistuki']+q['lapsilisa']+q['toimeentulotuki']-q['alv']-q['pvhoito'],kateen_omat,kateen_puoliso)
>             
>             etuusnetto_omat+=(q['asumistuki']+q['lapsilisa']+q['toimeentulotuki'])*suhde
>             kateen_omat+=(q['asumistuki']+q['lapsilisa']+q['toimeentulotuki'])*suhde
>             brutto_omat+=(q['asumistuki']+q['lapsilisa']+q['toimeentulotuki'])*suhde
>             if kateen_omat>0:
>                 r2=etuusnetto_omat/kateen_omat
>             else:
>                 r2=1
>                 
>             q[omat+'toimeentulotuki']=q['toimeentulotuki']*suhde
>             q[omat+'asumistuki']=q['asumistuki']*suhde
>             q[omat+'lapsilisa']=q['lapsilisa']*suhde
> 
>             if etuusnetto_omat>0:
>                 r_t_e=q[omat+'toimeentulotuki']/etuusnetto_omat
>                 r_a_e=q[omat+'asumistuki']/etuusnetto_omat
>                 r_tt_e=q[omat+'ansiopvraha_nettonetto']/etuusnetto_omat
>                 r_tt_l=q[omat+'lapsilisa']/etuusnetto_omat
>                 r_tt_ko=q[omat+'kokoelake']/etuusnetto_omat
>             else:
>                 r_t_e=0
>                 r_a_e=0
>                 r_tt_e=0
>                 r_tt_l=0
>                 r_tt_ko=0
>             
>             #etuusnetto_omat+=(q['asumistuki']+q['lapsilisa']+q['toimeentulotuki']-r2*(q['alv']+q['pvhoito']))*suhde
>             etuusnetto_omat+=(-r2*(q['alv']+q['pvhoito']))*suhde
>             kateen_omat+=(-q['alv']-q['pvhoito'])*suhde
>             q[omat+'palkkatulot_nettonetto']+=-(1-r2)*q['alv']*suhde
>             q[omat+'toimeentulotuki']+=-r_t_e*q['alv']*suhde*r2
>             q[omat+'asumistuki']+=-r_a_e*q['alv']*suhde*r2
>             q[omat+'ansiopvraha_nettonetto']+=-r_tt_e*q['alv']*suhde*r2
>             q[omat+'kokoelake']+=-r_tt_e*q['alv']*suhde*r2
>             q[omat+'pvhoito']=q['pvhoito']*suhde
>             q[omat+'lapsilisa']+=-r_tt_l*q['alv']*suhde*r2
>             q[omat+'alv']=q['alv']*suhde
>             
>             etuusnetto_puoliso+=(q['asumistuki']+q['lapsilisa']+q['toimeentulotuki'])*(1-suhde)
>             kateen_puoliso+=(q['asumistuki']+q['lapsilisa']+q['toimeentulotuki'])*(1-suhde)
>             brutto_puoliso+=(q['asumistuki']+q['lapsilisa']+q['toimeentulotuki'])*(1-suhde)
>             if kateen_puoliso>0:
>                 r2=etuusnetto_puoliso/kateen_puoliso
>             else:
>                 r2=1
>                 
>             q[puoliso+'toimeentulotuki']=q['toimeentulotuki']*(1-suhde)
>             q[puoliso+'asumistuki']=q['asumistuki']*(1-suhde)
>             q[puoliso+'lapsilisa']=q['lapsilisa']*(1-suhde)
>             if etuusnetto_puoliso>0:
>                 r_t_e=q[puoliso+'toimeentulotuki']/etuusnetto_puoliso
>                 r_a_e=q[puoliso+'asumistuki']/etuusnetto_puoliso
>                 r_tt_e=q[puoliso+'ansiopvraha_nettonetto']/etuusnetto_puoliso
>                 r_tt_l=q[puoliso+'lapsilisa']/etuusnetto_puoliso
>                 r_tt_ko=q[puoliso+'kokoelake']/etuusnetto_puoliso
>                 r_tt_op=q[puoliso+'opintotuki']/etuusnetto_puoliso
>             else:
>                 r_t_e=0
>                 r_a_e=0
>                 r_tt_e=0
>                 r_tt_l=0
>                 r_tt_ko=0
>                 r_tt_op=0
> 
>             #etuusnetto_puoliso+=(q['asumistuki']+q['lapsilisa']+q['toimeentulotuki']-r2*(q['alv']+q['pvhoito']))*(1-suhde)
>             etuusnetto_puoliso+=(-r2*(q['alv']+q['pvhoito']))*(1-suhde)
>             kateen_puoliso+=(-q['alv']-q['pvhoito'])*(1-suhde)
>             q[puoliso+'palkkatulot_nettonetto']+=-(1-r2)*q['alv']*(1-suhde)
>             q[puoliso+'toimeentulotuki']+=-r_t_e*q['alv']*(1-suhde)*r2
>             q[puoliso+'asumistuki']+=-r_a_e*q['alv']*(1-suhde)*r2
>             q[puoliso+'ansiopvraha_nettonetto']+=-r_tt_e*q['alv']*suhde*r2
>             q[puoliso+'kokoelake']+=-r_tt_e*q['alv']*suhde*r2
>             q[puoliso+'opintotuki']+=-r_tt_op*q['alv']*suhde*r2
>             q[puoliso+'pvhoito']=q['pvhoito']*(1-suhde)
>             q[puoliso+'lapsilisa']+=-r_tt_l*q['alv']*suhde*r2
>             q[puoliso+'alv']=q['alv']*(1-suhde)
>             
>             #if kateen_puoliso<1e-6:
>             #    print(kateen_omat,kateen_puoliso)
>         else:
>             kateen_omat+=q['asumistuki']+q['lapsilisa']+q['toimeentulotuki']
>             brutto_omat+=q['asumistuki']+q['lapsilisa']+q['toimeentulotuki']
>             etuusnetto_omat+=q['asumistuki']+q['lapsilisa']+q['toimeentulotuki']
>             if kateen_omat>0:
>                 r2=etuusnetto_omat/kateen_omat
>             else:
>                 r2=1
>                 
>             kateen_omat += -q['alv']-q['pvhoito']
>                 
>             if etuusnetto_omat>0:
>                 r_t_e=q['toimeentulotuki']/etuusnetto_omat
>                 r_a_e=q['asumistuki']/etuusnetto_omat
>                 r_tt_e=q['ansiopvraha_nettonetto']/etuusnetto_omat
>                 r_tt_l=q['lapsilisa']/etuusnetto_omat
>                 r_tt_el=q['elatustuki']/etuusnetto_omat
>                 r_tt_op=q['opintotuki']/etuusnetto_omat
>                 r_tt_ko=q['kokoelake']/etuusnetto_omat
>             else:
>                 r_t_e=0
>                 r_a_e=0
>                 r_tt_e=0
>                 r_tt_l=0
>                 r_tt_el=0
>                 r_tt_op=0
>             
>             etuusnetto_omat+=-r2*(q['alv']+q['pvhoito'])
>             q[omat+'palkkatulot_nettonetto']+=-(1-r2)*q['alv']
>             q[omat+'toimeentulotuki']=q['toimeentulotuki']-r_t_e*q['alv']*r2
>             q[omat+'asumistuki']=q['asumistuki']-r_a_e*q['alv']*r2
>             q[omat+'ansiopvraha_nettonetto']+=-r_tt_e*q['alv']*r2
>             q[omat+'kokoelake']+=-r_tt_e*q['alv']*r2
>             q[omat+'opintotuki']+=-r_tt_op*q['alv']*r2
>             q[omat+'pvhoito']=q['pvhoito']
>             q[omat+'lapsilisa']=q['lapsilisa']-r_tt_l*q['alv']*r2
>             q['elatustuki']=q['elatustuki']-r_tt_el*q['alv']*r2
>             q[omat+'alv']=q['alv']
>             kateen_puoliso=0
>             brutto_puoliso=0
>             etuusnetto_puoliso=0
>             q[puoliso+'toimeentulotuki']=0
>             q[puoliso+'asumistuki']=0
>             q[puoliso+'pvhoito']=0
>             q[puoliso+'lapsilisa']=0
>             q[puoliso+'alv']=0
> 
>         q[omat+'netto']=kateen_omat
>         q[puoliso+'netto']=kateen_puoliso
>         q[omat+'etuustulo_netto']=etuusnetto_omat
>         q[puoliso+'etuustulo_netto']=etuusnetto_puoliso
>         q['toimeentulotuki']=q[puoliso+'toimeentulotuki']+q[omat+'toimeentulotuki']
>         q['asumistuki']=q[puoliso+'asumistuki']+q[omat+'asumistuki']
>         q['kokoelake']=q[puoliso+'kokoelake']+q[omat+'kokoelake']
>         q['opintotuki']=q[puoliso+'opintotuki']+q[omat+'opintotuki']
>         q['lapsilisa']=q[puoliso+'lapsilisa']+q[omat+'lapsilisa']
>         q['ansiopvraha_nettonetto']=q[puoliso+'ansiopvraha_nettonetto']+q[omat+'ansiopvraha_nettonetto']
>         q['etuustulo_netto_v2']=q[puoliso+'etuustulo_netto']+q[omat+'etuustulo_netto']
>         q['palkkatulot_nettonetto']=q[puoliso+'palkkatulot_nettonetto']+q[omat+'palkkatulot_nettonetto']
>         
>         #print(q[omat+'netto']+q[puoliso+'netto']-q['netto'])
>         assert(np.abs(q[omat+'netto']+q[puoliso+'netto']-q['netto'])<1e-10)
> 
>         #q[omat+'etuustulo_brutto']=brutto_omat
>         #q[puoliso+'etuustulo_brutto']=brutto_puoliso
>         
>         q[omat+'etuustulo_brutto']=q[omat+'ansiopvraha']+q[omat+'opintotuki']+q[omat+'sairauspaivaraha']+q[omat+'aitiyspaivaraha']\
>             +q[omat+'isyyspaivaraha']+q[omat+'kotihoidontuki']+q[omat+'asumistuki']\
>             +q[omat+'toimeentulotuki']+q[omat+'kokoelake']+q[omat+'elatustuki']+q[omat+'lapsilisa'] # + sairauspaivaraha
>         q[puoliso+'etuustulo_brutto']=q[puoliso+'ansiopvraha']+q[puoliso+'opintotuki']+q[puoliso+'sairauspaivaraha']+q[puoliso+'aitiyspaivaraha']\
>             +q[puoliso+'isyyspaivaraha']+q[puoliso+'kotihoidontuki']+q[puoliso+'asumistuki']\
>             +q[puoliso+'toimeentulotuki']+q[puoliso+'kokoelake']+q[puoliso+'elatustuki']+q[puoliso+'lapsilisa']
>         q['etuustulo_brutto']=q[omat+'etuustulo_brutto']+q[puoliso+'etuustulo_brutto'] # + sairauspaivaraha
>         
>         kateen=q['netto']
>         
>         # check that omat, puoliso split is ok
>         #self.check_q_netto(q,p['aikuisia'],omat,puoliso)
> 
>         return kateen,q
> 
>     def update_toimeentulotuki(self,p,q,omat,puoliso,omatalku,puolisoalku):
>         if p['aikuisia']<2:
>             if p[omatalku+'opiskelija']>0 or p[omatalku+'alive']<1:
>                 q['toimeentulotuki']=0
>             else:
>                 q['toimeentulotuki']=self.toimeentulotuki(p[omatalku+'t'],q[omat+'verot_ilman_etuuksia'],0,0,\
>                     q['elatustuki']+q['opintotuki_netto']+q['ansiopvraha_netto']+q['asumistuki']+q['sairauspaivaraha_netto']\
>                     +q['lapsilisa']+q['kokoelake_netto']+q['aitiyspaivaraha_netto']+q['isyyspaivaraha_netto']+q['kotihoidontuki_netto'],\
>                     0,p['asumismenot_toimeentulo'],q['pvhoito'],p)
>                 #print(p[omatalku+'t'],q[omat+'verot_ilman_etuuksia'],0,0,\
>                 #    q['elatustuki']+q['opintotuki']+q['ansiopvraha_netto']+q['asumistuki']+q['sairauspaivaraha_netto']\
>                 #    +q['lapsilisa']+q['kokoelake_netto']+q['aitiyspaivaraha_netto']+q['isyyspaivaraha_netto']+q['kotihoidontuki'],\
>                 #    0,p['asumismenot_toimeentulo'],q['pvhoito'])
>                 #print(q['elatustuki'],q['opintotuki'],q['ansiopvraha_netto'],q['asumistuki'],q['sairauspaivaraha_netto'])
>                 #print(q['lapsilisa'],q['kokoelake_netto'],q['aitiyspaivaraha_netto'],q['isyyspaivaraha_netto'],q['kotihoidontuki'])
>                 #print('*',q['ansiopvraha_netto'],q['asumistuki'],q['lapsilisa'],q['kokoelake_netto'],q['elatustuki'])
>         else:
>             if p[omatalku+'opiskelija']>0 and p[puolisoalku+'opiskelija']>0:
>                 q['toimeentulotuki']=0
>             else:
>                 q['toimeentulotuki']=self.toimeentulotuki(p[omatalku+'t'],q[omat+'verot_ilman_etuuksia'],p[puolisoalku+'t'],q[puoliso+'verot_ilman_etuuksia'],\
>                     q['elatustuki']+q['opintotuki_netto']+q['ansiopvraha_netto']+q['asumistuki']+q['sairauspaivaraha_netto']\
>                     +q['lapsilisa']+q['kokoelake_netto']+q['aitiyspaivaraha_netto']+q['isyyspaivaraha_netto']+q['kotihoidontuki_netto'],\
>                     0,p['asumismenot_toimeentulo'],q['pvhoito'],p)
>                             
>     def update_netto(self,p,q,omat,puoliso,omatalku,puolisoalku):
>         q['kokoelake_netto'],q['isyyspaivaraha_netto'],q['ansiopvraha_netto'],q['aitiyspaivaraha_netto'],q['sairauspaivaraha_netto'],\
>             q[puoliso+'ansiopvraha_netto'],q['opintotuki_netto']=(0,0,0,0,0,0,0)
>         q[omat+'kokoelake_netto'],q[omat+'isyyspaivaraha_netto'],q[omat+'ansiopvraha_netto'],q[omat+'aitiyspaivaraha_netto'],q[omat+'sairauspaivaraha_netto'],\
>             q[omat+'opintotuki_netto'],q[omat+'kotihoidontuki_netto']=(0,0,0,0,0,0,0)
>         q[puoliso+'kokoelake_netto'],q[puoliso+'isyyspaivaraha_netto'],q[puoliso+'ansiopvraha_netto'],q[puoliso+'aitiyspaivaraha_netto'],q[puoliso+'sairauspaivaraha_netto'],\
>             q[puoliso+'opintotuki_netto'],q[puoliso+'kotihoidontuki_netto']=(0,0,0,0,0,0,0)
>             
>         if p[omatalku+'elakkeella']>0:
>             q[omat+'kokoelake_netto']=q[omat+'kokoelake']-(q[omat+'verot']-q[omat+'verot_ilman_etuuksia'])
>         elif p[omatalku+'opiskelija']>0:
>             q[omat+'opintotuki_netto']=q[omat+'opintotuki']-(q[omat+'verot']-q[omat+'verot_ilman_etuuksia'])
>         elif p[omatalku+'aitiysvapaalla']>0:
>             q[omat+'aitiyspaivaraha_netto']=q[omat+'aitiyspaivaraha']-(q[omat+'verot']-q[omat+'verot_ilman_etuuksia']) 
>         elif p[omatalku+'isyysvapaalla']>0:
>             q[omat+'isyyspaivaraha_netto']=q[omat+'isyyspaivaraha']-(q[omat+'verot']-q[omat+'verot_ilman_etuuksia']) 
>         elif p[omatalku+'kotihoidontuella']>0:
>             q[omat+'kotihoidontuki_netto']=q[omat+'kotihoidontuki']-(q[omat+'verot']-q[omat+'verot_ilman_etuuksia']) 
>         elif p[omatalku+'sairauspaivarahalla']>0:
>             q[omat+'sairauspaivaraha_netto']=q[omat+'sairauspaivaraha']-(q[omat+'verot']-q[omat+'verot_ilman_etuuksia']) 
>         else:
>             q[omat+'ansiopvraha_netto']=q[omat+'ansiopvraha']-(q[omat+'verot']-q[omat+'verot_ilman_etuuksia'])
> 
>         if p[puolisoalku+'elakkeella']>0:
>             q[puoliso+'kokoelake_netto']=q[puoliso+'kokoelake']-(q[puoliso+'verot']-q[puoliso+'verot_ilman_etuuksia'])
>         elif p[puolisoalku+'opiskelija']>0:
>             q[puoliso+'opintotuki_netto']=q[puoliso+'opintotuki']-(q[puoliso+'verot']-q[puoliso+'verot_ilman_etuuksia'])
>         elif p[puolisoalku+'aitiysvapaalla']>0:
>             q[puoliso+'aitiyspaivaraha_netto']=q[puoliso+'aitiyspaivaraha']-(q[puoliso+'verot']-q[puoliso+'verot_ilman_etuuksia']) 
>         elif p[puolisoalku+'isyysvapaalla']>0:
>             q[puoliso+'isyyspaivaraha_netto']=q[puoliso+'isyyspaivaraha']-(q[puoliso+'verot']-q[puoliso+'verot_ilman_etuuksia']) 
>         elif p[puolisoalku+'kotihoidontuella']>0:
>             q[puoliso+'kotihoidontuki_netto']=q[puoliso+'kotihoidontuki']-(q[puoliso+'verot']-q[puoliso+'verot_ilman_etuuksia']) 
>         elif p[puolisoalku+'sairauspaivarahalla']>0:
>             q[puoliso+'sairauspaivaraha_netto']=q[puoliso+'sairauspaivaraha']-(q[puoliso+'verot']-q[puoliso+'verot_ilman_etuuksia']) 
>         else:
>             q[puoliso+'ansiopvraha_netto']=q[puoliso+'ansiopvraha']-(q[puoliso+'verot']-q[puoliso+'verot_ilman_etuuksia'])
> 
>         q[puoliso+'palkkatulot_netto']=q[puoliso+'palkkatulot']-q[puoliso+'verot_ilman_etuuksia']
>         q[omat+'palkkatulot_netto']=q[omat+'palkkatulot']-q[omat+'verot_ilman_etuuksia']
> 
>         q['palkkatulot_netto']=q[omat+'palkkatulot_netto']+q[puoliso+'palkkatulot_netto']
>         q['ansiopvraha_netto']=q[omat+'ansiopvraha_netto']+q[puoliso+'ansiopvraha_netto']
>         q['kokoelake_netto']=q[omat+'kokoelake_netto']+q[puoliso+'kokoelake_netto']
>         q['aitiyspaivaraha_netto']=q[omat+'aitiyspaivaraha_netto']+q[puoliso+'aitiyspaivaraha_netto']
>         q['isyyspaivaraha_netto']=q[omat+'isyyspaivaraha_netto']+q[puoliso+'isyyspaivaraha_netto']
>         q['kotihoidontuki_netto']=q[omat+'kotihoidontuki_netto']+q[puoliso+'kotihoidontuki_netto']
>         q['sairauspaivaraha_netto']=q[omat+'sairauspaivaraha_netto']+q[puoliso+'sairauspaivaraha_netto']
> 
>     def split_vat_to_wage_unemp(self,p,q,omat,puoliso,omatalku,puolisoalku):
>         if q['palkkatulot_netto']>0:
>             if p['aikuisia']>1:
>                 if p[omatalku+'alive']>0 and p[puolisoalku+'alive']>0:
>                     suhde=max(0,q[omat+'palkkatulot_netto']/q['palkkatulot_netto'])
>                     q[omat+'palkkatulot_nettonetto']=q[omat+'palkkatulot_netto']-suhde*q['pvhoito_ilman_etuuksia']
>                     q[puoliso+'palkkatulot_nettonetto']=q[puoliso+'palkkatulot_netto']-(1-suhde)*q['pvhoito_ilman_etuuksia']
>                 elif p[omatalku+'alive']>0:
>                     q[omat+'palkkatulot_nettonetto']=q[omat+'palkkatulot_netto']-q['pvhoito_ilman_etuuksia']
>                     q[puoliso+'palkkatulot_nettonetto']=0
>                 elif p[puolisoalku+'alive']>0:
>                     q[puoliso+'palkkatulot_nettonetto']=q[puoliso+'palkkatulot_netto']-q['pvhoito_ilman_etuuksia']
>                     q[omat+'palkkatulot_nettonetto']=0
>                 else:
>                     q[omat+'palkkatulot_nettonetto']=0
>                     q[puoliso+'palkkatulot_nettonetto']=0
>             else:
>                 q[omat+'palkkatulot_nettonetto']=q[omat+'palkkatulot_netto']-q['pvhoito_ilman_etuuksia']
>                 q[puoliso+'palkkatulot_nettonetto']=0
>                 
>             q['palkkatulot_nettonetto']=q[puoliso+'palkkatulot_nettonetto']+q[omat+'palkkatulot_nettonetto']
>         else:
>             q[omat+'palkkatulot_nettonetto']=0
>             q[puoliso+'palkkatulot_nettonetto']=0
>             q['palkkatulot_nettonetto']=0
> 
>         if q['ansiopvraha_netto']>0:
>             if p['aikuisia']>1:
>                 if p[omatalku+'alive']>0 and p[puolisoalku+'alive']>0:
>                     suhde=max(0,q[omat+'ansiopvraha_netto']/q['ansiopvraha_netto'])
>                     q[omat+'ansiopvraha_nettonetto']=q[omat+'ansiopvraha_netto']-suhde*(q['pvhoito']-q['pvhoito_ilman_etuuksia'])
>                     q[puoliso+'ansiopvraha_nettonetto']=q[puoliso+'ansiopvraha_netto']-(1-suhde)*(q['pvhoito']-q['pvhoito_ilman_etuuksia'])
>                 elif p[omatalku+'alive']>0:
>                     q[omat+'ansiopvraha_nettonetto']=q[omat+'ansiopvraha_netto']-(q['pvhoito']-q['pvhoito_ilman_etuuksia'])
>                     q[puoliso+'ansiopvraha_nettonetto']=0
>                 elif p[puolisoalku+'alive']>0:
>                     q[puoliso+'ansiopvraha_nettonetto']=q[puoliso+'ansiopvraha_netto']-(q['pvhoito']-q['pvhoito_ilman_etuuksia'])
>                     q[omat+'ansiopvraha_nettonetto']=0
>                 else:
>                     q[omat+'ansiopvraha_nettonetto']=0
>                     q[puoliso+'ansiopvraha_nettonetto']=0
>             else:
>                 q[omat+'ansiopvraha_nettonetto']=q[omat+'ansiopvraha_netto']-(q['pvhoito']-q['pvhoito_ilman_etuuksia'])
>                 q[puoliso+'ansiopvraha_nettonetto']=0
>                 
>             q['ansiopvraha_nettonetto']=q[puoliso+'ansiopvraha_nettonetto']+q[omat+'ansiopvraha_nettonetto']
>         else:
>             q[omat+'ansiopvraha_nettonetto']=0
>             q[puoliso+'ansiopvraha_nettonetto']=0
>             q['ansiopvraha_nettonetto']=0           
>                             
>     def split_cost_to_wage_unemp(self,p,q,omat,puoliso,omatalku,puolisoalku):
>         if q['palkkatulot_netto']>0:
>             if p['aikuisia']>1:
>                 if p[omatalku+'alive']>0 and p[puolisoalku+'alive']>0:
>                     suhde=max(0,q[omat+'palkkatulot_netto']/q['palkkatulot_netto'])
>                     q[omat+'palkkatulot_nettonetto']=q[omat+'palkkatulot_netto']-suhde*q['pvhoito_ilman_etuuksia']
>                     q[puoliso+'palkkatulot_nettonetto']=q[puoliso+'palkkatulot_netto']-(1-suhde)*q['pvhoito_ilman_etuuksia']
>                 elif p[omatalku+'alive']>0:
>                     q[omat+'palkkatulot_nettonetto']=q[omat+'palkkatulot_netto']-q['pvhoito_ilman_etuuksia']
>                     q[puoliso+'palkkatulot_nettonetto']=0
>                 elif p[puolisoalku+'alive']>0:
>                     q[puoliso+'palkkatulot_nettonetto']=q[puoliso+'palkkatulot_netto']-q['pvhoito_ilman_etuuksia']
>                     q[omat+'palkkatulot_nettonetto']=0
>                 else:
>                     q[omat+'palkkatulot_nettonetto']=0
>                     q[puoliso+'palkkatulot_nettonetto']=0
>             else:
>                 q[omat+'palkkatulot_nettonetto']=q[omat+'palkkatulot_netto']-q['pvhoito_ilman_etuuksia']
>                 q[puoliso+'palkkatulot_nettonetto']=0
>                 
>             q['palkkatulot_nettonetto']=q[puoliso+'palkkatulot_nettonetto']+q[omat+'palkkatulot_nettonetto']
>         else:
>             q[omat+'palkkatulot_nettonetto']=0
>             q[puoliso+'palkkatulot_nettonetto']=0
>             q['palkkatulot_nettonetto']=0
> 
>         if q['ansiopvraha_netto']>0:
>             if p['aikuisia']>1:
>                 if p[omatalku+'alive']>0 and p[puolisoalku+'alive']>0:
>                     suhde=max(0,q[omat+'ansiopvraha_netto']/q['ansiopvraha_netto'])
>                     q[omat+'ansiopvraha_nettonetto']=q[omat+'ansiopvraha_netto']-suhde*(q['pvhoito']-q['pvhoito_ilman_etuuksia'])
>                     q[puoliso+'ansiopvraha_nettonetto']=q[puoliso+'ansiopvraha_netto']-(1-suhde)*(q['pvhoito']-q['pvhoito_ilman_etuuksia'])
>                 elif p[omatalku+'alive']>0:
>                     q[omat+'ansiopvraha_nettonetto']=q[omat+'ansiopvraha_netto']-(q['pvhoito']-q['pvhoito_ilman_etuuksia'])
>                     q[puoliso+'ansiopvraha_nettonetto']=0
>                 elif p[puolisoalku+'alive']>0:
>                     q[puoliso+'ansiopvraha_nettonetto']=q[puoliso+'ansiopvraha_netto']-(q['pvhoito']-q['pvhoito_ilman_etuuksia'])
>                     q[omat+'ansiopvraha_nettonetto']=0
>                 else:
>                     q[omat+'ansiopvraha_nettonetto']=0
>                     q[puoliso+'ansiopvraha_nettonetto']=0
>             else:
>                 q[omat+'ansiopvraha_nettonetto']=q[omat+'ansiopvraha_netto']-(q['pvhoito']-q['pvhoito_ilman_etuuksia'])
>                 q[puoliso+'ansiopvraha_nettonetto']=0
>                 
>             q['ansiopvraha_nettonetto']=q[puoliso+'ansiopvraha_nettonetto']+q[omat+'ansiopvraha_nettonetto']
>         else:
>             q[omat+'ansiopvraha_nettonetto']=0
>             q[puoliso+'ansiopvraha_nettonetto']=0
>             q['ansiopvraha_nettonetto']=0           
>         
>     def add_q(self,benefitq1,benefitq2):
>         q= { k: benefitq1.get(k, 0) + benefitq2.get(k, 0) for k in set(benefitq1).union(set(benefitq2)) }
>         
>         return q
>         
>     def check_q_netto(self,q,aikuisia,omat,puoliso):
>         if aikuisia>1:
>             s=[omat,puoliso]
>             d=q['netto']-q[omat+'netto']-q[puoliso+'netto']
>             if np.abs(d)>1e-6:
>                 print('netto2',d,puoliso)
>             d=q['palkkatulot']-q[omat+'palkkatulot']-q[puoliso+'palkkatulot']
>             if np.abs(d)>1e-6:
>                 print('palkkatulot2',d,puoliso)
>         else:
>             s=[omat]
>             for ss in set(['etuustulo_brutto','palkkatulot','netto','opintotuki','kokoelake','palkkatulot','aitiyspaivaraha','isyyspaivaraha','kotihoidontuki','ansiopvraha','verot','pvhoito']):
>                 d=q[ss]-q[omat+ss]
>                 if np.abs(d)>1e-6:
>                     print('1',ss,omat,d)
>                     print('b',ss,q['omat_'+ss])
>             
>         for alku in set(s):
>             d1=q[alku+'palkkatulot']+q[alku+'etuustulo_brutto']-q[alku+'verot']-q[alku+'alv']-q[alku+'pvhoito']
>             d2=q[alku+'netto']
>             
>             if np.abs(d2-d1)>1e-6:
>                 print('12',alku,'ero',d2-d1,puoliso,'d1',d1,'d2',d2)
>                 print('palkka',q[alku+'palkkatulot'],'etuus_brutto',q[alku+'etuustulo_brutto'],'verot',q[alku+'verot'],'alv',q[alku+'alv'],'pvhoito',q[alku+'pvhoito'])
>         
>     
> 
>     def laske_alv(self,kateen):
>         # kulutusmenoista maksetaan noin 24% alvia (lähde: TK, https://www.stat.fi/tietotrendit/artikkelit/2019/arvonlisavero-haivyttaa-progression-vaikutuksen-pienituloisimmilta/)
>         alv=(0.24+self.additional_vat)/(1.24+self.additional_vat)
>         if self.year==2022:
>             return alv*kateen
>         elif self.year==2023:
>             return alv*kateen
>         elif self.year==2021:
>             return alv*kateen
>         elif self.year==2020:
>             return alv*kateen
>         elif self.year==2019:
>             return alv*kateen
>         elif self.year==2018:
>             return alv*kateen
>         
>     def asumistuki2018(self,palkkatulot,muuttulot,vuokra,p):
>         # Ruokakunnan koko
>         # henkilöä    I kuntaryhmä,
>         # e/kk    II kuntaryhmä,
>         # e/kk    III kuntaryhmä,
>         # e/kk    IIII kuntaryhmä,
>         # e/kk
>         # 1    508    492    411    362
>         # 2    735    706    600    527
>         # 3    937    890    761    675
>         # 4    1095    1038    901    804
>         # + lisähenkilöä kohden, e/kk
>         # 
>         # 137    130    123    118
>         # enimmaismenot kuntaryhmittain kun hloita 1-4
>         max_menot=np.array([[508, 492, 390, 344],[735, 706, 570, 501],[937, 890, 723, 641],[1095, 1038, 856, 764]])
>         max_lisa=np.array([137, 130, 123, 118])
>         # kuntaryhma=3
> 
>         max_meno=max_menot[min(3,p['aikuisia']+p['lapsia']-1),p['kuntaryhma']]+max(0,p['aikuisia']+p['lapsia']-4)*max_lisa[p['kuntaryhma']]
> 
>         prosentti=0.8 # vastaa 80 %
>         suojaosa=300*p['aikuisia']
>         perusomavastuu=max(0,0.42*(max(0,palkkatulot-suojaosa)+muuttulot-(597+99*p['aikuisia']+221*p['lapsia'])))
>         if perusomavastuu<10:
>             perusomavastuu=0
>         if p['aikuisia']==1 and p['tyoton']==1 and p['saa_ansiopaivarahaa']==0 and palkkatulot<1 and p['lapsia']==0:
>             perusomavastuu=0
>             
>         tuki=max(0,(min(max_meno,vuokra)-perusomavastuu)*prosentti)
> 
>         if self.use_extra_ppr:
>             tuki=tuki*self.extra_ppr_factor
>         
>         if tuki<15:
>             tuki=0
>     
>         return tuki
>         
>     def asumistuki2019(self,palkkatulot,muuttulot,vuokra,p):
1138c2680,2720
<         max_menot=np.array([[521, 504, 400, 353],[754, 723, 584, 514],[960, 912, 741, 657],[1122, 1064, 878, 783]])
---
>         max_menot=np.array([[516, 499, 396, 349],[735, 706, 600, 527],[937, 890, 761, 675],[1095, 1038, 901, 804]])
>         max_lisa=np.array([139, 132, 119, 114])
>         # kuntaryhma=3
> 
>         max_meno=max_menot[min(3,p['aikuisia']+p['lapsia']-1),p['kuntaryhma']]+max(0,p['aikuisia']+p['lapsia']-4)*max_lisa[p['kuntaryhma']]
> 
>         prosentti=0.8 # vastaa 80 %
>         suojaosa=300*p['aikuisia']
>         perusomavastuu=max(0,0.42*(max(0,palkkatulot-suojaosa)+muuttulot-(597+99*p['aikuisia']+221*p['lapsia'])))
>         if perusomavastuu<10:
>             perusomavastuu=0
>         if p['aikuisia']==1 and p['tyoton']==1 and p['saa_ansiopaivarahaa']==0 and palkkatulot<1 and p['lapsia']==0:
>             perusomavastuu=0
>             
>         tuki=max(0,(min(max_meno,vuokra)-perusomavastuu)*prosentti)
> 
>         if self.use_extra_ppr:
>             tuki=tuki*self.extra_ppr_factor
>     
>         if tuki<15:
>             tuki=0
>     
>         return tuki
> 
>         
>     def asumistuki2020(self,palkkatulot,muuttulot,vuokra,p):
>         # Ruokakunnan koko
>         # henkilöä    I kuntaryhmä,
>         # e/kk    II kuntaryhmä,
>         # e/kk    III kuntaryhmä,
>         # e/kk    IIII kuntaryhmä,
>         # e/kk
>         # 1    508    492    411    362
>         # 2    735    706    600    527
>         # 3    937    890    761    675
>         # 4    1095    1038    901    804
>         # + lisähenkilöä kohden, e/kk
>         # 
>         # 137    130    123    118
>         # enimmaismenot kuntaryhmittain kun hloita 1-4
>         max_menot=np.array([[520, 503, 399, 352],[752, 722, 583, 513],[958, 910, 740, 656],[1120, 1062, 876, 781]])
1161a2744,2783
> 
>     def asumistuki2021(self,palkkatulot,muuttulot,vuokra,p):
>         # Ruokakunnan koko
>         # henkilöä    I kuntaryhmä,
>         # e/kk    II kuntaryhmä,
>         # e/kk    III kuntaryhmä,
>         # e/kk    IIII kuntaryhmä,
>         # e/kk
>         # 1    508    492    411    362
>         # 2    735    706    600    527
>         # 3    937    890    761    675
>         # 4    1095    1038    901    804
>         # + lisähenkilöä kohden, e/kk
>         # 
>         # 137    130    123    118
>         # enimmaismenot kuntaryhmittain kun hloita 1-4
>         max_menot=np.array([[521, 504, 400, 353],[754, 723, 584, 514],[960, 912, 741, 657],[1122, 1064, 878, 783]])
>         max_lisa=np.array([140, 133, 120, 115])
>         # kuntaryhma=3
> 
>         max_meno=max_menot[min(3,p['aikuisia']+p['lapsia']-1),p['kuntaryhma']]+max(0,p['aikuisia']+p['lapsia']-4)*max_lisa[p['kuntaryhma']]
> 
>         prosentti=0.8 # vastaa 80 %
>         suojaosa=300*p['aikuisia']
>         perusomavastuu=max(0,0.42*(max(0,palkkatulot-suojaosa)+muuttulot-(606+100*p['aikuisia']+224*p['lapsia'])))
>         if perusomavastuu<10:
>             perusomavastuu=0
>         if p['aikuisia']==1 and p['tyoton']==1 and p['saa_ansiopaivarahaa']==0 and palkkatulot<1 and p['lapsia']==0:
>             perusomavastuu=0
>             
>         tuki=max(0,(min(max_meno,vuokra)-perusomavastuu)*prosentti)
> 
>         if self.use_extra_ppr:
>             tuki=tuki*self.extra_ppr_factor
>     
>         if tuki<15:
>             tuki=0
>     
>         return tuki
>         
1195,1197c2817,3083
<             
<         if tuki<15:
<             tuki=0
---
>             
>         if tuki<15:
>             tuki=0
>     
>         return tuki
>         
>     def asumistuki2023(self,palkkatulot,muuttulot,vuokra,p):
>         # Ruokakunnan koko
>         # henkilöä    I kuntaryhmä,
>         # e/kk    II kuntaryhmä,
>         # e/kk    III kuntaryhmä,
>         # e/kk    IIII kuntaryhmä,
>         # e/kk
>         # 1    508    492    411    362
>         # 2    735    706    600    527
>         # 3    937    890    761    675
>         # 4    1095    1038    901    804
>         # + lisähenkilöä kohden, e/kk
>         # 
>         # 137    130    123    118
>         # enimmaismenot kuntaryhmittain kun hloita 1-4
>         max_menot=np.array([[537, 520, 413, 364],[778, 746, 602, 530],[990, 941, 764, 678],[1157, 1097, 906, 808]])
>         max_lisa=np.array([144, 137, 124, 119])
>         # kuntaryhma=3
> 
>         max_meno=max_menot[min(3,p['aikuisia']+p['lapsia']-1),p['kuntaryhma']]+max(0,p['aikuisia']+p['lapsia']-4)*max_lisa[p['kuntaryhma']]
> 
>         prosentti=0.8 # vastaa 80 %
>         suojaosa=300*p['aikuisia']
>         perusomavastuu=max(0,0.42*(max(0,palkkatulot-suojaosa)+muuttulot-(619+103*p['aikuisia']+228*p['lapsia'])))
>         if perusomavastuu<10:
>             perusomavastuu=0
>         if p['aikuisia']==1 and p['tyoton']==1 and p['saa_ansiopaivarahaa']==0 and palkkatulot<1 and p['lapsia']==0:
>             perusomavastuu=0
>             
>         tuki=max(0,(min(max_meno,vuokra)-perusomavastuu)*prosentti)
> 
>         if self.use_extra_ppr:
>             tuki=tuki*self.extra_ppr_factor
>             
>         if tuki<15:
>             tuki=0
>     
>         return tuki    
>     def elakkeensaajan_asumistuki_2018(self,palkkatulot,muuttulot,vuokra,p):
>         # Ruokakunnan koko
>         # henkilöä    I kuntaryhmä,
>         # e/kk    II kuntaryhmä,
>         # e/kk    III kuntaryhmä,
>         max_menot=np.array([8_613,7_921,6_949])
>         max_meno=max_menot[max(0,p['kuntaryhma']-1)]
> 
>         prosentti=0.85 # vastaa 85 %
>         perusomavastuu=52.66 # e/kk, 2019
>         if p['aikuisia']<2:
>             tuloraja=9_534/12
>         else:
>             tuloraja=15_565/12
>             #if puolisolla_oikeus:
>             #    tuloraja=15_565/12
>             #else:
>             #    tuloraja=13_676/12 # oletetaan että puolisolla ei oikeutta asumistukeen
>             
>         lisaomavastuu=0.413*max(0,palkkatulot+muuttulot-tuloraja)
>             
>         tuki=max(0,(min(max_meno,vuokra)-perusomavastuu-lisaomavastuu)*prosentti)
>         
>         if p['aikuisia']>1:
>             if tuki<6.92:
>                 tuki=0
>         else:
>             if tuki<3.46:
>                 tuki=0
>         
>         if self.use_extra_ppr:
>             tuki=tuki*self.extra_ppr_factor
>     
>         return tuki        
> 
>         
>     def elakkeensaajan_asumistuki_2019(self,palkkatulot,muuttulot,vuokra,p):
>         # Ruokakunnan koko
>         # henkilöä    I kuntaryhmä,
>         # e/kk    II kuntaryhmä,
>         # e/kk    III kuntaryhmä,
>         # e/kk    IIII kuntaryhmä,
>         # e/kk
>         # 1    508    492    411    362
>         # 2    735    706    600    527
>         # 3    937    890    761    675
>         max_menot=np.array([8_243,7_581,6_651])
>         max_meno=max_menot[max(0,p['kuntaryhma']-1)]
> 
>         prosentti=0.85 # vastaa 85 %
>         perusomavastuu=52.66 # e/kk, 2019
>         if p['aikuisia']<2:
>             tuloraja=9_534/12
>         else:
>             tuloraja=15_565/12
>             #if puolisolla_oikeus:
>             #    tuloraja=15_565/12
>             #else:
>             #    tuloraja=13_676/12 # oletetaan että puolisolla ei oikeutta asumistukeen
>             
>         lisaomavastuu=0.413*max(0,palkkatulot+muuttulot-tuloraja)
>             
>         tuki=max(0,(min(max_meno,vuokra)-perusomavastuu-lisaomavastuu)*prosentti)
>         
>         if p['aikuisia']>1:
>             if tuki<6.92:
>                 tuki=0
>         else:
>             if tuki<3.46:
>                 tuki=0
>         
>         if self.use_extra_ppr:
>             tuki=tuki*self.extra_ppr_factor
>     
>         return tuki        
> 
> 
>     def elakkeensaajan_asumistuki_2020(self,palkkatulot,muuttulot,vuokra,p):
>         # Ruokakunnan koko
>         # henkilöä    I kuntaryhmä,
>         # e/kk    II kuntaryhmä,
>         # e/kk    III kuntaryhmä,
>         # e/kk    IIII kuntaryhmä,
>         # e/kk
>         # 1    508    492    411    362
>         # 2    735    706    600    527
>         # 3    937    890    761    675
>         max_menot=np.array([8_360,7_688,6_745])
>         max_meno=max_menot[max(0,p['kuntaryhma']-1)]
> 
>         prosentti=0.85 # vastaa 85 %
>         perusomavastuu=52.66 # e/kk, 2019
>         if p['aikuisia']<2:
>             tuloraja=9_534/12
>         else:
>             tuloraja=15_565/12
>             #if puolisolla_oikeus:
>             #    tuloraja=15_565/12
>             #else:
>             #    tuloraja=13_676/12 # oletetaan että puolisolla ei oikeutta asumistukeen
>             
>         lisaomavastuu=0.413*max(0,palkkatulot+muuttulot-tuloraja)
>             
>         tuki=max(0,(min(max_meno,vuokra)-perusomavastuu-lisaomavastuu)*prosentti)
>         
>         if p['aikuisia']>1:
>             if tuki<6.92:
>                 tuki=0
>         else:
>             if tuki<3.46:
>                 tuki=0
>         
>         if self.use_extra_ppr:
>             tuki=tuki*self.extra_ppr_factor
>     
>         return tuki        
> 
>         
>     def elakkeensaajan_asumistuki_2021(self,palkkatulot,muuttulot,vuokra,p):
>         # Ruokakunnan koko
>         # henkilöä    I kuntaryhmä,
>         # e/kk    II kuntaryhmä,
>         # e/kk    III kuntaryhmä,
>         max_menot=np.array([8_613,7_921,6_949])
>         max_meno=max_menot[max(0,p['kuntaryhma']-1)]
> 
>         prosentti=0.85 # vastaa 85 %
>         perusomavastuu=52.66 # e/kk, 2019
>         if p['aikuisia']<2:
>             tuloraja=9_534/12
>         else:
>             tuloraja=15_565/12
>             #if puolisolla_oikeus:
>             #    tuloraja=15_565/12
>             #else:
>             #    tuloraja=13_676/12 # oletetaan että puolisolla ei oikeutta asumistukeen
>             
>         lisaomavastuu=0.413*max(0,palkkatulot+muuttulot-tuloraja)
>             
>         tuki=max(0,(min(max_meno,vuokra)-perusomavastuu-lisaomavastuu)*prosentti)
>         
>         if p['aikuisia']>1:
>             if tuki<6.92:
>                 tuki=0
>         else:
>             if tuki<3.46:
>                 tuki=0
>         
>         if self.use_extra_ppr:
>             tuki=tuki*self.extra_ppr_factor
>     
>         return tuki        
> 
>         
>     def elakkeensaajan_asumistuki_2022(self,palkkatulot,muuttulot,vuokra,p,puolisolla_oikeus=False):
>         # Ruokakunnan koko
>         # henkilöä    I kuntaryhmä,
>         # e/kk    II kuntaryhmä,
>         # e/kk    III kuntaryhmä,
>         #
>         max_menot=np.array([8_613,7_921,6_949])
>         max_meno=max_menot[max(0,p['kuntaryhma']-1)]
> 
>         prosentti=0.85 # vastaa 85 %
>         perusomavastuu=52.66 # e/kk, 2019
>         if p['aikuisia']<2:
>             tuloraja=9_534/12
>         else:
>             tuloraja=15_565/12
>             #if puolisolla_oikeus:
>             #    tuloraja=15_565/12
>             #else:
>             #    tuloraja=13_676/12 # oletetaan että puolisolla ei oikeutta asumistukeen
>             
>         lisaomavastuu=0.413*max(0,palkkatulot+muuttulot-tuloraja)
>             
>         tuki=max(0,(min(max_meno,vuokra)-perusomavastuu-lisaomavastuu)*prosentti)
>         
>         if p['aikuisia']>1:
>             if tuki<6.92:
>                 tuki=0
>         else:
>             if tuki<3.46:
>                 tuki=0
>         
>         if self.use_extra_ppr:
>             tuki=tuki*self.extra_ppr_factor
>     
>         return tuki        
>         
>     def elakkeensaajan_asumistuki_2023(self,palkkatulot,muuttulot,vuokra,p,puolisolla_oikeus=False):
>         # Ruokakunnan koko
>         # henkilöä    I kuntaryhmä,
>         # e/kk    II kuntaryhmä,
>         # e/kk    III kuntaryhmä,
>         #
>         max_menot=np.array([8_433,7_755,6_804])
>         max_meno=max_menot[max(0,p['kuntaryhma']-1)]
> 
>         prosentti=0.85 # vastaa 85 %
>         perusomavastuu=52.66 # e/kk, 2019
>         if p['aikuisia']<2:
>             tuloraja=9_534/12
>         else:
>             tuloraja=15_565/12
>             #if puolisolla_oikeus:
>             #    tuloraja=15_565/12
>             #else:
>             #    tuloraja=13_676/12 # oletetaan että puolisolla ei oikeutta asumistukeen
>             
>         lisaomavastuu=0.413*max(0,palkkatulot+muuttulot-tuloraja)
>             
>         tuki=max(0,(min(max_meno,vuokra)-perusomavastuu-lisaomavastuu)*prosentti)
>         
>         if p['aikuisia']>1:
>             if tuki<6.92:
>                 tuki=0
>         else:
>             if tuki<3.46:
>                 tuki=0
>         
>         if self.use_extra_ppr:
>             tuki=tuki*self.extra_ppr_factor
1199c3085
<         return tuki
---
>         return tuki                
1201,1225c3087,3089
<     def isyysraha_perus(self,vakiintunutpalkka):
<         if self.year==2018:
<             minimi=self.perustulo()
<             taite1=37_861/12  
<             taite2=58_252/12  
<         elif self.year==2019:
<             minimi=self.perustulo()
<             taite1=37_861/12  
<             taite2=58_252/12  
<         elif self.year==2020:
<             minimi=self.perustulo()
<             taite1=37_861/12  
<             taite2=58_252/12  
<         elif self.year==2021:
<             minimi=self.perustulo()
<             taite1=39_144/12  
<             taite2=60_225/12  
<         elif self.year==2022:
<             minimi=self.perustulo()
<             taite1=39_144/12  
<             taite2=60_225/12  
<         elif self.year==2023:
<             minimi=self.perustulo()
<             taite1=39_144/12  
<             taite2=60_225/12  
---
>     # hallituksen päätöksenmukaiset päivähoitomenot 2018
>     def paivahoitomenot2018(self,hoidossa,tulot,p,prosentti1=None,prosentti2=None,prosentti3=None,maksimimaksu=None):
>         minimimaksu=10
1227,1228c3091,3094
<         vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
<         raha=max(minimi,0.7*min(taite1,vakiintunutpalkka)+0.4*max(min(taite2,vakiintunutpalkka)-taite1,0)+0.4*max(vakiintunutpalkka-taite2,0))-minimi
---
>         if p['osaaikainen_paivahoito']>0:
>             osaaikainen=True
>         else:
>             osaaikainen=False
1230,1244c3096,3104
<         return raha
<         
<     def aitiysraha2018(self,vakiintunutpalkka,kesto):
<         if kesto<56/260:
<             minimi=self.perustulo()
<             taite1=37_861/12  
<             taite2=58_252/12 
<             vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
<             raha=max(minimi,0.9*min(taite1,vakiintunut)+0.325*max(vakiintunut-taite1,0))-minimi
<         else: 
<             minimi=self.perustulo()
<             taite1=37_861/12  
<             taite2=58_252/12 
<             vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
<             raha=max(minimi,0.7*min(taite1,vakiintunut)+0.4*max(min(taite2,vakiintunut)-taite1,0)+0.4*max(vakiintunutpalkka-taite2,0))-minimi
---
>         if prosentti1==None:
>             prosentti1=0.107
>         if prosentti2==None:
>             prosentti2=0.5
>         if prosentti3==None:
>             prosentti3=0.2
>             
>         if maksimimaksu==None:
>             maksimimaksu=290
1246,1260c3106,3128
<         return raha
<         
<     def aitiysraha2019(self,vakiintunutpalkka,kesto):
<         if kesto<56/260:
<             minimi=self.perustulo()
<             taite1=37_861/12  
<             taite2=58_252/12 
<             vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
<             raha=max(minimi,0.9*min(taite1,vakiintunut)+0.325*max(vakiintunut-taite1,0))-minimi
<         else: 
<             minimi=self.perustulo()
<             taite1=37_861/12  
<             taite2=58_252/12 
<             vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
<             raha=max(minimi,0.7*min(taite1,vakiintunut)+0.4*max(min(taite2,vakiintunut)-taite1,0)+0.4*max(vakiintunutpalkka-taite2,0))-minimi
---
>         if p['lapsia']>0:
>             vakea=p['lapsia']+p['aikuisia']
>             if vakea==1:
>                 alaraja=2050
>                 prosentti=prosentti1
>             elif vakea==2:
>                 alaraja=2050
>                 prosentti=prosentti1
>             elif vakea==3:
>                 alaraja=2646
>                 prosentti=prosentti1
>             elif vakea==4:
>                 alaraja=3003
>                 prosentti=prosentti1
>             elif vakea==5:
>                 alaraja=3361
>                 prosentti=prosentti1
>             elif vakea==6:
>                 alaraja=3718
>                 prosentti=prosentti1
>             else:
>                 alaraja=3718+138*(vakea-6)
>                 prosentti=prosentti1
1262c3130,3162
<         return raha
---
>             pmaksu=min(maksimimaksu,max(0,tulot-alaraja)*prosentti)
>             if hoidossa==0:
>                 kerroin=0
>             elif hoidossa==1:
>                 if pmaksu<minimimaksu:
>                     kerroin=0
>                 else:
>                     kerroin=1
>             elif hoidossa==2:
>                 if pmaksu<minimimaksu:
>                     kerroin=0
>                 else:
>                     if (prosentti2*pmaksu<minimimaksu):
>                         kerroin=1
>                     else:
>                         kerroin=1+prosentti2
>             else:
>                 if pmaksu<minimimaksu:
>                     kerroin=0
>                 else:
>                     if prosentti2*pmaksu<minimimaksu:
>                         kerroin=1
>                     else:
>                         if (prosentti3*pmaksu<minimimaksu):
>                             kerroin=1+prosentti2
>                         else:
>                             kerroin=1+prosentti2+prosentti3*(p['lapsia']-2)
>             maksu=kerroin*pmaksu
>         else:
>             maksu=0
>             
>         if osaaikainen:
>             maksu *= 0.6
1264,1278c3164
<     def aitiysraha2020(self,vakiintunutpalkka,kesto):
<         if kesto<56/260:
<             minimi=self.perustulo()
<             taite1=37_861/12  
<             taite2=58_252/12 
<             vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
<             raha=max(minimi,0.9*min(taite1,vakiintunut)+0.325*max(vakiintunut-taite1,0))-minimi
<         else: 
<             minimi=self.perustulo()
<             taite1=37_861/12  
<             taite2=58_252/12 
<             vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
<             raha=max(minimi,0.7*min(taite1,vakiintunut)+0.4*max(min(taite2,vakiintunut)-taite1,0)+0.4*max(vakiintunutpalkka-taite2,0))-minimi
< 
<         return raha
---
>         return maksu
1280,1292c3166,3168
<     def aitiysraha2021(self,vakiintunutpalkka,kesto):
<         if kesto<56/260:
<             minimi=self.perustulo()
<             taite1=39_144/12  
<             taite2=60_225/12 
<             vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
<             raha=max(minimi,0.9*min(taite1,vakiintunut)+0.325*max(vakiintunut-taite1,0))-minimi
<         else: 
<             minimi=self.perustulo()
<             taite1=39_144/12  
<             taite2=60_225/12 
<             vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
<             raha=max(minimi,0.7*min(taite1,vakiintunut)+0.4*max(min(taite2,vakiintunut)-taite1,0)+0.4*max(vakiintunutpalkka-taite2,0))-minimi
---
>     # hallituksen päätöksenmukaiset päivähoitomenot 2018
>     def paivahoitomenot2019(self,hoidossa,tulot,p,prosentti1=None,prosentti2=None,prosentti3=None,maksimimaksu=None):
>         minimimaksu=10
1294,1308c3170,3173
<         return raha
<         
<     def aitiysraha2022(self,vakiintunutpalkka,kesto):
<         if kesto<56/260:
<             minimi=self.perustulo()
<             taite1=39_144/12  
<             taite2=60_225/12 
<             vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
<             raha=max(minimi,0.9*min(taite1,vakiintunut)+0.325*max(vakiintunut-taite1,0))-minimi
<         else: 
<             minimi=self.perustulo()
<             taite1=39_144/12  
<             taite2=60_225/12 
<             vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
<             raha=max(minimi,0.7*min(taite1,vakiintunut)+0.4*max(min(taite2,vakiintunut)-taite1,0)+0.4*max(vakiintunutpalkka-taite2,0))-minimi
---
>         if p['osaaikainen_paivahoito']>0:
>             osaaikainen=True
>         else:
>             osaaikainen=False
1310,1317c3175,3183
<         return raha
<         
<     def sairauspaivaraha2018(self,vakiintunutpalkka):
<         minimi=self.perustulo()
<         taite1=30_394/12
<         taite2=58_252/12
<         vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
<         raha=max(minimi,0.7*min(taite1,vakiintunut)+0.4*max(min(taite2,vakiintunut)-taite1,0)+0.2*max(vakiintunut-taite2,0))-minimi
---
>         if prosentti1==None:
>             prosentti1=0.107
>         if prosentti2==None:
>             prosentti2=0.5
>         if prosentti3==None:
>             prosentti3=0.2
>             
>         if maksimimaksu==None:
>             maksimimaksu=290
1319c3185,3241
<         return raha
---
>         if p['lapsia']>0:
>             vakea=p['lapsia']+p['aikuisia']
>             if vakea==1:
>                 alaraja=2050
>                 prosentti=prosentti1
>             elif vakea==2:
>                 alaraja=2050
>                 prosentti=prosentti1
>             elif vakea==3:
>                 alaraja=2646
>                 prosentti=prosentti1
>             elif vakea==4:
>                 alaraja=3003
>                 prosentti=prosentti1
>             elif vakea==5:
>                 alaraja=3361
>                 prosentti=prosentti1
>             elif vakea==6:
>                 alaraja=3718
>                 prosentti=prosentti1
>             else:
>                 alaraja=3718+138*(vakea-6)
>                 prosentti=prosentti1
> 
>             pmaksu=min(maksimimaksu,max(0,tulot-alaraja)*prosentti)
>             if hoidossa==0:
>                 kerroin=0
>             elif hoidossa==1:
>                 if pmaksu<minimimaksu:
>                     kerroin=0
>                 else:
>                     kerroin=1
>             elif hoidossa==2:
>                 if pmaksu<minimimaksu:
>                     kerroin=0
>                 else:
>                     if (prosentti2*pmaksu<minimimaksu):
>                         kerroin=1
>                     else:
>                         kerroin=1+prosentti2
>             else:
>                 if pmaksu<minimimaksu:
>                     kerroin=0
>                 else:
>                     if prosentti2*pmaksu<minimimaksu:
>                         kerroin=1
>                     else:
>                         if (prosentti3*pmaksu<minimimaksu):
>                             kerroin=1+prosentti2
>                         else:
>                             kerroin=1+prosentti2+prosentti3*(p['lapsia']-2)
>             maksu=kerroin*pmaksu
>         else:
>             maksu=0
> 
>         if osaaikainen:
>             maksu *= 0.6
1321,1325c3243,3247
<     def sairauspaivaraha2019(self,vakiintunutpalkka):
<         minimi=self.perustulo()
<         taite1=30_394/12
<         taite2=57_183/12
<         vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
---
>         return maksu
>         
>     # hallituksen päätöksenmukaiset päivähoitomenot 2018
>     def paivahoitomenot2020(self,hoidossa,tulot,p,prosentti1=None,prosentti2=None,prosentti3=None,maksimimaksu=None):
>         minimimaksu=10
1327c3249,3252
<         raha=max(minimi,0.7*min(taite1,vakiintunut)+0.4*max(min(taite2,vakiintunut)-taite1,0)+0.2*max(vakiintunut-taite2,0))-minimi
---
>         if p['osaaikainen_paivahoito']>0:
>             osaaikainen=True
>         else:
>             osaaikainen=False
1329c3254,3262
<         return raha
---
>         if prosentti1==None:
>             prosentti1=0.107
>         if prosentti2==None:
>             prosentti2=0.5
>         if prosentti3==None:
>             prosentti3=0.2
>             
>         if maksimimaksu==None:
>             maksimimaksu=290
1331,1336c3264,3286
<     def sairauspaivaraha2020(self,vakiintunutpalkka):
<         minimi=self.perustulo()
<         taite1=31_595/12  
<         vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
<                     
<         raha=max(minimi,0.7*min(taite1,vakiintunut)+0.2*max(vakiintunut-taite1,0))
---
>         if p['lapsia']>0:
>             vakea=p['lapsia']+p['aikuisia']
>             if vakea==1:
>                 alaraja=2136
>                 prosentti=prosentti1
>             elif vakea==2:
>                 alaraja=2136
>                 prosentti=prosentti1
>             elif vakea==3:
>                 alaraja=2756
>                 prosentti=prosentti1
>             elif vakea==4:
>                 alaraja=3129
>                 prosentti=prosentti1
>             elif vakea==5:
>                 alaraja=3502
>                 prosentti=prosentti1
>             elif vakea==6:
>                 alaraja=3874
>                 prosentti=prosentti1
>             else:
>                 alaraja=3874+138*(vakea-6)
>                 prosentti=prosentti1
1338c3288,3317
<         return raha
---
>             pmaksu=min(maksimimaksu,max(0,tulot-alaraja)*prosentti)
>             if hoidossa==0:
>                 kerroin=0
>             elif hoidossa==1:
>                 if pmaksu<minimimaksu:
>                     kerroin=0
>                 else:
>                     kerroin=1
>             elif hoidossa==2:
>                 if pmaksu<minimimaksu:
>                     kerroin=0
>                 else:
>                     if (prosentti2*pmaksu<minimimaksu):
>                         kerroin=1
>                     else:
>                         kerroin=1+prosentti2
>             else:
>                 if pmaksu<minimimaksu:
>                     kerroin=0
>                 else:
>                     if prosentti2*pmaksu<minimimaksu:
>                         kerroin=1
>                     else:
>                         if (prosentti3*pmaksu<minimimaksu):
>                             kerroin=1+prosentti2
>                         else:
>                             kerroin=1+prosentti2+prosentti3*(p['lapsia']-2)
>             maksu=kerroin*pmaksu
>         else:
>             maksu=0
1340,1347c3319,3320
<     def sairauspaivaraha2021(self,vakiintunutpalkka):
<         minimi=self.perustulo()
<         taite1=32_011/12  
<         vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
<                     
<         raha=max(minimi,0.7*min(taite1,vakiintunut)+0.2*max(vakiintunut-taite1,0))-minimi
< 
<         return raha
---
>         if osaaikainen:
>             maksu *= 0.6
1349,1652c3322
<     def sairauspaivaraha2022(self,vakiintunutpalkka):
<         minimi=self.perustulo()
<         taite1=32_011/12  
<         vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
<                     
<         raha=max(minimi,0.7*min(taite1,vakiintunut)+0.2*max(vakiintunut-taite1,0))-minimi
< 
<         return raha
< 
< #     def laske_tulot(self,p,tt_alennus=0,include_takuuelake=True,legacy=True):
< #         q={} # tulokset tänne
< #         p=self.check_p(p)
< #         q['perustulo']=0
< #         q['puoliso_perustulo']=0
< #         q['puhdas_tyoelake']=0
< #         q['multiplier']=1
< #         q['kotihoidontuki']=0
< #         q['kotihoidontuki_netto']=0
< #         q['puoliso_opintotuki']=0
< #         q['puoliso_kotihoidontuki']=0
< #         q['puoliso_kotihoidontuki_netto']=0
< #         q['puoliso_ansiopvraha_netto']=0
< #         q['puoliso_kotihoidontuki_netto']=0
< #         q['puoliso_opintotuki_netto']=0
< #         if p['elakkeella']>0: # vanhuuseläkkeellä
< #             p['tyoton']=0
< #             q['isyyspaivaraha'],q['aitiyspaivaraha'],q['kotihoidontuki'],q['sairauspaivaraha']=(0,0,0,0)
< #             q['elake_maksussa']=p['tyoelake']
< #             q['elake_tuleva']=0
< #             p['saa_ansiopaivarahaa']=0
< #             # huomioi takuueläkkeen, kansaneläke sisältyy eläke_maksussa-osaan
< #             if (p['aikuisia']>1):
< #                 q['kokoelake']=self.laske_kokonaiselake(p['ika'],q['elake_maksussa'],yksin=0,include_takuuelake=include_takuuelake,disability=p['disabled'])
< #                 q['puhdas_tyoelake']=self.laske_puhdas_tyoelake(p['ika'],p['tyoelake'],disability=p['disabled'],yksin=0)
< #             else:
< #                 q['kokoelake']=self.laske_kokonaiselake(p['ika'],q['elake_maksussa'],yksin=1,include_takuuelake=include_takuuelake,disability=p['disabled'])
< #                 q['puhdas_tyoelake']=self.laske_puhdas_tyoelake(p['ika'],p['tyoelake'],disability=p['disabled'],yksin=1)
< # 
< #             q['ansiopvraha'],q['puhdasansiopvraha'],q['peruspvraha']=(0,0,0)
< #             #oletetaan että myös puoliso eläkkeellä
< #             q['puoliso_ansiopvraha']=0
< #             q['opintotuki']=0
< #         elif p['opiskelija']>0:
< #             q['elake_maksussa']=p['tyoelake']
< #             q['kokoelake']=p['tyoelake']
< #             q['elake_tuleva']=0
< #             q['puoliso_ansiopvraha']=0
< #             q['perustulo']=self.perustulo()
< #             q['ansiopvraha'],q['puhdasansiopvraha'],q['peruspvraha']=(0,0,0)
< #             q['isyyspaivaraha'],q['aitiyspaivaraha'],q['kotihoidontuki'],q['sairauspaivaraha']=(0,0,0,0)
< #             q['opintotuki']=0
< #             if p['aitiysvapaalla']>0:
< #                 q['aitiyspaivaraha']=self.aitiysraha(p['vakiintunutpalkka'],p['aitiysvapaa_kesto'])
< #             elif p['isyysvapaalla']>0:
< #                 q['isyyspaivaraha']=self.isyysraha(p['vakiintunutpalkka'])
< #             elif p['kotihoidontuella']>0:
< #                 q['kotihoidontuki']=0 #self.kotihoidontuki(p['lapsia_kotihoidontuella'],p['lapsia_alle_3v'],p['lapsia_alle_kouluikaisia'])
< #             else:
< #                 q['opintotuki']=0 #self.opintoraha(0,p)
< #         else: # ei eläkkeellä     
< #             q['opintotuki']=0
< #             q['elake_maksussa']=p['tyoelake']
< #             q['kokoelake']=p['tyoelake']
< #             q['elake_tuleva']=0
< #             q['puoliso_ansiopvraha']=0
< #             q['perustulo']=self.perustulo() # ei opiskelijoille?
< #             q['ansiopvraha'],q['puhdasansiopvraha'],q['peruspvraha']=(0,0,0)
< #             q['isyyspaivaraha'],q['aitiyspaivaraha'],q['kotihoidontuki'],q['sairauspaivaraha']=(0,0,0,0)
< #             if p['aitiysvapaalla']>0:
< #                 q['aitiyspaivaraha']=self.aitiysraha(p['vakiintunutpalkka'],p['aitiysvapaa_kesto'])
< #             elif p['isyysvapaalla']>0:
< #                 q['isyyspaivaraha']=self.isyysraha(p['vakiintunutpalkka'])
< #             elif p['sairauspaivarahalla']>0:
< #                 q['sairauspaivaraha']=self.sairauspaivaraha(p['vakiintunutpalkka'])
< #             elif p['kotihoidontuella']>0:
< #                 q['kotihoidontuki']=0 #self.kotihoidontuki(p['lapsia_kotihoidontuella'],p['lapsia_alle_3v'],p['lapsia_alle_kouluikaisia'])
< #             elif p['tyoton']>0:
< #                 if 'omavastuukerroin' in p:
< #                     omavastuukerroin=p['omavastuukerroin']
< #                 else:
< #                     omavastuukerroin=1.0
< #                 q['ansiopvraha'],q['puhdasansiopvraha'],q['peruspvraha']=\
< #                     self.ansiopaivaraha(p['tyoton'],p['vakiintunutpalkka'],p['lapsia'],p['t'],p['saa_ansiopaivarahaa'],
< #                         p['tyottomyyden_kesto'],p,omavastuukerroin=omavastuukerroin)
< #                 
< #         if p['aikuisia']>1:
< #             if p['puoliso_elakkeella']>0: # vanhuuseläkkeellä
< #                 p['puoliso_tyoton']=0
< #                 q['puoliso_isyyspaivaraha'],q['puoliso_aitiyspaivaraha'],q['puoliso_kotihoidontuki'],q['puoliso_sairauspaivaraha']=(0,0,0,0)
< #                 q['puoliso_elake_maksussa']=p['puoliso_tyoelake']
< #                 q['puoliso_elake_tuleva']=0
< #                 p['puoliso_saa_ansiopaivarahaa']=0
< #                 # huomioi takuueläkkeen, kansaneläke sisältyy eläke_maksussa-osaan
< #                 q['puoliso_kokoelake']=self.laske_kokonaiselake(p['puoliso_ika'],q['puoliso_elake_maksussa'],yksin=0)
< #                 q['puoliso_ansiopvraha'],q['puoliso_puhdasansiopvraha'],q['puoliso_peruspvraha']=(0,0,0)
< #                 q['puoliso_opintotuki']=0
< #             elif p['puoliso_opiskelija']>0:
< #                 q['puoliso_kokoelake']=0
< #                 q['puoliso_perustulo']=self.perustulo()
< #                 q['puoliso_elake_maksussa']=p['puoliso_tyoelake']
< #                 q['puoliso_elake_tuleva']=0
< #                 q['puoliso_ansiopvraha'],q['puoliso_puhdasansiopvraha'],q['puoliso_peruspvraha']=(0,0,0)
< #                 q['puoliso_isyyspaivaraha'],q['puoliso_aitiyspaivaraha'],q['puoliso_kotihoidontuki'],q['puoliso_sairauspaivaraha']=(0,0,0,0)
< #                 q['puoliso_opintotuki']=0
< #                 if p['puoliso_aitiysvapaalla']>0:
< #                     q['puoliso_aitiyspaivaraha']=self.aitiysraha(p['puoliso_vakiintunutpalkka'],p['puoliso_aitiysvapaa_kesto'])
< #                 elif p['puoliso_isyysvapaalla']>0:
< #                     q['puoliso_isyyspaivaraha']=self.isyysraha(p['puoliso_vakiintunutpalkka'])
< #                 elif p['sairauspaivarahalla']>0:
< #                     q['puoliso_sairauspaivaraha']=self.sairauspaivaraha(p['puoliso_vakiintunutpalkka'])
< #                 elif p['puoliso_kotihoidontuella']>0:
< #                     q['puoliso_kotihoidontuki']=0 #self.kotihoidontuki(p['lapsia_kotihoidontuella'],p['lapsia_alle_3v'],p['lapsia_alle_kouluikaisia'])
< #                 else:
< #                     q['puoliso_opintotuki']=0 #self.opintoraha(0,p)
< #             else: # ei eläkkeellä     
< #                 q['puoliso_kokoelake']=0
< #                 q['puoliso_opintotuki']=0
< #                 q['puoliso_elake_maksussa']=p['puoliso_tyoelake']
< #                 q['puoliso_elake_tuleva']=0
< #                 q['puoliso_puolison_ansiopvraha']=0
< #                 q['puoliso_ansiopvraha'],q['puoliso_puhdasansiopvraha'],q['puoliso_peruspvraha']=(0,0,0)
< #                 q['puoliso_isyyspaivaraha'],q['puoliso_aitiyspaivaraha'],q['puoliso_kotihoidontuki'],q['puoliso_sairauspaivaraha']=(0,0,0,0)
< #                 q['puoliso_perustulo']=self.perustulo() # ei opiskelijoille?
< #                 if p['puoliso_aitiysvapaalla']>0:
< #                     q['puoliso_aitiyspaivaraha']=self.aitiysraha(p['puoliso_vakiintunutpalkka'],p['puoliso_aitiysvapaa_kesto'])
< #                 elif p['puoliso_isyysvapaalla']>0:
< #                     q['puoliso_isyyspaivaraha']=self.isyysraha(p['puoliso_vakiintunutpalkka'])
< #                 elif p['puoliso_sairauspaivarahalla']>0:
< #                     q['puoliso_sairauspaivaraha']=self.sairauspaivaraha(p['puoliso_vakiintunutpalkka'])
< #                 elif p['puoliso_kotihoidontuella']>0:
< #                     q['puoliso_kotihoidontuki']=0 #self.kotihoidontuki(p['lapsia_kotihoidontuella'],p['lapsia_alle_3v'],p['lapsia_alle_kouluikaisia'])
< #                 elif p['puoliso_tyoton']>0:
< #                     q['puoliso_ansiopvraha'],q['puoliso_puhdasansiopvraha'],q['puoliso_peruspvraha']=\
< #                         self.ansiopaivaraha(p['puoliso_tyoton'],p['puoliso_vakiintunutpalkka'],p['lapsia'],p['puoliso_tulot'],
< #                             p['puoliso_saa_ansiopaivarahaa'],p['puoliso_tyottomyyden_kesto'],p)
< #             
< #         # q['verot] sisältää kaikki veronluonteiset maksut
< #         _,q['verot'],q['valtionvero'],q['kunnallisvero'],q['kunnallisveronperuste'],q['valtionveroperuste'],\
< #             q['ansiotulovahennys'],q['perusvahennys'],q['tyotulovahennys'],q['tyotulovahennys_kunnallisveroon'],\
< #             q['ptel'],q['sairausvakuutusmaksu'],q['tyotvakmaksu'],q['tyel_kokomaksu'],q['ylevero']=self.verotus(p['t'],
< #                 q['ansiopvraha']+q['aitiyspaivaraha']+q['isyyspaivaraha']+q['kotihoidontuki']+q['sairauspaivaraha']+q['opintotuki']+q['perustulo'],
< #                 q['kokoelake'],p['lapsia'],p)
< #         _,q['verot_ilman_etuuksia'],_,_,_,_,_,_,_,_,_,_,_,_,_=self.verotus(p['t'],0,0,p['lapsia'],p)
< #         _,q['verot_ilman_etuuksia_pl_pt'],valtionvero,kunnallisvero,kunnallisveronperuste,\
< #                valtionveroperuste,ansiotulovahennys,perusvahennys,tyotulovahennys,\
< #                tyotulovahennys_kunnallisveroon,ptel,sairausvakuutus,tyotvakmaksu,\
< #                koko_tyelmaksu,ylevero=self.verotus(p['t'],q['perustulo'],0,p['lapsia'],p)
< # 
< #         if (p['aikuisia']>1):
< #             _,q['puoliso_verot'],_,_,_,_,_,_,_,_,q['puoliso_ptel'],q['puoliso_sairausvakuutusmaksu'],\
< #                 q['puoliso_tyotvakmaksu'],q['puoliso_tyel_kokomaksu'],q['puoliso_ylevero']\
< #                 =self.verotus(p['puoliso_tulot'],q['puoliso_ansiopvraha']+q['puoliso_aitiyspaivaraha']+q['puoliso_isyyspaivaraha']
< #                     +q['puoliso_kotihoidontuki']+q['puoliso_sairauspaivaraha']+q['puoliso_opintotuki']+q['puoliso_perustulo'],
< #                     q['puoliso_kokoelake'],p['lapsia'],p)
< #             _,q['puoliso_verot_ilman_etuuksia_pl_pt'],_,_,_,_,_,_,_,_,_,_,_,_,_=self.verotus(p['puoliso_tulot'],q['puoliso_perustulo'],0,0,p)
< #             _,q['puoliso_verot_ilman_etuuksia'],_,_,_,_,_,_,_,_,_,_,_,_,_=self.verotus(p['puoliso_tulot'],0,0,0,p)
< #         else:
< #             q['puoliso_verot_ilman_etuuksia']=0
< #             q['puoliso_verot_ilman_etuuksia_pl_pt']=0
< #             q['puoliso_verot']=0
< #             q['puoliso_ptel']=0
< #             q['puoliso_sairausvakuutusmaksu']=0
< #             q['puoliso_tyotvakmaksu']=0
< #     
< #         if p['aikuisia']==1 and p['saa_elatustukea']>0:
< #             q['elatustuki']=self.laske_elatustuki(p['lapsia'],p['aikuisia'])
< #         else:
< #             q['elatustuki']=0
< #         
< #         if p['elakkeella']>0:
< #             q['asumistuki']=self.elakkeensaajan_asumistuki(p['puoliso_tulot']+p['t'],q['kokoelake'],p['asumismenot_asumistuki'],p)
< #         else:
< #             q['asumistuki']=self.asumistuki(p['puoliso_tulot']+p['t'],q['ansiopvraha']+q['puoliso_ansiopvraha']+q['aitiyspaivaraha']
< #                 +q['perustulo']+q['puoliso_perustulo']
< #                 +q['isyyspaivaraha']+q['kotihoidontuki']+q['sairauspaivaraha']+q['opintotuki'],p['asumismenot_asumistuki'],p)
< #             
< #         if p['lapsia']>0:
< #             q['pvhoito']=self.paivahoitomenot(p['lapsia_paivahoidossa'],p['puoliso_tulot']+p['t']+q['kokoelake']
< #                 +q['elatustuki']+q['ansiopvraha']+q['puoliso_ansiopvraha']+q['sairauspaivaraha']+q['perustulo']+q['puoliso_perustulo'],p)
< #             if (p['lapsia_kotihoidontuella']>0):
< #                 alle_kouluikaisia=max(0,p['lapsia_kotihoidontuella']-p['lapsia_alle_3v'])
< #                 q['pvhoito']=0 #max(0,q['pvhoito']-self.kotihoidontuki(p['lapsia_kotihoidontuella'],p['lapsia_alle_3v'],alle_kouluikaisia)) # ok?
< #             q['pvhoito_ilman_etuuksia_pl_pt']=self.paivahoitomenot(p['lapsia_paivahoidossa'],p['puoliso_tulot']+p['t']+q['elatustuki']+q['perustulo']+q['puoliso_perustulo'],p)
< #             q['pvhoito_ilman_etuuksia']=self.paivahoitomenot(p['lapsia_paivahoidossa'],p['puoliso_tulot']+p['t']+q['elatustuki'],p)
< #             if p['aikuisia']==1:
< #                 yksinhuoltajakorotus=1
< #             else:
< #                 yksinhuoltajakorotus=0
< #             q['lapsilisa']=self.laske_lapsilisa(p['lapsia'],yksinhuoltajakorotus=yksinhuoltajakorotus)
< #         else:
< #             q['pvhoito']=0
< #             q['pvhoito_ilman_etuuksia']=0
< #             q['pvhoito_ilman_etuuksia_pl_pt']=0
< #             q['lapsilisa']=0
< #     
< #         # lasketaan netotettu ansiopäiväraha huomioiden verot (kohdistetaan ansiopvrahaan se osa veroista, joka ei aiheudu palkkatuloista)
< #         q['kokoelake_netto'],q['isyyspaivaraha_netto'],q['ansiopvraha_netto'],q['aitiyspaivaraha_netto'],q['sairauspaivaraha_netto'],\
< #             q['puoliso_ansiopvraha_netto'],q['opintotuki_netto']=(0,0,0,0,0,0,0)
< # 
< #         q['perustulo_netto']=q['perustulo']-(q['verot_ilman_etuuksia_pl_pt']-q['verot_ilman_etuuksia'])
< #         q['puoliso_perustulo_netto']=q['puoliso_perustulo']-(q['puoliso_verot_ilman_etuuksia_pl_pt']-q['puoliso_verot_ilman_etuuksia'])
< # 
< #         if p['elakkeella']>0:
< #             q['kokoelake_netto']=q['kokoelake']-(q['verot']-q['verot_ilman_etuuksia'])
< #         elif p['opiskelija']>0:
< #             q['opintotuki_netto']=q['opintotuki']-(q['verot']-q['verot_ilman_etuuksia_pl_pt'])
< #         elif p['aitiysvapaalla']>0:
< #             q['aitiyspaivaraha_netto']=q['aitiyspaivaraha']-(q['verot']-q['verot_ilman_etuuksia_pl_pt']) 
< #         elif p['isyysvapaalla']>0:
< #             q['isyyspaivaraha_netto']=q['isyyspaivaraha']-(q['verot']-q['verot_ilman_etuuksia_pl_pt']) 
< #         elif p['kotihoidontuella']>0:
< #             q['kotihoidontuki_netto']=q['kotihoidontuki']-(q['verot']-q['verot_ilman_etuuksia_pl_pt']) 
< #         elif p['sairauspaivarahalla']>0:
< #             q['sairauspaivaraha_netto']=q['sairauspaivaraha']-(q['verot']-q['verot_ilman_etuuksia_pl_pt']) 
< #         else:
< #             q['ansiopvraha_netto']=q['ansiopvraha']-(q['verot']-q['verot_ilman_etuuksia_pl_pt'])
< #             
< #         if p['aikuisia']>1:
< #             if p['puoliso_tyoton']>0: # vanhuuseläkkeellä
< #                 q['puoliso_ansiopvraha_netto']=q['puoliso_ansiopvraha']-(q['puoliso_verot']-q['puoliso_verot_ilman_etuuksia_pl_pt'])
< #             elif p['puoliso_opiskelija']>0:
< #                 q['puoliso_opintotuki_netto']=q['puoliso_opintotuki']-(q['puoliso_verot']-q['puoliso_verot_ilman_etuuksia_pl_pt'])
< #             elif p['puoliso_kotihoidontuella']>0:
< #                 q['puoliso_kotihoidontuki_netto']=q['puoliso_kotihoidontuki']-(q['puoliso_verot']-q['puoliso_verot_ilman_etuuksia_pl_pt']) 
< #         else:
< #             q['puoliso_ansiopvraha_netto']=0
< #         #print('ptyötön',q['puoliso_ansiopvraha_netto'],q['puoliso_ansiopvraha'],q['puoliso_verot']-q['puoliso_verot_ilman_etuuksia'])
< #             
< #         if (p['isyysvapaalla']>0 or p['aitiysvapaalla']>0) and p['tyoton']>0:
< #             print('error: vanhempainvapaalla & työtön ei toteutettu')
< #     
< #         # jaetaan ilman etuuksia laskettu pvhoitomaksu puolisoiden kesken ansiopäivärahan suhteessa
< #         # eli kohdistetaan päivähoitomaksun korotus ansiopäivärahan mukana
< #         # ansiopäivärahaan miten huomioitu päivähoitomaksussa, ilman etuuksia
< # 
< #         if q['puoliso_ansiopvraha_netto']+q['ansiopvraha_netto']>0:
< #             suhde=max(0,q['ansiopvraha_netto']/(q['puoliso_ansiopvraha_netto']+q['ansiopvraha_netto']))
< #             q['ansiopvraha_nettonetto']=q['ansiopvraha_netto']-suhde*(q['pvhoito']-q['pvhoito_ilman_etuuksia_pl_pt'])
< #             q['puoliso_ansiopvraha_nettonetto']=q['puoliso_ansiopvraha_netto']-(1-suhde)*(q['pvhoito']-q['pvhoito_ilman_etuuksia_pl_pt'])
< #         else:
< #             q['ansiopvraha_nettonetto']=0
< #             q['puoliso_ansiopvraha_nettonetto']=0
< # 
< #         if q['perustulo_netto']+q['puoliso_perustulo_netto']>0:
< #             suhde=max(0,q['puoliso_perustulo_netto']/(q['puoliso_perustulo_netto']+q['perustulo_netto']))
< #             q['puoliso_perustulo_nettonetto']=q['puoliso_perustulo_netto']-suhde*(q['pvhoito_ilman_etuuksia_pl_pt']-q['pvhoito_ilman_etuuksia'])
< #             q['perustulo_nettonetto']=q['perustulo_netto']-(1-suhde)*(q['pvhoito_ilman_etuuksia_pl_pt']-q['pvhoito_ilman_etuuksia'])
< #         else:
< #             q['perustulo_nettonetto']=0
< #             q['puoliso_perustulo_nettonetto']=0
< # 
< #         if (not self.osittainen_perustulo) or self.perustulo_korvaa_toimeentulotuen: # toimeentulotuki korvattu perustulolla
< #             q['toimeentulotuki']=0
< #         else:
< #             if p['opiskelija']>0:
< #                 q['toimeentulotuki']=0
< #             else:
< #                 # Hmm, meneekö sairauspäiväraha, äitiyspäiväraha ja isyyspäiväraha oikein?
< #                 q['toimeentulotuki']=self.toimeentulotuki(p['t'],q['verot_ilman_etuuksia'],p['puoliso_tulot'],q['puoliso_verot_ilman_etuuksia'],
< #                     q['elatustuki']+q['opintotuki_netto']+q['puoliso_opintotuki_netto']+q['ansiopvraha_netto']+q['puoliso_ansiopvraha_netto']
< #                     +q['asumistuki']+q['sairauspaivaraha_netto']+q['lapsilisa']+q['kokoelake_netto']+q['aitiyspaivaraha_netto']+q['isyyspaivaraha_netto']
< #                     +q['kotihoidontuki_netto']+q['puoliso_kotihoidontuki_netto']+q['perustulo_netto']+q['puoliso_perustulo_netto'],
< #                     0,p['asumismenot_toimeentulo'],q['pvhoito'],p)
< # 
< #         kateen=q['perustulo']+q['puoliso_perustulo']+q['opintotuki']+q['kokoelake']+p['puoliso_tulot']+p['t']\
< #             +q['aitiyspaivaraha']+q['isyyspaivaraha']+q['kotihoidontuki']+q['asumistuki']+q['toimeentulotuki']\
< #             +q['ansiopvraha']+q['puoliso_ansiopvraha']+q['elatustuki']-q['puoliso_verot']-q['verot']-q['pvhoito']\
< #             +q['lapsilisa']+q['sairauspaivaraha']
< #         omanetto=q['opintotuki']+q['kokoelake']+p['t']+q['aitiyspaivaraha']+q['isyyspaivaraha']+q['kotihoidontuki']\
< #             +q['asumistuki']+q['toimeentulotuki']+q['ansiopvraha']+q['elatustuki']\
< #             -q['verot']-q['pvhoito']+q['lapsilisa']+q['sairauspaivaraha']
< #             
< #         q['kateen']=kateen # tulot yhteensä perheessä
< #         q['perhetulot_netto']=p['puoliso_tulot']+p['t']-q['verot_ilman_etuuksia']-q['puoliso_verot_ilman_etuuksia']-q['pvhoito_ilman_etuuksia'] # ilman etuuksia
< #         q['omattulot_netto']=p['t']-q['verot_ilman_etuuksia']-q['pvhoito_ilman_etuuksia'] # ilman etuuksia
< #         q['etuustulo_netto']=q['puoliso_perustulo_netto']+q['perustulo_netto']+q['ansiopvraha_netto']+q['puoliso_ansiopvraha_netto']+q['opintotuki']\
< #             +q['aitiyspaivaraha']+q['isyyspaivaraha']+q['kotihoidontuki']+q['asumistuki']\
< #             +q['toimeentulotuki']-(q['pvhoito_ilman_etuuksia']-q['pvhoito_ilman_etuuksia'])
< #         q['etuustulo_brutto']=q['puoliso_perustulo']+q['perustulo']+q['ansiopvraha']+q['puoliso_ansiopvraha']+q['opintotuki']\
< #             +q['aitiyspaivaraha']+q['isyyspaivaraha']+q['kotihoidontuki']+q['asumistuki']\
< #             +q['toimeentulotuki']+q['kokoelake']
< #         q['brutto']=q['etuustulo_brutto']+p['t']
< # 
< #         asumismeno=p['asumismenot_asumistuki']
< #             
< #         q['alv']=self.laske_alv(max(0,kateen-asumismeno)) # vuokran ylittävä osuus tuloista menee kulutukseen
< #         
< #         # nettotulo, joka huomioidaan elinkaarimallissa alkaen versiosta 4. sisältää omat tulot ja puolet vuokrasta
< #         q['netto']=max(0,kateen-q['alv'])
< #         #q['netto']=max(0,omanetto-q['alv']-asumismeno)
< #         
< #         if not legacy:
< #             kateen=q['netto']
< #         
< #         q['palkkatulot']=p['t']
< #         if p['elakkeella']<1:
< #             q['palkkatulot_eielakkeella']=p['t']
< #         else:
< #             q['palkkatulot_eielakkeella']=0
< #             
< #         q['puoliso_palkkatulot']=p['puoliso_tulot']
< #         q['puoliso_tulot_netto']=p['puoliso_tulot']-q['puoliso_verot_ilman_etuuksia']
< # 
< #         return kateen,q
---
>         return maksu
1654c3324
<     def laske_tulot_v2(self,p,tt_alennus=0,include_takuuelake=True,omat='omat_',omatalku='',puoliso='puoliso_',puolisoalku='puoliso_'):
---
>     def paivahoitomenot2021(self,hoidossa,tulot,p,prosentti1=None,prosentti2=None,prosentti3=None,maksimimaksu=None):
1656,1658c3326
<         v4:ää varten tehty tulonlaskenta
<         - eroteltu paremmin omat ja puolison tulot ja etuudet 
<         - perusmuuttujat ovat summamuuttujia
---
>         Päivähoitomaksut 1.8.2021
1660,1673c3328
<         p=self.check_p(p)
< 
<         q=self.setup_omat_q(p,omat=omat,alku=omatalku,include_takuuelake=include_takuuelake)
<         q=self.setup_puoliso_q(p,q,puoliso=puoliso)
<         
<         # q['verot] sisältää kaikki veronluonteiset maksut
<         _,q[omat+'verot'],q[omat+'valtionvero'],q[omat+'kunnallisvero'],q[omat+'kunnallisveronperuste'],q[omat+'valtionveroperuste'],\
<             q[omat+'ansiotulovahennys'],q[omat+'perusvahennys'],q[omat+'tyotulovahennys'],q[omat+'tyotulovahennys_kunnallisveroon'],\
<             q[omat+'ptel'],q[omat+'sairausvakuutusmaksu'],q[omat+'tyotvakmaksu'],q[omat+'tyel_kokomaksu'],q[omat+'ylevero']=\
<             self.verotus(q[omat+'palkkatulot'],q[omat+'ansiopvraha']+q[omat+'aitiyspaivaraha']+q[omat+'isyyspaivaraha']\
<                 +q[omat+'kotihoidontuki']+q[omat+'sairauspaivaraha']+q[omat+'opintotuki']+q[omat+'perustulo'],
<                 q[omat+'kokoelake'],p['lapsia'],p,alku=omatalku)
<         _,q[omat+'verot_ilman_etuuksia_pl_pt'],_,_,_,_,_,_,_,_,_,_,_,_,_=self.verotus(q[omat+'palkkatulot'],q[omat+'perustulo'],0,0,p,alku=omatalku)
<         _,q[omat+'verot_ilman_etuuksia'],_,_,_,_,_,_,_,_,_,_,_,_,_=self.verotus(q[omat+'palkkatulot'],0,0,p['lapsia'],p,alku=omatalku)
---
>         minimimaksu=27
1675,1684c3330,3331
<         if p['aikuisia']>1 and p[puoliso+'alive']>0:
<             _,q[puoliso+'verot'],q[puoliso+'valtionvero'],q[puoliso+'kunnallisvero'],q[puoliso+'kunnallisveronperuste'],q[puoliso+'valtionveroperuste'],\
<             q[puoliso+'ansiotulovahennys'],q[puoliso+'perusvahennys'],q[puoliso+'tyotulovahennys'],q[puoliso+'tyotulovahennys_kunnallisveroon'],\
<             q[puoliso+'ptel'],q[puoliso+'sairausvakuutusmaksu'],q[puoliso+'tyotvakmaksu'],q[puoliso+'tyel_kokomaksu'],q[puoliso+'ylevero']=\
<                 self.verotus(q[puoliso+'palkkatulot'],
<                     q[puoliso+'ansiopvraha']+q[puoliso+'aitiyspaivaraha']+q[puoliso+'isyyspaivaraha']+q[puoliso+'kotihoidontuki']\
<                     +q[puoliso+'sairauspaivaraha']+q[puoliso+'opintotuki']+q[puoliso+'perustulo'],
<                     q[puoliso+'kokoelake'],0,p,alku=puoliso) # onko oikein että lapsia 0 tässä????
<             _,q[puoliso+'verot_ilman_etuuksia_pl_pt'],_,_,_,_,_,_,_,_,_,_,_,_,_=self.verotus(q[puoliso+'palkkatulot'],q[puoliso+'perustulo'],0,0,p,alku=puoliso)
<             _,q[puoliso+'verot_ilman_etuuksia'],_,_,_,_,_,_,_,_,_,_,_,_,_=self.verotus(q[puoliso+'palkkatulot'],0,0,0,p,alku=puoliso)
---
>         if p['osaaikainen_paivahoito']>0:
>             osaaikainen=True
1686,1695c3333,3340
<             q[puoliso+'verot_ilman_etuuksia'],q[puoliso+'verot'],q[puoliso+'valtionvero']=0,0,0
<             q[puoliso+'verot_ilman_etuuksia_pl_pt']=0
<             q[puoliso+'kunnallisvero'],q[puoliso+'kunnallisveronperuste'],q[puoliso+'valtionveroperuste']=0,0,0
<             q[puoliso+'tyotulovahennys'],q[puoliso+'ansiotulovahennys']=0,0
<             q[puoliso+'perusvahennys'],q[puoliso+'tyotulovahennys_kunnallisveroon']=0,0
<             q[puoliso+'ptel']=0
<             q[puoliso+'sairausvakuutusmaksu']=0
<             q[puoliso+'tyotvakmaksu']=0
<             q[puoliso+'tyel_kokomaksu']=0
<             q[puoliso+'ylevero']=0
---
>             osaaikainen=False
> 
>         if prosentti1==None:
>             prosentti1=0.107
>         if prosentti2==None:
>             prosentti2=0.4
>         if prosentti3==None:
>             prosentti3=0.2
1697,1699c3342,3396
<         # elatustuki (ei vaikuta kannnusteisiin, vain tuloihin, koska ei yhteensovitusta)
<         if p['aikuisia']==1 and p['saa_elatustukea']>0 and p[omatalku+'alive']>0:
<             q[omat+'elatustuki']=self.laske_elatustuki(p['lapsia'],p['aikuisia'])
---
>         if maksimimaksu==None:
>             maksimimaksu=288
> 
>         if p['lapsia']>0:
>             vakea=p['lapsia']+p['aikuisia']
>             if vakea==1:
>                 alaraja=2789
>                 prosentti=prosentti1
>             elif vakea==2:
>                 alaraja=2789
>                 prosentti=prosentti1
>             elif vakea==3:
>                 alaraja=3610
>                 prosentti=prosentti1
>             elif vakea==4:
>                 alaraja=4099
>                 prosentti=prosentti1
>             elif vakea==5:
>                 alaraja=4588
>                 prosentti=prosentti1
>             elif vakea==6:
>                 alaraja=5075
>                 prosentti=prosentti1
>             else:
>                 alaraja=5075+138*(vakea-6)
>                 prosentti=prosentti1
> 
>             pmaksu=min(maksimimaksu,max(0,tulot-alaraja)*prosentti)
>             if hoidossa==0:
>                 kerroin=0
>             elif hoidossa==1:
>                 if pmaksu<minimimaksu:
>                     kerroin=0
>                 else:
>                     kerroin=1
>             elif hoidossa==2:
>                 if pmaksu<minimimaksu:
>                     kerroin=0
>                 else:
>                     if (prosentti2*pmaksu<minimimaksu):
>                         kerroin=1
>                     else:
>                         kerroin=1+prosentti2
>             else:
>                 if pmaksu<minimimaksu:
>                     kerroin=0
>                 else:
>                     if prosentti2*pmaksu<minimimaksu:
>                         kerroin=1
>                     else:
>                         if (prosentti3*pmaksu<minimimaksu):
>                             kerroin=1+prosentti2
>                         else:
>                             kerroin=1+prosentti2+prosentti3*(p['lapsia']-2)
>             maksu=kerroin*pmaksu
1701c3398
<             q[omat+'elatustuki']=0
---
>             maksu=0
1703c3400,3401
<         q[puoliso+'elatustuki']=0
---
>         if osaaikainen:
>             maksu *= 0.6
1705c3403,3409
<         q=self.summaa_q(p,q,omat=omat,puoliso=puoliso)
---
>         return maksu        
>         
>     def paivahoitomenot2022(self,hoidossa,tulot,p,prosentti1=None,prosentti2=None,prosentti3=None,maksimimaksu=None):
>         '''
>         Päivähoitomaksut 1.8.2021
>         '''
>         minimimaksu=27
1707,1710c3411,3412
<         if p[puolisoalku+'alive']<1 and p[omatalku+'alive']<1:
<             q['asumistuki'] = 0
<         elif p[omatalku+'elakkeella']>0 and p[puolisoalku+'elakkeella']>0 :
<             q['asumistuki']=self.elakkeensaajan_asumistuki(q['palkkatulot'],q['kokoelake'],p['asumismenot_asumistuki'],p)
---
>         if p['osaaikainen_paivahoito']>0:
>             osaaikainen=True
1712,1717c3414,3421
<             q['asumistuki']=self.asumistuki(q['palkkatulot'],q['ansiopvraha']+q['aitiyspaivaraha']+q['isyyspaivaraha']+q['perustulo']
<                                             +q['kotihoidontuki']+q['sairauspaivaraha']+q['opintotuki'],
<                                             p['asumismenot_asumistuki'],p)
< #             print(q['palkkatulot'],q['ansiopvraha']+q['aitiyspaivaraha']+q['isyyspaivaraha']
< #                                             +q['kotihoidontuki']+q['sairauspaivaraha']+q['opintotuki'],
< #                                             p['asumismenot_asumistuki'])
---
>             osaaikainen=False
> 
>         if prosentti1==None:
>             prosentti1=0.107
>         if prosentti2==None:
>             prosentti2=0.4
>         if prosentti3==None:
>             prosentti3=0.2
1718a3423,3425
>         if maksimimaksu==None:
>             maksimimaksu=288
> 
1720,1723c3427,3455
<             if p['aikuisia']>1:
<                 if p[omatalku+'aitiysvapaalla']>0 or p[omatalku+'isyysvapaalla']>0 or p[omatalku+'kotihoidontuella']>0 \
<                     or p[puolisoalku+'aitiysvapaalla']>0 or p[puolisoalku+'isyysvapaalla']>0 or p[puolisoalku+'kotihoidontuella']>0:
<                     ei_pvhoitoa=True
---
>             vakea=p['lapsia']+p['aikuisia']
>             if vakea==1:
>                 alaraja=2789
>                 prosentti=prosentti1
>             elif vakea==2:
>                 alaraja=2789
>                 prosentti=prosentti1
>             elif vakea==3:
>                 alaraja=3610
>                 prosentti=prosentti1
>             elif vakea==4:
>                 alaraja=4099
>                 prosentti=prosentti1
>             elif vakea==5:
>                 alaraja=4588
>                 prosentti=prosentti1
>             elif vakea==6:
>                 alaraja=5075
>                 prosentti=prosentti1
>             else:
>                 alaraja=5075+138*(vakea-6)
>                 prosentti=prosentti1
> 
>             pmaksu=min(maksimimaksu,max(0,tulot-alaraja)*prosentti)
>             if hoidossa==0:
>                 kerroin=0
>             elif hoidossa==1:
>                 if pmaksu<minimimaksu:
>                     kerroin=0
1725c3457,3465
<                     ei_pvhoitoa=False
---
>                     kerroin=1
>             elif hoidossa==2:
>                 if pmaksu<minimimaksu:
>                     kerroin=0
>                 else:
>                     if (prosentti2*pmaksu<minimimaksu):
>                         kerroin=1
>                     else:
>                         kerroin=1+prosentti2
1727,1728c3467,3468
<                 if p[omatalku+'aitiysvapaalla']>0 or p[omatalku+'isyysvapaalla']>0 or p[omatalku+'kotihoidontuella']>0:
<                     ei_pvhoitoa=True
---
>                 if pmaksu<minimimaksu:
>                     kerroin=0
1730c3470,3479
<                     ei_pvhoitoa=False
---
>                     if prosentti2*pmaksu<minimimaksu:
>                         kerroin=1
>                     else:
>                         if (prosentti3*pmaksu<minimimaksu):
>                             kerroin=1+prosentti2
>                         else:
>                             kerroin=1+prosentti2+prosentti3*(p['lapsia']-2)
>             maksu=kerroin*pmaksu
>         else:
>             maksu=0
1732,1735c3481,3526
<             if ei_pvhoitoa:
<                 q['pvhoito']=0
<                 q['pvhoito_ilman_etuuksia']=0
<                 q['pvhoito_ilman_etuuksia_pl_pt']=0
---
>         if osaaikainen:
>             maksu *= 0.6
>         
>         return maksu                
>         
>     def paivahoitomenot2023(self,hoidossa,tulot,p,prosentti1=None,prosentti2=None,prosentti3=None,maksimimaksu=None):
>         '''
>         Päivähoitomaksut 1.8.2021
>         '''
>         minimimaksu=27
> 
>         if p['osaaikainen_paivahoito']>0:
>             osaaikainen=True
>         else:
>             osaaikainen=False
> 
>         if prosentti1==None:
>             prosentti1=0.107
>         if prosentti2==None:
>             prosentti2=0.4
>         if prosentti3==None:
>             prosentti3=0.2
>             
>         if maksimimaksu==None:
>             maksimimaksu=288
> 
>         if p['lapsia']>0:
>             vakea=p['lapsia']+p['aikuisia']
>             if vakea==1:
>                 alaraja=2789
>                 prosentti=prosentti1
>             elif vakea==2:
>                 alaraja=2789
>                 prosentti=prosentti1
>             elif vakea==3:
>                 alaraja=3610
>                 prosentti=prosentti1
>             elif vakea==4:
>                 alaraja=4099
>                 prosentti=prosentti1
>             elif vakea==5:
>                 alaraja=4588
>                 prosentti=prosentti1
>             elif vakea==6:
>                 alaraja=5075
>                 prosentti=prosentti1
1737,1746c3528,3546
<                 # kuukausi lomalla, jolloin ei päivähoitoa
<                 q['pvhoito']=11/12*self.paivahoitomenot(p['lapsia_paivahoidossa'],q['palkkatulot']+q['kokoelake']+q['elatustuki']
<                     +q['ansiopvraha']+q['sairauspaivaraha']+q['perustulo'],p)
<                 q['pvhoito_ilman_etuuksia_pl_pt']=self.paivahoitomenot(p['lapsia_paivahoidossa'],q['palkkatulot']+q['elatustuki']+q['perustulo'],p)
<                 q['pvhoito_ilman_etuuksia']=11/12*self.paivahoitomenot(p['lapsia_paivahoidossa'],q['palkkatulot']+q['elatustuki'],p)
<                 #if p['lapsia_paivahoidossa']>0:
<                 #    print('pv',q['pvhoito'],'lapsia',p['lapsia_paivahoidossa'],'t',q['palkkatulot'],'etuus',q['kokoelake']+q['elatustuki']+q['ansiopvraha']+q['sairauspaivaraha'])
<                 
<             if p['aikuisia']==1:
<                 yksinhuoltajakorotus=1
---
>                 alaraja=5075+138*(vakea-6)
>                 prosentti=prosentti1
> 
>             pmaksu=min(maksimimaksu,max(0,tulot-alaraja)*prosentti)
>             if hoidossa==0:
>                 kerroin=0
>             elif hoidossa==1:
>                 if pmaksu<minimimaksu:
>                     kerroin=0
>                 else:
>                     kerroin=1
>             elif hoidossa==2:
>                 if pmaksu<minimimaksu:
>                     kerroin=0
>                 else:
>                     if (prosentti2*pmaksu<minimimaksu):
>                         kerroin=1
>                     else:
>                         kerroin=1+prosentti2
1748,1749c3548,3558
<                 yksinhuoltajakorotus=0
<             q['lapsilisa']=self.laske_lapsilisa(p['lapsia'],yksinhuoltajakorotus=yksinhuoltajakorotus)
---
>                 if pmaksu<minimimaksu:
>                     kerroin=0
>                 else:
>                     if prosentti2*pmaksu<minimimaksu:
>                         kerroin=1
>                     else:
>                         if (prosentti3*pmaksu<minimimaksu):
>                             kerroin=1+prosentti2
>                         else:
>                             kerroin=1+prosentti2+prosentti3*(p['lapsia']-2)
>             maksu=kerroin*pmaksu
1751,1762c3560,3589
<             q['pvhoito']=0
<             q['pvhoito_ilman_etuuksia']=0
<             q['pvhoito_ilman_etuuksia_pl_pt']=0
<             q['lapsilisa']=0
<     
<         # lasketaan netotettu ansiopäiväraha huomioiden verot (kohdistetaan ansiopvrahaan se osa veroista, joka ei aiheudu palkkatuloista)
<         q['kokoelake_netto'],q['isyyspaivaraha_netto'],q['ansiopvraha_netto'],q['aitiyspaivaraha_netto'],q['sairauspaivaraha_netto'],\
<             q[puoliso+'ansiopvraha_netto'],q['opintotuki_netto']=(0,0,0,0,0,0,0)
<         q[omat+'kokoelake_netto'],q[omat+'isyyspaivaraha_netto'],q[omat+'ansiopvraha_netto'],q[omat+'aitiyspaivaraha_netto'],q[omat+'sairauspaivaraha_netto'],\
<             q[omat+'opintotuki_netto'],q[omat+'kotihoidontuki_netto']=(0,0,0,0,0,0,0)
<         q[puoliso+'kokoelake_netto'],q[puoliso+'isyyspaivaraha_netto'],q[puoliso+'ansiopvraha_netto'],q[puoliso+'aitiyspaivaraha_netto'],q[puoliso+'sairauspaivaraha_netto'],\
<             q[puoliso+'opintotuki_netto'],q[puoliso+'kotihoidontuki_netto']=(0,0,0,0,0,0,0)
---
>             maksu=0
>         
>         if osaaikainen:
>             maksu *= 0.6
>         
>         return maksu
>         
>     def laske_kansanelake2018(self,ika : int,tyoelake : float,yksin,disability=False,lapsia=0):
>         if yksin>0:
>             maara=628.85
>         else:
>             maara=557.79
>             
>         if lapsia>0:
>             maara += 22.23*lapsia
>             
>         if disability: # ei lykkäystä tai varhennusta
>             maara = max(0,maara-np.maximum(0,(tyoelake-55.54))/2)
>         else:
>             if ika>=65:
>                 maara = max(0,maara*(1.0+0.072*(ika-65))-np.maximum(0,(tyoelake-55.54))/2)
>             elif ika>=62: # varhennus
>                 maara = max(0,maara*(1.0-0.048*(65-ika))-np.maximum(0,(tyoelake-55.54))/2)
>             else:
>                 maara=0
>             
>         if maara<6.92:
>             maara=0
>             
>         return maara
1764,1775c3591,3593
<         if p[omatalku+'elakkeella']>0:
<             q[omat+'kokoelake_netto']=q[omat+'kokoelake']-(q[omat+'verot']-q[omat+'verot_ilman_etuuksia_pl_pt'])
<         elif p[omatalku+'opiskelija']>0:
<             q[omat+'opintotuki_netto']=q[omat+'opintotuki']-(q[omat+'verot']-q[omat+'verot_ilman_etuuksia_pl_pt'])
<         elif p[omatalku+'aitiysvapaalla']>0:
<             q[omat+'aitiyspaivaraha_netto']=q[omat+'aitiyspaivaraha']-(q[omat+'verot']-q[omat+'verot_ilman_etuuksia_pl_pt']) 
<         elif p[omatalku+'isyysvapaalla']>0:
<             q[omat+'isyyspaivaraha_netto']=q[omat+'isyyspaivaraha']-(q[omat+'verot']-q[omat+'verot_ilman_etuuksia_pl_pt']) 
<         elif p[omatalku+'kotihoidontuella']>0:
<             q[omat+'kotihoidontuki_netto']=q[omat+'kotihoidontuki']-(q[omat+'verot']-q[omat+'verot_ilman_etuuksia_pl_pt']) 
<         elif p[omatalku+'sairauspaivarahalla']>0:
<             q[omat+'sairauspaivaraha_netto']=q[omat+'sairauspaivaraha']-(q[omat+'verot']-q[omat+'verot_ilman_etuuksia_pl_pt']) 
---
>     def laske_kansanelake2019(self,ika : int,tyoelake : float,yksin,disability=False,lapsia=0):
>         if yksin>0:
>             maara=628.85
1777,1792c3595,3600
<             q[omat+'ansiopvraha_netto']=q[omat+'ansiopvraha']-(q[omat+'verot']-q[omat+'verot_ilman_etuuksia_pl_pt'])
< 
<         q[omat+'perustulo_netto']=q[omat+'perustulo']-(q[omat+'verot_ilman_etuuksia_pl_pt']-q[omat+'verot_ilman_etuuksia'])
< 
<         if p[puolisoalku+'elakkeella']>0:
<             q[puoliso+'kokoelake_netto']=q[puoliso+'kokoelake']-(q[puoliso+'verot']-q[puoliso+'verot_ilman_etuuksia_pl_pt'])
<         elif p[puolisoalku+'opiskelija']>0:
<             q[puoliso+'opintotuki_netto']=q[puoliso+'opintotuki']-(q[puoliso+'verot']-q[puoliso+'verot_ilman_etuuksia_pl_pt'])
<         elif p[puolisoalku+'aitiysvapaalla']>0:
<             q[puoliso+'aitiyspaivaraha_netto']=q[puoliso+'aitiyspaivaraha']-(q[puoliso+'verot']-q[puoliso+'verot_ilman_etuuksia_pl_pt']) 
<         elif p[puolisoalku+'isyysvapaalla']>0:
<             q[puoliso+'isyyspaivaraha_netto']=q[puoliso+'isyyspaivaraha']-(q[puoliso+'verot']-q[puoliso+'verot_ilman_etuuksia_pl_pt']) 
<         elif p[puolisoalku+'kotihoidontuella']>0:
<             q[puoliso+'kotihoidontuki_netto']=q[puoliso+'kotihoidontuki']-(q[puoliso+'verot']-q[puoliso+'verot_ilman_etuuksia_pl_pt']) 
<         elif p[puolisoalku+'sairauspaivarahalla']>0:
<             q[puoliso+'sairauspaivaraha_netto']=q[puoliso+'sairauspaivaraha']-(q[puoliso+'verot']-q[puoliso+'verot_ilman_etuuksia_pl_pt']) 
---
>             maara=557.79
>         if lapsia>0:
>             maara += 22.23*lapsia
>             
>         if disability:
>             maara = max(0,maara-np.maximum(0,(tyoelake-55.54))/2)
1794,1796c3602,3612
<             q[puoliso+'ansiopvraha_netto']=q[puoliso+'ansiopvraha']-(q[puoliso+'verot']-q[puoliso+'verot_ilman_etuuksia_pl_pt'])
< 
<         q[puoliso+'perustulo_netto']=q[puoliso+'perustulo']-(q[puoliso+'verot_ilman_etuuksia_pl_pt']-q[puoliso+'verot_ilman_etuuksia'])
---
>             if ika>=65:
>                 maara = max(0,maara*(1.0+0.072*(ika-65))-np.maximum(0,(tyoelake-55.54))/2)
>             elif ika>=62: # varhennus
>                 maara = max(0,maara*(1.0-0.048*(65-ika))-np.maximum(0,(tyoelake-55.54))/2)
>             else:
>                 maara=0
>             
>         if maara<6.92:
>             maara=0
>             
>         return maara
1798,1800c3614,3635
<         q[puoliso+'palkkatulot_netto']=q[puoliso+'palkkatulot']-q[puoliso+'verot_ilman_etuuksia']
<         q[omat+'palkkatulot_netto']=q[omat+'palkkatulot']-q[omat+'verot_ilman_etuuksia']
<         q['palkkatulot_netto']=q[omat+'palkkatulot_netto']+q[puoliso+'palkkatulot_netto']
---
>     def laske_kansanelake2020(self,ika : int,tyoelake : float,yksin,disability=False,lapsia=0):
>         if yksin>0:
>             maara=662.86
>         else:
>             maara=591.79
>         if lapsia>0:
>             maara += 22.23*lapsia
>             
>         if disability:
>             maara = max(0,maara-np.maximum(0,(tyoelake-55.54))/2)
>         else:
>             if ika>=65:
>                 maara = max(0,maara*(1.0+0.072*(ika-65))-np.maximum(0,(tyoelake-55.54))/2)
>             elif ika>=62: # varhennus
>                 maara = max(0,maara*(1.0-0.048*(65-ika))-np.maximum(0,(tyoelake-55.54))/2)
>             else:
>                 maara=0
>             
>         if maara<6.92:
>             maara=0
>             
>         return maara
1802,1808c3637,3643
<         q['perustulo_netto']=q[omat+'perustulo_netto']+q[puoliso+'perustulo_netto']
<         q['ansiopvraha_netto']=q[omat+'ansiopvraha_netto']+q[puoliso+'ansiopvraha_netto']
<         q['kokoelake_netto']=q[omat+'kokoelake_netto']+q[puoliso+'kokoelake_netto']
<         q['aitiyspaivaraha_netto']=q[omat+'aitiyspaivaraha_netto']+q[puoliso+'aitiyspaivaraha_netto']
<         q['isyyspaivaraha_netto']=q[omat+'isyyspaivaraha_netto']+q[puoliso+'isyyspaivaraha_netto']
<         q['kotihoidontuki_netto']=q[omat+'kotihoidontuki_netto']+q[puoliso+'kotihoidontuki_netto']
<         q['sairauspaivaraha_netto']=q[omat+'sairauspaivaraha_netto']+q[puoliso+'sairauspaivaraha_netto']
---
>     def laske_kansanelake2021(self,ika : int,tyoelake : float,yksin,disability=False,lapsia=0):
>         if yksin>0:
>             maara=665.29
>         else:
>             maara=593.97
>         if lapsia>0:
>             maara += 22.23*lapsia
1810,1832c3645,3651
<         if (p[omatalku+'isyysvapaalla']>0 or p[omatalku+'aitiysvapaalla']>0) and p[omatalku+'tyoton']>0:
<             print('error: vanhempainvapaalla & työtön ei toteutettu')
<         if (p[puolisoalku+'isyysvapaalla']>0 or p[puolisoalku+'aitiysvapaalla']>0) and p[puolisoalku+'tyoton']>0:
<             print('error: vanhempainvapaalla & työtön ei toteutettu')
<     
<         # jaetaan ilman etuuksia laskettu pvhoitomaksu puolisoiden kesken ansiopäivärahan suhteessa
<         # eli kohdistetaan päivähoitomaksun korotus ansiopäivärahan mukana
<         # ansiopäivärahaan miten huomioitu päivähoitomaksussa, ilman etuuksia
<         if q['palkkatulot_netto']>0:
<             if p['aikuisia']>1:
<                 if p[omatalku+'alive']>0 and p[puolisoalku+'alive']>0:
<                     suhde=max(0,q[omat+'palkkatulot_netto']/q['palkkatulot_netto'])
<                     q[omat+'palkkatulot_nettonetto']=q[omat+'palkkatulot_netto']-suhde*q['pvhoito_ilman_etuuksia']
<                     q[puoliso+'palkkatulot_nettonetto']=q[puoliso+'palkkatulot_netto']-(1-suhde)*q['pvhoito_ilman_etuuksia']
<                 elif p[omatalku+'alive']>0:
<                     q[omat+'palkkatulot_nettonetto']=q[omat+'palkkatulot_netto']-q['pvhoito_ilman_etuuksia']
<                     q[puoliso+'palkkatulot_nettonetto']=0
<                 elif p[puolisoalku+'alive']>0:
<                     q[puoliso+'palkkatulot_nettonetto']=q[puoliso+'palkkatulot_netto']-q['pvhoito_ilman_etuuksia']
<                     q[omat+'palkkatulot_nettonetto']=0
<                 else:
<                     q[omat+'palkkatulot_nettonetto']=0
<                     q[puoliso+'palkkatulot_nettonetto']=0
---
>         if disability:
>             maara = max(0,maara-np.maximum(0,(tyoelake-56.29))/2)
>         else:
>             if ika>=65:
>                 maara = max(0,maara*(1.0+0.072*(ika-65))-np.maximum(0,(tyoelake-56.29))/2)
>             elif ika>=62: # varhennus
>                 maara = max(0,maara*(1.0-0.048*(65-ika))-np.maximum(0,(tyoelake-56.29))/2)
1834,1837c3653,3662
<                 q[omat+'palkkatulot_nettonetto']=q[omat+'palkkatulot_netto']-q['pvhoito_ilman_etuuksia']
<                 q[puoliso+'palkkatulot_nettonetto']=0
<                 
<             q['palkkatulot_nettonetto']=q[puoliso+'palkkatulot_nettonetto']+q[omat+'palkkatulot_nettonetto']
---
>                 maara=0
>             
>         if maara<6.92:
>             maara=0
>             
>         return maara
>         
>     def laske_kansanelake2022(self,ika : int,tyoelake : float,yksin : int,disability=False,lapsia=0):
>         if yksin>0:
>             maara=679.50
1839,1841c3664,3666
<             q[omat+'palkkatulot_nettonetto']=0
<             q[puoliso+'palkkatulot_nettonetto']=0
<             q['palkkatulot_nettonetto']=0
---
>             maara=606.65
>         if lapsia>0:
>             maara += 22.71*lapsia
1843,1857c3668,3674
<         if q['ansiopvraha_netto']>0:
<             if p['aikuisia']>1:
<                 if p[omatalku+'alive']>0 and p[puolisoalku+'alive']>0:
<                     suhde=max(0,q[omat+'ansiopvraha_netto']/q['ansiopvraha_netto'])
<                     q[omat+'ansiopvraha_nettonetto']=q[omat+'ansiopvraha_netto']-suhde*(q['pvhoito']-q['pvhoito_ilman_etuuksia_pl_pt'])
<                     q[puoliso+'ansiopvraha_nettonetto']=q[puoliso+'ansiopvraha_netto']-(1-suhde)*(q['pvhoito']-q['pvhoito_ilman_etuuksia_pl_pt'])
<                 elif p[omatalku+'alive']>0:
<                     q[omat+'ansiopvraha_nettonetto']=q[omat+'ansiopvraha_netto']-(q['pvhoito']-q['pvhoito_ilman_etuuksia_pl_pt'])
<                     q[puoliso+'ansiopvraha_nettonetto']=0
<                 elif p[puolisoalku+'alive']>0:
<                     q[puoliso+'ansiopvraha_nettonetto']=q[puoliso+'ansiopvraha_netto']-(q['pvhoito']-q['pvhoito_ilman_etuuksia_pl_pt'])
<                     q[omat+'ansiopvraha_nettonetto']=0
<                 else:
<                     q[omat+'ansiopvraha_nettonetto']=0
<                     q[puoliso+'ansiopvraha_nettonetto']=0
---
>         if disability:
>             maara = max(0,maara-np.maximum(0,(tyoelake-57.45))/2)
>         else:
>             if ika>=65:
>                 maara = max(0,maara*(1.0+0.072*(ika-65))-np.maximum(0,(tyoelake-57.45))/2)
>             elif ika>=62: # varhennus
>                 maara = max(0,maara*(1.0-0.048*(65-ika))-np.maximum(0,(tyoelake-57.45))/2)
1859,1860c3676
<                 q[omat+'ansiopvraha_nettonetto']=q[omat+'ansiopvraha_netto']-(q['pvhoito']-q['pvhoito_ilman_etuuksia_pl_pt'])
<                 q[puoliso+'ansiopvraha_nettonetto']=0
---
>                 maara=0
1862c3678,3685
<             q['ansiopvraha_nettonetto']=q[puoliso+'ansiopvraha_nettonetto']+q[omat+'ansiopvraha_nettonetto']
---
>         if maara<6.92:
>             maara=0
>             
>         return maara
>         
>     def laske_kansanelake2023(self,ika : int,tyoelake : float,yksin : int,disability=False,lapsia=0):
>         if yksin>0:
>             maara=679.50
1864,1866c3687,3689
<             q[omat+'ansiopvraha_nettonetto']=0
<             q[puoliso+'ansiopvraha_nettonetto']=0
<             q['ansiopvraha_nettonetto']=0
---
>             maara=606.65
>         if lapsia>0:
>             maara += 22.71*lapsia
1868,1901c3691,3692
<         if q['perustulo_netto']>0:
<             if p['aikuisia']>1:
<                 if q[omat+'perustulo_netto']+q[puoliso+'perustulo_netto']>0:
<                     suhde=max(0,q[puoliso+'perustulo_netto']/(q[puoliso+'perustulo_netto']+q['perustulo_netto']))
<                     q[puoliso+'perustulo_nettonetto']=q[puoliso+'perustulo_netto']-suhde*(q['pvhoito_ilman_etuuksia_pl_pt']-q['pvhoito_ilman_etuuksia'])
<                     q[omat+'perustulo_nettonetto']=q[omat+'perustulo_netto']-(1-suhde)*(q['pvhoito_ilman_etuuksia_pl_pt']-q['pvhoito_ilman_etuuksia'])
<                 else:
<                     q[omat+'perustulo_nettonetto']=0
<                     q[puoliso+'perustulo_nettonetto']=0
<             else:
<                 q[omat+'perustulo_nettonetto']=q[omat+'perustulo_netto']-(q['pvhoito_ilman_etuuksia_pl_pt']-q['pvhoito_ilman_etuuksia'])
<                 q[puoliso+'perustulo_nettonetto']=0
<             
<             q['perustulo_nettonetto']=q[puoliso+'perustulo_nettonetto']+q[omat+'perustulo_nettonetto']
<         else:
<             q[omat+'perustulo_nettonetto']=0
<             q[puoliso+'perustulo_nettonetto']=0
<             q['perustulo_nettonetto']=0
< 
<         if p['aikuisia']<2:
<             if p[omatalku+'opiskelija']>0 or p[omatalku+'alive']<1:
<                 q['toimeentulotuki']=0
<             else:
<                 q['toimeentulotuki']=self.toimeentulotuki(p[omatalku+'t'],q[omat+'verot_ilman_etuuksia'],0,0,\
<                     q['elatustuki']+q['opintotuki_netto']+q['perustulo_netto']+q['ansiopvraha_netto']+q['asumistuki']+q['sairauspaivaraha_netto']\
<                     +q['lapsilisa']+q['kokoelake_netto']+q['aitiyspaivaraha_netto']+q['isyyspaivaraha_netto']+q['kotihoidontuki_netto'],\
<                     0,p['asumismenot_toimeentulo'],q['pvhoito'],p)
<                 #print(p[omatalku+'t'],q[omat+'verot_ilman_etuuksia'],0,0,\
<                 #    q['elatustuki']+q['opintotuki']+q['ansiopvraha_netto']+q['asumistuki']+q['sairauspaivaraha_netto']\
<                 #    +q['lapsilisa']+q['kokoelake_netto']+q['aitiyspaivaraha_netto']+q['isyyspaivaraha_netto']+q['kotihoidontuki'],\
<                 #    0,p['asumismenot_toimeentulo'],q['pvhoito'])
<                 #print(q['elatustuki'],q['opintotuki'],q['ansiopvraha_netto'],q['asumistuki'],q['sairauspaivaraha_netto'])
<                 #print(q['lapsilisa'],q['kokoelake_netto'],q['aitiyspaivaraha_netto'],q['isyyspaivaraha_netto'],q['kotihoidontuki'])
<                 #print('*',q['ansiopvraha_netto'],q['asumistuki'],q['lapsilisa'],q['kokoelake_netto'],q['elatustuki'])
---
>         if disability:
>             maara = max(0,maara-np.maximum(0,(tyoelake-57.45))/2)
1903,1904c3694,3697
<             if p[omatalku+'opiskelija']>0 and p[puolisoalku+'opiskelija']>0:
<                 q['toimeentulotuki']=0
---
>             if ika>=65:
>                 maara = max(0,maara*(1.0+0.072*(ika-65))-np.maximum(0,(tyoelake-57.45))/2)
>             elif ika>=62: # varhennus
>                 maara = max(0,maara*(1.0-0.048*(65-ika))-np.maximum(0,(tyoelake-57.45))/2)
1906,1915c3699,3716
<                 # Hmm, meneekö sairauspäiväraha, äitiyspäiväraha ja isyyspäiväraha oikein?
<                 q['toimeentulotuki']=self.toimeentulotuki(p[omatalku+'t'],q[omat+'verot_ilman_etuuksia'],p[puolisoalku+'t'],q[puoliso+'verot_ilman_etuuksia'],\
<                     q['elatustuki']+q['opintotuki_netto']+q['ansiopvraha_netto']+q['perustulo_netto']+q['asumistuki']+q['sairauspaivaraha_netto']\
<                     +q['lapsilisa']+q['kokoelake_netto']+q['aitiyspaivaraha_netto']+q['isyyspaivaraha_netto']+q['kotihoidontuki_netto'],\
<                     0,p['asumismenot_toimeentulo'],q['pvhoito'],p)
<                     
<         # sisältää sekä omat että puolison tulot ja menot
<         kateen=q['perustulo']+q['opintotuki']+q['kokoelake']+q['palkkatulot']+q['aitiyspaivaraha']+q['isyyspaivaraha']\
<             +q['kotihoidontuki']+q['asumistuki']+q['toimeentulotuki']+q['ansiopvraha']+q['elatustuki']\
<             -q['verot']-q['pvhoito']+q['lapsilisa']+q['sairauspaivaraha']
---
>                 maara=0
>                 
>         if maara<6.92:
>             maara=0
>             
>         return maara        
>     def laske_takuuelake2018(self,ika : int,muuelake : float,disability=False,lapsia=0):
>         if ika<63 and not disability:
>             return 0
>         
>         lapsikorotus=22.23*lapsia
>         if muuelake<777.84+lapsikorotus:
>             elake=784.52+lapsikorotus-muuelake
>         else:
>             elake=0
>         
>         if elake<6.92:
>             elake=0
1917,1926c3718,3752
<         brutto_omat=q[omat+'opintotuki']+q[omat+'kokoelake']+q[omat+'palkkatulot']+q[omat+'aitiyspaivaraha']\
<             +q[omat+'isyyspaivaraha']+q[omat+'kotihoidontuki']+\
<             +q[omat+'ansiopvraha']+q[omat+'elatustuki']+q[omat+'sairauspaivaraha']+q[omat+'perustulo']
<         kateen_omat=brutto_omat-q[omat+'verot']
<         etuusnetto_omat=brutto_omat-q[omat+'palkkatulot']-(q[omat+'verot']-q[omat+'verot_ilman_etuuksia'])
<                     
<         q['kateen']=kateen # tulot yhteensä perheessä
<         q['etuustulo_netto']=q['ansiopvraha']+q['opintotuki']+q['aitiyspaivaraha']+q['isyyspaivaraha']+q['kotihoidontuki']+q['asumistuki']\
<             +q['toimeentulotuki']+q['kokoelake']+q['elatustuki']+q['lapsilisa']+q['perustulo']+q['sairauspaivaraha']\
<             -(q['pvhoito']-q['pvhoito_ilman_etuuksia'])-(q['verot']-q['verot_ilman_etuuksia'])
---
>         return elake
>     
>     def laske_takuuelake2019(self,ika : int,muuelake : float,disability=False,lapsia=0):
>         if ika<63 and not disability:
>             return 0
>         
>         lapsikorotus=22.23*lapsia
>         if muuelake<777.84+lapsikorotus:
>             elake=784.52+lapsikorotus-muuelake
>         else:
>             elake=0
>         
>         if elake<6.92:
>             elake=0
> 
>         return elake
>     
>     def laske_takuuelake2020(self,ika : int,muuelake : float,disability=False,lapsia=0):
>         if ika<63 and not disability:
>             return 0
>         
>         lapsikorotus=22.23*lapsia
>         if muuelake<834.52+lapsikorotus:
>             elake=834.52+lapsikorotus-muuelake
>         else:
>             elake=0
>         
>         if elake<6.92:
>             elake=0
> 
>         return elake
>         
>     def laske_takuuelake2021(self,ika : int,muuelake : float,disability=False,lapsia=0):
>         if ika<63 and not disability:
>             return 0
1928c3754,3768
<         asumismeno=p['asumismenot_asumistuki']
---
>         lapsikorotus=22.23*lapsia
>         
>         if muuelake<837.59+lapsikorotus:
>             elake=837.59+lapsikorotus-muuelake
>         else:
>             elake=0
>         
>         if elake<6.92:
>             elake=0
> 
>         return elake
>         
>     def laske_takuuelake2022(self,ika : int,muuelake : float,disability=False,lapsia=0):
>         if ika<63 and not disability:
>             return 0
1930c3770
<         q['alv']=self.laske_alv(max(0,kateen-asumismeno)) # vuokran ylittävä osuus tuloista menee kulutukseen
---
>         lapsikorotus=22.71*lapsia
1932,1933c3772,3775
<         # nettotulo, joka huomioidaan elinkaarimallissa alkaen versiosta 4. sisältää omat tulot ja puolet vuokrasta
<         q['netto']=max(0,kateen-q['alv'])
---
>         if muuelake<855.48+lapsikorotus:
>             elake=855.48+lapsikorotus-muuelake
>         else:
>             elake=0
1935,1940c3777,3784
<         if p['aikuisia']>1:
<             brutto_puoliso=q[puoliso+'opintotuki']+q[puoliso+'kokoelake']+q[puoliso+'palkkatulot']+q[puoliso+'aitiyspaivaraha']\
<                 +q[puoliso+'isyyspaivaraha']+q[puoliso+'kotihoidontuki']\
<                 +q[puoliso+'ansiopvraha']+q[puoliso+'elatustuki']+q[puoliso+'sairauspaivaraha']+q[puoliso+'perustulo']
<             kateen_puoliso=brutto_puoliso-q[puoliso+'verot']
<             etuusnetto_puoliso=brutto_puoliso-q[puoliso+'palkkatulot']-(q[puoliso+'verot']-q[puoliso+'verot_ilman_etuuksia'])
---
>         if elake<6.92:
>             elake=0
> 
>         return elake        
> 
>     def laske_takuuelake2023(self,ika : int,muuelake : float,disability=False,lapsia=0):
>         if ika<63 and not disability:
>             return 0
1942,1956c3786,3794
<             if kateen_puoliso+kateen_omat<1e-6:
<                 suhde=0.5
<             else: # jaetaan bruttotulojen suhteessa, mutta tasoitetaan eroja
<                 if kateen_omat>kateen_puoliso:
<                     if (q['asumistuki']+q['lapsilisa']+q['toimeentulotuki']-q['alv']-q['pvhoito'])>0:
<                         suhde=kateen_puoliso/(kateen_puoliso+kateen_omat)
<                     else:
<                         suhde=kateen_omat/(kateen_puoliso+kateen_omat)
<                 else:
<                     if (q['asumistuki']+q['lapsilisa']+q['toimeentulotuki']-q['alv']-q['pvhoito'])>0:
<                         suhde=kateen_puoliso/(kateen_puoliso+kateen_omat)
<                     else:
<                         suhde=kateen_omat/(kateen_puoliso+kateen_omat)
<                 
<             #print(suhde,1.0-suhde,q['asumistuki']+q['lapsilisa']+q['toimeentulotuki']-q['alv']-q['pvhoito'],kateen_omat,kateen_puoliso)
---
>         lapsikorotus=22.71*lapsia
>         
>         if muuelake<855.48+lapsikorotus:
>             elake=855.48+lapsikorotus-muuelake
>         else:
>             elake=0
>         
>         if elake<6.92:
>             elake=0
1958,1961c3796,3823
<             if kateen_omat>0:
<                 r2=etuusnetto_omat/kateen_omat
<             else:
<                 r2=1
---
>         return elake        
>         
>     def laske_puhdas_tyoelake(self,ika : int,elake : float,disability=False,yksin=1,lapsia=0):
>          '''
>          Vähentää työeläkkeestä kansaneläkkeen ja takuueläkkeen
>          '''
>          if self.irr_vain_tyoelake:
>              return elake 
>          else:
>              kansanelake=self.laske_kansanelake(ika,0,yksin,disability=disability,lapsia=0)
>              elakeindeksi=(0*1+1.0*1.0/1.016) #**0.25
>              indeksi=elakeindeksi**max(0,ika-65)
>              if ika>=63 or disability:
>                  return max(0,elake-self.laske_takuuelake(ika,0,disability=disability)-kansanelake*indeksi)
>                  #return max(0,elake-self.laske_takuuelake(ika,0,disability=disability))
>              else:
>                  return max(0,elake-self.laske_kansanelake(ika,0,1)*indeksi)
>                  
>     def laske_puhdas_tyoelake_v2(self,ika : int,tyoelake : float,kansanelake : float,disability=False,yksin=1,lapsia=0):
>         '''
>         Vähentää työeläkkeestä kansaneläkkeen ja takuueläkkeen
>         '''
>         kansanelake_taysi=self.laske_kansanelake(ika,0,yksin,disability=disability,lapsia=lapsia)
>         elakeindeksi=(0*1+1.0*1.0/1.016)
>         indeksi=elakeindeksi**max(0,ika-65)
> 
>         # tyoeläkkeestä vähennetään takuueläke ja se osa kansaneläkettä, jonka työeläke on leikannut (kansaneläke sisältyy elake:seen)
>         vahennys1=max(0,(kansanelake_taysi-kansanelake)*indeksi)
1963,1970c3825,3838
<             etuusnetto_omat+=(q['asumistuki']+q['lapsilisa']+q['toimeentulotuki']-r2*(q['alv']+q['pvhoito']))*suhde
<             kateen_omat+=(q['asumistuki']+q['lapsilisa']+q['toimeentulotuki']-q['alv']-q['pvhoito'])*suhde
<             brutto_omat+=(q['asumistuki']+q['lapsilisa']+q['toimeentulotuki'])*suhde
<             q[omat+'toimeentulotuki']=q['toimeentulotuki']*suhde
<             q[omat+'asumistuki']=q['asumistuki']*suhde
<             q[omat+'pvhoito']=q['pvhoito']*suhde
<             q[omat+'lapsilisa']=q['lapsilisa']*suhde
<             q[omat+'alv']=q['alv']*suhde
---
>         if ika>=63 or disability:
>             vahennys2=max(0,self.laske_takuuelake(ika,kansanelake_taysi,disability=disability,lapsia=lapsia)-self.laske_takuuelake(ika,tyoelake+kansanelake,disability=disability,lapsia=lapsia))
>             return max(0,tyoelake-vahennys1-vahennys2)
>         else:
>             return max(0,tyoelake-vahennys1)
>     
>     def laske_kokonaiselake(self,ika : int,muuelake,yksin=1,include_takuuelake=True,include_kansanelake=False,disability=False,lapsia=0):
>         '''
>         by default, kansaneläke is not included, since this function is called annually
>         kansaneläke sisältyy muuelake-muuttujaan
>         '''
>         if include_kansanelake:
>             kansanelake=self.laske_kansanelake(ika,muuelake,yksin,disability=disability,lapsia=lapsia)
>             muuelake=muuelake+kansanelake
1972,1975c3840,3854
<             if kateen_puoliso>0:
<                 r2=etuusnetto_puoliso/kateen_puoliso
<             else:
<                 r2=1
---
>         if include_takuuelake:
>             takuuelake=self.laske_takuuelake(ika,muuelake,disability=disability,lapsia=lapsia)
>             kokoelake=takuuelake+muuelake
>         else:
>             kokoelake=muuelake
>     
>         return kokoelake
>         
>     def laske_kokonaiselake_v2(self,ika : int,muuelake,kansanelake,yksin=1,include_takuuelake=True,include_kansanelake=False,disability=False,lapsia=0):
>         '''
>         by default, kansaneläke is not included, since this function is called annually
>         kansaneläke lasketaan erikseen
>         '''
>         if include_kansanelake:
>             muuelake=muuelake+kansanelake
1977,1986c3856,3858
<             etuusnetto_puoliso+=(q['asumistuki']+q['lapsilisa']+q['toimeentulotuki']-r2*(q['alv']+q['pvhoito']))*(1-suhde)
<             kateen_puoliso+=(q['asumistuki']+q['lapsilisa']+q['toimeentulotuki']-q['alv']-q['pvhoito'])*(1-suhde)
<             brutto_puoliso+=(q['asumistuki']+q['lapsilisa']+q['toimeentulotuki'])*(1-suhde)
<             q[puoliso+'toimeentulotuki']=q['toimeentulotuki']*(1-suhde)
<             q[puoliso+'asumistuki']=q['asumistuki']*(1-suhde)
<             q[puoliso+'pvhoito']=q['pvhoito']*(1-suhde)
<             q[puoliso+'lapsilisa']=q['lapsilisa']*(1-suhde)
<             q[puoliso+'alv']=q['alv']*(1-suhde)
<             #if kateen_puoliso<1e-6:
<             #    print(kateen_omat,kateen_puoliso)
---
>         if include_takuuelake:
>             takuuelake=self.laske_takuuelake(ika,muuelake,disability=disability,lapsia=lapsia)
>             kokoelake=takuuelake+muuelake
1988,1989c3860,3862
<             kateen_omat+=q['asumistuki']+q['lapsilisa']+q['toimeentulotuki']-q['alv']-q['pvhoito']
<             brutto_omat+=q['asumistuki']+q['lapsilisa']+q['toimeentulotuki']
---
>             kokoelake=muuelake
>     
>         return kokoelake
1991,1994c3864,3890
<             if kateen_omat>0:
<                 r2=etuusnetto_omat/kateen_omat
<             else:
<                 r2=1
---
>     def isyysraha_perus(self,vakiintunutpalkka : float):
>         if self.year==2018:
>             minimi=27.86*25
>             taite1=37_861/12  
>             taite2=58_252/12  
>         elif self.year==2019:
>             minimi=27.86*25
>             taite1=37_861/12  
>             taite2=58_252/12  
>         elif self.year==2020:
>             minimi=28.94*25
>             taite1=37_861/12  
>             taite2=58_252/12  
>         elif self.year==2021:
>             minimi=29.05*25
>             taite1=39_144/12  
>             taite2=60_225/12  
>         elif self.year==2022:
>             minimi=29.67*25
>             taite1=39_144/12  
>             taite2=60_225/12  
>         elif self.year==2023:
>             minimi=29.67*25
>             taite1=39_144/12  
>             taite2=60_225/12
>         else:
>             print('isyysraha: unknown year',year)  
1996,2009c3892,3925
<             etuusnetto_omat+=q['asumistuki']+q['lapsilisa']+q['toimeentulotuki']-r2*(q['alv']+q['pvhoito'])
<             q[omat+'toimeentulotuki']=q['toimeentulotuki']
<             q[omat+'asumistuki']=q['asumistuki']
<             q[omat+'pvhoito']=q['pvhoito']
<             q[omat+'lapsilisa']=q['lapsilisa']
<             q[omat+'alv']=q['alv']
<             kateen_puoliso=0
<             brutto_puoliso=0
<             etuusnetto_puoliso=0
<             q[puoliso+'toimeentulotuki']=0
<             q[puoliso+'asumistuki']=0
<             q[puoliso+'pvhoito']=0
<             q[puoliso+'lapsilisa']=0
<             q[puoliso+'alv']=0
---
>         vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
>         raha=max(minimi,0.7*min(taite1,vakiintunutpalkka)+0.4*max(min(taite2,vakiintunutpalkka)-taite1,0)+0.4*max(vakiintunutpalkka-taite2,0))
> 
>         return raha
>         
>     def aitiysraha2019(self,vakiintunutpalkka : float,kesto : float):
>         if kesto<56/260:
>             minimi=27.86*25
>             taite1=37_861/12  
>             taite2=58_252/12 
>             vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
>             raha=max(minimi,0.9*min(taite1,vakiintunut)+0.325*max(vakiintunut-taite1,0))
>         else: 
>             minimi=27.86*25
>             taite1=37_861/12  
>             taite2=58_252/12 
>             vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
>             raha=max(minimi,0.7*min(taite1,vakiintunut)+0.4*max(min(taite2,vakiintunut)-taite1,0)+0.4*max(vakiintunutpalkka-taite2,0))
> 
>         return raha
>         
>     def aitiysraha2020(self,vakiintunutpalkka : float,kesto : float):
>         if kesto<56/260:
>             minimi=28.94*25
>             taite1=37_861/12  
>             taite2=58_252/12 
>             vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
>             raha=max(minimi,0.9*min(taite1,vakiintunut)+0.325*max(vakiintunut-taite1,0))
>         else: 
>             minimi=28.94*25
>             taite1=37_861/12  
>             taite2=58_252/12 
>             vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
>             raha=max(minimi,0.7*min(taite1,vakiintunut)+0.4*max(min(taite2,vakiintunut)-taite1,0)+0.4*max(vakiintunutpalkka-taite2,0))
2011,2015c3927,3941
<         q[omat+'netto']=kateen_omat
<         q[puoliso+'netto']=kateen_puoliso
<         q[omat+'etuustulo_netto']=etuusnetto_omat
<         q[puoliso+'etuustulo_netto']=etuusnetto_puoliso
<         q['etuustulo_netto_v2']=q[puoliso+'etuustulo_netto']+q[omat+'etuustulo_netto']
---
>         return raha
>         
>     def aitiysraha2021(self,vakiintunutpalkka : float,kesto : float):
>         if kesto<56/260:
>             minimi=29.05*25
>             taite1=39_144/12  
>             taite2=60_225/12 
>             vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
>             raha=max(minimi,0.9*min(taite1,vakiintunut)+0.325*max(vakiintunut-taite1,0))
>         else: 
>             minimi=29.05*25
>             taite1=39_144/12  
>             taite2=60_225/12 
>             vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
>             raha=max(minimi,0.7*min(taite1,vakiintunut)+0.4*max(min(taite2,vakiintunut)-taite1,0)+0.4*max(vakiintunutpalkka-taite2,0))
2017,2018c3943
<         #q[omat+'etuustulo_brutto']=brutto_omat
<         #q[puoliso+'etuustulo_brutto']=brutto_puoliso
---
>         return raha
2020,2026c3945,3959
<         q[omat+'etuustulo_brutto']=q[omat+'ansiopvraha']+q[omat+'opintotuki']+q[omat+'aitiyspaivaraha']\
<             +q[omat+'isyyspaivaraha']+q[omat+'kotihoidontuki']+q[omat+'asumistuki']+q[omat+'perustulo']\
<             +q[omat+'toimeentulotuki']+q[omat+'kokoelake']+q[omat+'elatustuki']+q[omat+'lapsilisa'] # + sairauspaivaraha
<         q[puoliso+'etuustulo_brutto']=q[puoliso+'ansiopvraha']+q[puoliso+'opintotuki']+q[puoliso+'aitiyspaivaraha']\
<             +q[puoliso+'isyyspaivaraha']+q[puoliso+'kotihoidontuki']+q[puoliso+'asumistuki']+q[puoliso+'perustulo']\
<             +q[puoliso+'toimeentulotuki']+q[puoliso+'kokoelake']+q[puoliso+'elatustuki']+q[puoliso+'lapsilisa']
<         q['etuustulo_brutto']=q[omat+'etuustulo_brutto']+q[puoliso+'etuustulo_brutto'] # + sairauspaivaraha
---
>     def aitiysraha2022(self,vakiintunutpalkka : float,kesto : float):
>         if kesto<56/260:
>             minimi=29.67*25
>             taite1=39_144/12  
>             taite2=60_225/12 
>             vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
>             raha=max(minimi,0.9*min(taite1,vakiintunut)+0.325*max(vakiintunut-taite1,0))
>         else: 
>             minimi=29.67*25
>             taite1=39_144/12  
>             taite2=60_225/12 
>             vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
>             raha=max(minimi,0.7*min(taite1,vakiintunut)+0.4*max(min(taite2,vakiintunut)-taite1,0)+0.4*max(vakiintunutpalkka-taite2,0))
> 
>         return raha
2028c3961,3975
<         kateen=q['netto']
---
>     def aitiysraha2023(self,vakiintunutpalkka : float,kesto : float):
>         if kesto<56/260:
>             minimi=29.67*25
>             taite1=39_144/12  
>             taite2=60_225/12 
>             vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
>             raha=max(minimi,0.9*min(taite1,vakiintunut)+0.325*max(vakiintunut-taite1,0))
>         else: 
>             minimi=29.67*25
>             taite1=39_144/12  
>             taite2=60_225/12 
>             vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
>             raha=max(minimi,0.7*min(taite1,vakiintunut)+0.4*max(min(taite2,vakiintunut)-taite1,0)+0.4*max(vakiintunutpalkka-taite2,0))
> 
>         return raha
2030,2031c3977,3982
<         # check that omat, puoliso split is ok
<         #self.check_q_netto(q,p['aikuisia'],omat,puoliso)
---
>     def sairauspaivaraha2018(self,vakiintunutpalkka : float):
>         minimi=24.64*25
>         taite1=30_394/12
>         taite2=58_252/12
>         vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
>         raha=max(minimi,0.7*min(taite1,vakiintunut)+0.4*max(min(taite2,vakiintunut)-taite1,0)+0.2*max(vakiintunut-taite2,0))
2033,2045c3984
<         return kateen,q
<                 
<     def setup_puoliso_q(self,p,q,puoliso='puoliso_',alku='puoliso_',include_takuuelake=True):
<         q[puoliso+'multiplier']=1
<         q[puoliso+'perustulo']=0 # eläkkeelle ei makseta
<         q[puoliso+'puhdas_tyoelake']=0
<         q[puoliso+'kansanelake']=0
<         q[puoliso+'tyoelake']=0
<         q[puoliso+'takuuelake']=0
<             
<         q[puoliso+'perustulo']=0
<         q[puoliso+'perustulo_netto']=0
<         q[puoliso+'perustulo_nettonetto']=0
---
>         return raha
2047,2048c3986,4003
<         if 'lapsikorotus_lapsia' not in p:
<             p['lapsikorotus_lapsia']=p['lapsia']
---
>     def sairauspaivaraha2019(self,vakiintunutpalkka : float):
>         minimi=27.86*25
>         taite1=30_394/12
>         taite2=57_183/12
>         vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
> 
>         raha=max(minimi,0.7*min(taite1,vakiintunut)+0.4*max(min(taite2,vakiintunut)-taite1,0)+0.2*max(vakiintunut-taite2,0))
> 
>         return raha
> 
>     def sairauspaivaraha2020(self,vakiintunutpalkka : float):
>         minimi=28.94*25
>         taite1=31_595/12  
>         vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
>                     
>         raha=max(minimi,0.7*min(taite1,vakiintunut)+0.2*max(vakiintunut-taite1,0))
> 
>         return raha
2050,2055c4005,4010
<         if p['aikuisia']>1 and p[puoliso+'alive']>0:
<             q[puoliso+'palkkatulot']=p[alku+'t']
<             if p[alku+'elakkeella']<1:
<                 q[puoliso+'palkkatulot_eielakkeella']=p[alku+'t']
<             else:
<                 q[puoliso+'palkkatulot_eielakkeella']=0
---
>     def sairauspaivaraha2021(self,vakiintunutpalkka : float):
>         minimi=29.05*25
>         taite1=32_011/12  
>         vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
>                     
>         raha=max(minimi,0.7*min(taite1,vakiintunut)+0.2*max(vakiintunut-taite1,0))
2057,2121c4012
<             if p[alku+'elakkeella']>0: # vanhuuseläkkeellä
<                 #p[alku+'tyoton']=0
<                 q[puoliso+'isyyspaivaraha'],q[puoliso+'aitiyspaivaraha'],q[puoliso+'kotihoidontuki'],q[puoliso+'sairauspaivaraha']=(0,0,0,0)
<                 q[puoliso+'elake_maksussa']=p[alku+'elake_maksussa']
<                 q[puoliso+'tyoelake']=p[alku+'tyoelake']
<                 q[puoliso+'kansanelake']=p[alku+'kansanelake']
<                 q[puoliso+'elake_tuleva']=0
<                 #p[alku+'saa_ansiopaivarahaa']=0
<                 # huomioi takuueläkkeen, kansaneläke sisältyy eläke_maksussa-osaan
<                 q[puoliso+'kokoelake']=self.laske_kokonaiselake(p['ika'],q[puoliso+'elake_maksussa'],include_takuuelake=include_takuuelake,yksin=0,
<                                             disability=p[puoliso+'disabled'],lapsia=p['lapsikorotus_lapsia'])
<                 q[puoliso+'takuuelake']=q[puoliso+'kokoelake']-q[puoliso+'elake_maksussa']
<                 q[puoliso+'ansiopvraha'],q[puoliso+'puhdasansiopvraha'],q[puoliso+'peruspvraha']=(0,0,0)
<                 q[puoliso+'opintotuki']=0
<                 q[puoliso+'puhdas_tyoelake']=self.laske_puhdas_tyoelake_v2(p['ika'],q[puoliso+'tyoelake'],q[puoliso+'kansanelake'],disability=p[alku+'disabled'],yksin=0,lapsia=p['lapsia'])
<             elif p[alku+'opiskelija']>0:
<                 q[puoliso+'kokoelake']=p[alku+'tyoelake']
<                 q[puoliso+'elake_maksussa']=p[alku+'tyoelake']
<                 q[puoliso+'tyoelake']=p[alku+'tyoelake']
<                 q[puoliso+'elake_tuleva']=0
<                 q[puoliso+'ansiopvraha'],q[puoliso+'puhdasansiopvraha'],q[puoliso+'peruspvraha']=(0,0,0)
<                 q[puoliso+'isyyspaivaraha'],q[puoliso+'aitiyspaivaraha'],q[puoliso+'kotihoidontuki'],q[puoliso+'sairauspaivaraha']=(0,0,0,0)
<                 q[puoliso+'opintotuki']=0
<                 q[puoliso+'perustulo']=self.perustulo()
<                 if p[alku+'aitiysvapaalla']>0:
<                     q[puoliso+'aitiyspaivaraha']=self.aitiysraha(p[alku+'vakiintunutpalkka'],p[alku+'aitiysvapaa_kesto'])
<                 elif p[alku+'isyysvapaalla']>0:
<                     q[puoliso+'isyyspaivaraha']=self.isyysraha(p[alku+'vakiintunutpalkka'])
<                 elif p[alku+'kotihoidontuella']>0:
<                     q[puoliso+'kotihoidontuki']=0
<                 else:
<                     q[puoliso+'opintotuki']=0
<             else: # ei eläkkeellä     
<                 q[puoliso+'kokoelake']=p[alku+'tyoelake']
<                 q[puoliso+'opintotuki']=0
<                 q[puoliso+'elake_maksussa']=p[alku+'tyoelake']
<                 q[puoliso+'tyoelake']=p[alku+'tyoelake']
<                 q[puoliso+'elake_tuleva']=0
<                 q[puoliso+'ansiopvraha'],q[puoliso+'puhdasansiopvraha'],q[puoliso+'peruspvraha']=(0,0,0)
<                 q[puoliso+'isyyspaivaraha'],q[puoliso+'aitiyspaivaraha'],q[puoliso+'kotihoidontuki'],q[puoliso+'sairauspaivaraha']=(0,0,0,0)
<                 q[puoliso+'perustulo']=self.perustulo()
<                 if p[alku+'aitiysvapaalla']>0:
<                     q[puoliso+'aitiyspaivaraha']=self.aitiysraha(p[alku+'vakiintunutpalkka'],p[alku+'aitiysvapaa_kesto'])
<                 elif p[alku+'isyysvapaalla']>0:
<                     q[puoliso+'isyyspaivaraha']=self.isyysraha(p[alku+'vakiintunutpalkka'])
<                 elif p[alku+'sairauspaivarahalla']>0:
<                     q[puoliso+'sairauspaivaraha']=self.sairauspaivaraha(p[alku+'vakiintunutpalkka'])
<                 elif p[alku+'kotihoidontuella']>0:
<                     q[puoliso+'kotihoidontuki']=0
<                 elif p[alku+'tyoton']>0:
<                     q[puoliso+'ansiopvraha'],q[puoliso+'puhdasansiopvraha'],q[puoliso+'peruspvraha']=\
<                         self.ansiopaivaraha(p[alku+'tyoton'],p[alku+'vakiintunutpalkka'],p['lapsikorotus_lapsia'],p[alku+'t'],
<                             p[alku+'saa_ansiopaivarahaa'],p[alku+'tyottomyyden_kesto'],p,alku=alku)
<         else:
<             q[puoliso+'kokoelake']=0
<             q[puoliso+'opintotuki']=0
<             q[puoliso+'elake_maksussa']=0
<             q[puoliso+'tyoelake']=0
<             q[puoliso+'elake_tuleva']=0
<             q[puoliso+'ansiopvraha'],q[puoliso+'puhdasansiopvraha'],q[puoliso+'peruspvraha']=(0,0,0)
<             q[puoliso+'isyyspaivaraha'],q[puoliso+'aitiyspaivaraha'],q[puoliso+'kotihoidontuki'],q[puoliso+'sairauspaivaraha']=(0,0,0,0)
<             q[puoliso+'palkkatulot']=0
<             q[puoliso+'palkkatulot_eielakkeella']=0
<                 
<         return q
---
>         return raha
2123,2133c4014,4030
<     def setup_omat_q(self,p,omat='omat_',alku='',include_takuuelake=True):
<         q={} # tulokset tänne
<         q[omat+'multiplier']=1
<         q[omat+'perustulo']=0
<         q[omat+'puhdas_tyoelake']=0
<         q[omat+'perustulo_netto']=0
<         q[omat+'perustulo_nettonetto']=0
<         q[omat+'palkkatulot']=p[alku+'t']
<         q[omat+'tyoelake']=0
<         q[omat+'kansanelake']=0
<         q[omat+'takuuelake']=0
---
>     def sairauspaivaraha2022(self,vakiintunutpalkka : float):
>         minimi=29.67*25
>         taite1=32_011/12  
>         vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
>                     
>         raha=max(minimi,0.7*min(taite1,vakiintunut)+0.2*max(vakiintunut-taite1,0))
> 
>         return raha
> 
>     def sairauspaivaraha2023(self,vakiintunutpalkka : float):
>         minimi=29.67*25
>         taite1=32_011/12  
>         vakiintunut=(1-self.sotumaksu)*vakiintunutpalkka                    
>                     
>         raha=max(minimi,0.7*min(taite1,vakiintunut)+0.2*max(vakiintunut-taite1,0))
> 
>         return raha
2135,2136c4032,4162
<         if p[alku+'elakkeella']<1 and p[alku+'alive']>0:
<             q[omat+'palkkatulot_eielakkeella']=p[alku+'t']
---
>     # valitaan oikeat funktiot vuoden mukaan
>     def set_year(self,vuosi : int):
>         '''
>         korvataan etuusfunktiot oikeiden vuosien etuusfunktioilla
>         '''
>         if vuosi==2019:
>             self.laske_kansanelake=self.laske_kansanelake2019
>             self.laske_takuuelake=self.laske_takuuelake2019
>             self.aitiysraha=self.aitiysraha2019
>             self.isyysraha=self.isyysraha_perus
>             self.peruspaivaraha=self.peruspaivaraha2019
>             self.veroparam=self.veroparam2019          
>             self.valtionvero_asteikko=self.valtionvero_asteikko_2019
>             self.raippavero=self.raippavero2019
>             self.laske_ylevero=self.laske_ylevero2019
>             self.elaketulovahennys=self.elaketulovahennys2019
>             self.tyotulovahennys=self.tyotulovahennys2019
>             self.ansiotulovahennys=self.ansiotulovahennys2019
>             self.perusvahennys=self.perusvahennys2019
>             self.lapsilisa=self.lapsilisa2019
>             self.asumistuki=self.asumistuki2019
>             self.elakkeensaajan_asumistuki=self.elakkeensaajan_asumistuki_2019
>             self.kotihoidontuki=self.kotihoidontuki2019
>             self.paivahoitomenot=self.paivahoitomenot2019
>             self.sairauspaivaraha=self.sairauspaivaraha2019
>             self.toimeentulotuki_param=self.toimeentulotuki_param2019
>         elif vuosi==2020:
>             self.laske_kansanelake=self.laske_kansanelake2020
>             self.laske_takuuelake=self.laske_takuuelake2020
>             self.aitiysraha=self.aitiysraha2020
>             self.isyysraha=self.isyysraha_perus
>             self.peruspaivaraha=self.peruspaivaraha2020
>             self.valtionvero_asteikko=self.valtionvero_asteikko_2020
>             self.raippavero=self.raippavero2020
>             self.laske_ylevero=self.laske_ylevero2020
>             self.elaketulovahennys=self.elaketulovahennys2020
>             self.tyotulovahennys=self.tyotulovahennys2020
>             self.perusvahennys=self.perusvahennys2020
>             self.ansiotulovahennys=self.ansiotulovahennys2020
>             self.veroparam=self.veroparam2020
>             self.lapsilisa=self.lapsilisa2020
>             self.asumistuki=self.asumistuki2020
>             self.elakkeensaajan_asumistuki=self.elakkeensaajan_asumistuki_2020
>             self.kotihoidontuki=self.kotihoidontuki2020
>             self.paivahoitomenot=self.paivahoitomenot2020
>             self.sairauspaivaraha=self.sairauspaivaraha2020
>             self.toimeentulotuki_param=self.toimeentulotuki_param2020
>         elif vuosi==2021:
>             self.laske_kansanelake=self.laske_kansanelake2021
>             self.laske_takuuelake=self.laske_takuuelake2021
>             self.aitiysraha=self.aitiysraha2021
>             self.isyysraha=self.isyysraha_perus
>             self.peruspaivaraha=self.peruspaivaraha2021
>             self.valtionvero_asteikko=self.valtionvero_asteikko_2021
>             self.raippavero=self.raippavero2021
>             self.laske_ylevero=self.laske_ylevero2021
>             self.elaketulovahennys=self.elaketulovahennys2021
>             self.tyotulovahennys=self.tyotulovahennys2021
>             self.perusvahennys=self.perusvahennys2021
>             self.ansiotulovahennys=self.ansiotulovahennys2021
>             self.veroparam=self.veroparam2021
>             self.lapsilisa=self.lapsilisa2021
>             self.asumistuki=self.asumistuki2021
>             self.elakkeensaajan_asumistuki=self.elakkeensaajan_asumistuki_2021
>             self.kotihoidontuki=self.kotihoidontuki2021
>             self.paivahoitomenot=self.paivahoitomenot2021
>             self.sairauspaivaraha=self.sairauspaivaraha2021
>             self.toimeentulotuki_param=self.toimeentulotuki_param2021
>         elif vuosi==2022:
>             self.laske_kansanelake=self.laske_kansanelake2022
>             self.laske_takuuelake=self.laske_takuuelake2022
>             self.aitiysraha=self.aitiysraha2022
>             self.isyysraha=self.isyysraha_perus
>             self.peruspaivaraha=self.peruspaivaraha2022
>             self.valtionvero_asteikko=self.valtionvero_asteikko_2022
>             self.raippavero=self.raippavero2022
>             self.laske_ylevero=self.laske_ylevero2022
>             self.elaketulovahennys=self.elaketulovahennys2022
>             self.tyotulovahennys=self.tyotulovahennys2022
>             self.perusvahennys=self.perusvahennys2022
>             self.ansiotulovahennys=self.ansiotulovahennys2022
>             self.veroparam=self.veroparam2022
>             self.lapsilisa=self.lapsilisa2022
>             self.asumistuki=self.asumistuki2022
>             self.elakkeensaajan_asumistuki=self.elakkeensaajan_asumistuki_2022
>             self.kotihoidontuki=self.kotihoidontuki2022
>             self.paivahoitomenot=self.paivahoitomenot2022
>             self.sairauspaivaraha=self.sairauspaivaraha2022
>             self.toimeentulotuki_param=self.toimeentulotuki_param2022
>         elif vuosi==2023:
>             self.laske_kansanelake=self.laske_kansanelake2023
>             self.laske_takuuelake=self.laske_takuuelake2023
>             self.aitiysraha=self.aitiysraha2023
>             self.isyysraha=self.isyysraha_perus
>             self.peruspaivaraha=self.peruspaivaraha2023
>             self.valtionvero_asteikko=self.valtionvero_asteikko_2023
>             self.raippavero=self.raippavero2023
>             self.laske_ylevero=self.laske_ylevero2023
>             self.elaketulovahennys=self.elaketulovahennys2023
>             self.tyotulovahennys=self.tyotulovahennys2023
>             self.perusvahennys=self.perusvahennys2023
>             self.ansiotulovahennys=self.ansiotulovahennys2023
>             self.veroparam=self.veroparam2023
>             self.lapsilisa=self.lapsilisa2023
>             self.asumistuki=self.asumistuki2023
>             self.elakkeensaajan_asumistuki=self.elakkeensaajan_asumistuki_2023
>             self.kotihoidontuki=self.kotihoidontuki2023
>             self.paivahoitomenot=self.paivahoitomenot2023
>             self.sairauspaivaraha=self.sairauspaivaraha2023
>             self.toimeentulotuki_param=self.toimeentulotuki_param2023
>         elif vuosi==2018:
>             self.laske_kansanelake=self.laske_kansanelake2018
>             self.laske_takuuelake=self.laske_takuuelake2018
>             self.aitiysraha=self.aitiysraha2019
>             self.isyysraha=self.isyysraha_perus
>             self.peruspaivaraha=self.peruspaivaraha2018
>             self.veroparam=self.veroparam2018            
>             self.elaketulovahennys=self.elaketulovahennys2018
>             self.tyotulovahennys=self.tyotulovahennys2018
>             self.perusvahennys=self.perusvahennys2018
>             self.ansiotulovahennys=self.ansiotulovahennys2018
>             self.valtionvero_asteikko=self.valtionvero_asteikko_2018
>             self.raippavero=self.raippavero2018
>             self.laske_ylevero=self.laske_ylevero2018
>             self.lapsilisa=self.lapsilisa2018
>             self.asumistuki=self.asumistuki2018
>             self.elakkeensaajan_asumistuki=self.elakkeensaajan_asumistuki_2018
>             self.kotihoidontuki=self.kotihoidontuki2018
>             self.paivahoitomenot=self.paivahoitomenot2018
>             self.sairauspaivaraha=self.sairauspaivaraha2018
>             self.toimeentulotuki_param=self.toimeentulotuki_param2018            
2138c4164
<             q[omat+'palkkatulot_eielakkeella']=0
---
>             print('Vuoden {v} aineisto puuttuu'.format(v=vuosi))
2140,2166c4166,4167
<         if p[alku+'alive']<1:
<             q[omat+'isyyspaivaraha'],q[omat+'aitiyspaivaraha'],q[omat+'kotihoidontuki'],q[omat+'sairauspaivaraha']=(0,0,0,0)
<             q[omat+'elake_maksussa'],q[omat+'tyoelake'],q[omat+'kansanelake'],q[omat+'elake_tuleva']=0,0,0,0
<             q[omat+'ansiopvraha'],q[omat+'puhdasansiopvraha'],q[omat+'peruspvraha']=(0,0,0)
<             q[omat+'opintotuki']=0
<             q[omat+'kokoelake'],q[omat+'takuuelake'],q[omat+'puhdas_tyoelake']=0,0,0
<         elif p[alku+'elakkeella']>0: # vanhuuseläkkeellä
<             #p['tyoton']=0
<             q[omat+'isyyspaivaraha'],q[omat+'aitiyspaivaraha'],q[omat+'kotihoidontuki'],q[omat+'sairauspaivaraha']=(0,0,0,0)
<             q[omat+'elake_maksussa']=p[alku+'elake_maksussa']
<             q[omat+'tyoelake']=p[alku+'tyoelake']
<             q[omat+'kansanelake']=p[alku+'kansanelake']
<             q[omat+'elake_tuleva']=0
<             #p['omat_saa_ansiopaivarahaa']=0
<             # huomioi takuueläkkeen, kansaneläke sisältyy eläke_maksussa-osaan
<             if (p['aikuisia']>1):
<                 q[omat+'kokoelake']=self.laske_kokonaiselake(p['ika'],q[omat+'elake_maksussa'],yksin=0,include_takuuelake=include_takuuelake,
<                                             disability=p[alku+'disabled'],lapsia=p['lapsikorotus_lapsia'])
<                 q[omat+'takuuelake']=q[omat+'kokoelake']-q[omat+'elake_maksussa']
<                 q[omat+'puhdas_tyoelake']=self.laske_puhdas_tyoelake_v2(p['ika'],q[omat+'tyoelake'],q[omat+'kansanelake'],
<                                             disability=p[alku+'disabled'],yksin=0,lapsia=p['lapsia'])
<             else:
<                 q[omat+'kokoelake']=self.laske_kokonaiselake(p['ika'],q[omat+'elake_maksussa'],yksin=1,include_takuuelake=include_takuuelake,
<                                             disability=p[alku+'disabled'],lapsia=p['lapsikorotus_lapsia'])
<                 q[omat+'takuuelake']=q[omat+'kokoelake']-q[omat+'elake_maksussa']
<                 q[omat+'puhdas_tyoelake']=self.laske_puhdas_tyoelake_v2(p['ika'],q[omat+'tyoelake'],q[omat+'kansanelake'],
<                                             disability=p[alku+'disabled'],yksin=1,lapsia=p['lapsia'])
---
>         self.sotumaksu=self.laske_sotumaksu(vuosi)
>         self.setup_tmtuki_param(vuosi)
2168,2212c4169,4179
<             q[omat+'ansiopvraha'],q[omat+'puhdasansiopvraha'],q[omat+'peruspvraha']=(0,0,0)
<             q[omat+'opintotuki']=0
<         elif p[alku+'opiskelija']>0:
<             q[omat+'elake_maksussa']=p[alku+'tyoelake']
<             q[omat+'kokoelake']=p[alku+'tyoelake']
<             q[omat+'tyoelake']=p[alku+'tyoelake']
<             q[omat+'elake_tuleva']=0
<             q[omat+'ansiopvraha'],q[omat+'puhdasansiopvraha'],q[omat+'peruspvraha']=(0,0,0)
<             q[omat+'isyyspaivaraha'],q[omat+'aitiyspaivaraha'],q[omat+'kotihoidontuki'],q[omat+'sairauspaivaraha']=(0,0,0,0)
<             q[omat+'opintotuki']=0
<             q[omat+'perustulo']=self.perustulo()
<             if p[alku+'aitiysvapaalla']>0:
<                 q[omat+'aitiyspaivaraha']=self.aitiysraha(p[alku+'vakiintunutpalkka'],p[alku+'aitiysvapaa_kesto'])
<             elif p[alku+'isyysvapaalla']>0:
<                 q[omat+'isyyspaivaraha']=self.isyysraha(p[alku+'vakiintunutpalkka'])
<             elif p[alku+'kotihoidontuella']>0:
<                 q[omat+'kotihoidontuki']=0
<             else:
<                 q[omat+'opintotuki']=0
<         else: # ei eläkkeellä     
<             q[omat+'opintotuki']=0
<             q[omat+'elake_maksussa']=p[alku+'elake_maksussa']
<             q[omat+'kokoelake']=p[alku+'tyoelake']
<             q[omat+'tyoelake']=p[alku+'tyoelake']
<             q[omat+'elake_tuleva']=0
<             q[omat+'ansiopvraha'],q[omat+'puhdasansiopvraha'],q[omat+'peruspvraha']=(0,0,0)
<             q[omat+'isyyspaivaraha'],q[omat+'aitiyspaivaraha'],q[omat+'kotihoidontuki'],q[omat+'sairauspaivaraha']=(0,0,0,0)
<             q[omat+'perustulo']=self.perustulo()
<             if p[alku+'aitiysvapaalla']>0:
<                 q[omat+'aitiyspaivaraha']=self.aitiysraha(p[alku+'vakiintunutpalkka'],p[alku+'aitiysvapaa_kesto'])
<             elif p[alku+'isyysvapaalla']>0:
<                 q[omat+'isyyspaivaraha']=self.isyysraha(p[alku+'vakiintunutpalkka'])
<             elif p[alku+'sairauspaivarahalla']>0:
<                 q[omat+'sairauspaivaraha']=self.sairauspaivaraha(p[alku+'vakiintunutpalkka'])
<             elif p[alku+'kotihoidontuella']>0:
<                 q[omat+'kotihoidontuki']=0
<             elif p['tyoton']>0:
<                 if alku+'omavastuukerroin' in p:
<                     omavastuukerroin=p[alku+'omavastuukerroin']
<                 else:
<                     omavastuukerroin=1.0
<                 q[omat+'ansiopvraha'],q[omat+'puhdasansiopvraha'],q[omat+'peruspvraha']=\
<                     self.ansiopaivaraha(p[alku+'tyoton'],p[alku+'vakiintunutpalkka'],p['lapsikorotus_lapsia'],p[alku+'t'],
<                         p[alku+'saa_ansiopaivarahaa'],p[alku+'tyottomyyden_kesto'],p,omavastuukerroin=omavastuukerroin,alku=omat)
<         return q                        
\ No newline at end of file
---
>             
>     def get_tyelpremium(self):
>         tyel_kokomaksu=np.zeros((2100,5))
>         # data
>         self.data_tyel_kokomaksu[1962:2022]=[5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.15,5.15,5.65,6.1,6.4,6.9,7.9,9.9,12.0,10.0,11.7,13.3,13.3,12.4,11.1,11.1,11.5,12.2,13.0,13.8,14.9,16.9,16.9,14.4,18.5,18.6,20.6,21.1,21.2,21.5,21.5,21.5,21.1,21.1,21.4,21.4,21.6,21.2,21.1,21.1,21.3,21.6,22.1,22.8,22.8,23.6,24.0,24.0,24.4,24.4,24.4,24.4,24.4,24.4]
>         # ETK
>         self.data_tyel_kokomaksu[2023:2085]=np.array([24.4,24.5,24.5,24.6,24.6,24.7,24.8,24.8,24.9,24.9,25.0,24.9,24.9,24.9,24.9,24.8,24.8,24.7,24.7,24.6,24.6,24.6,24.6,24.6,24.7,24.8,24.8,24.9,25.1,25.2,25.4,25.6,25.8,26.0,26.2,26.5,26.7,27.0,27.2,27.5,27.7,27.9,28.1,28.3,28.5,28.7,28.9,29.1,29.2,29.4,29.5,29.7,29.8,29.9,30.1,30.2,30.3,30.3,30.4,30.4,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5])/100
>         self.data_ptel=0.5*(self.data_tyel_kokomaksu-self.data_tyel_kokomaksu[2017])+0.0615 # vuonna 2017 ptel oli 6,15 %
>         self.data_ptel[1962:1993]=0
>         
>         return tyel_kokomaksu
